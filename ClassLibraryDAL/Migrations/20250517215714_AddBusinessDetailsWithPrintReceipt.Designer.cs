// <auto-generated />
using System;
using ClassLibraryDAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClassLibraryDAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250517215714_AddBusinessDetailsWithPrintReceipt")]
    partial class AddBusinessDetailsWithPrintReceipt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("ClassLibraryEntities.BusinessCategory", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UrduName")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryID");

                    b.ToTable("BusinessCategories", (string)null);
                });

            modelBuilder.Entity("ClassLibraryEntities.BusinessDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("BusinessType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DefaultTaxRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(15.0m);

                    b.Property<bool>("HasOutdoorSeating")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasWiFi")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IncludeBarcode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("LogoData")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceiptFooter")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceiptHeader")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BusinessDetails");
                });

            modelBuilder.Entity("ClassLibraryEntities.BusinessModel", b =>
                {
                    b.Property<int>("BusinessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BusinessDetailsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GeneralInformationId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.HasKey("BusinessID");

                    b.HasIndex("BusinessDetailsId");

                    b.HasIndex("GeneralInformationId");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("ClassLibraryEntities.BusinessSubItem", b =>
                {
                    b.Property<int>("SubItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentSubItemID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubItemName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SubItemID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ParentSubItemID");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("ClassLibraryEntities.BusinessTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AmountReceived")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ChangeAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Discount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsReturn")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StaffName")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("TEXT");

                    b.Property<string>("TableNumber")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Tax")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Total")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TransactionID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ClassLibraryEntities.GeneralInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GeneralInformation");
                });

            modelBuilder.Entity("ClassLibraryEntities.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActiveDays")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("NestedSubCategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductCode")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductUrduName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("SubCategoryID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("SubCategoryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ClassLibraryEntities.TransactionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionItems");
                });

            modelBuilder.Entity("ClassLibraryEntities.BusinessModel", b =>
                {
                    b.HasOne("ClassLibraryEntities.BusinessDetails", "BusinessDetails")
                        .WithMany()
                        .HasForeignKey("BusinessDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibraryEntities.GeneralInformation", "GeneralInformation")
                        .WithMany()
                        .HasForeignKey("GeneralInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessDetails");

                    b.Navigation("GeneralInformation");
                });

            modelBuilder.Entity("ClassLibraryEntities.BusinessSubItem", b =>
                {
                    b.HasOne("ClassLibraryEntities.BusinessCategory", "Category")
                        .WithMany("SubItems")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibraryEntities.BusinessSubItem", "ParentSubItem")
                        .WithMany("NestedSubItems")
                        .HasForeignKey("ParentSubItemID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("ParentSubItem");
                });

            modelBuilder.Entity("ClassLibraryEntities.Product", b =>
                {
                    b.HasOne("ClassLibraryEntities.BusinessCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClassLibraryEntities.BusinessSubItem", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryID");

                    b.Navigation("Category");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("ClassLibraryEntities.TransactionItem", b =>
                {
                    b.HasOne("ClassLibraryEntities.BusinessTransaction", "Transaction")
                        .WithMany("Items")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("ClassLibraryEntities.BusinessCategory", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubItems");
                });

            modelBuilder.Entity("ClassLibraryEntities.BusinessSubItem", b =>
                {
                    b.Navigation("NestedSubItems");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ClassLibraryEntities.BusinessTransaction", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
