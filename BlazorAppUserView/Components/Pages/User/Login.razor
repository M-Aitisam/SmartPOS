@page "/login"
@inject NavigationManager Navigation
@inject IAdminService AdminService
@inject StateContainerService StateContainer
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JS
@rendermode InteractiveServer

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            @if (!string.IsNullOrEmpty(logoUrl))
            {
                <img src="@logoUrl" alt="Business Logo" class="logo" />
            }
            else
            {
                <img src="/images/logo.png" alt="Company Logo" class="logo" />
            }
            <h2>Welcome Back</h2>
            <p>Please enter your credentials to login</p>
        </div>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" class="login-form">
            <DataAnnotationsValidator />
            <ValidationSummary class="validation-summary" />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            <div class="form-group">
                <label for="email">Email Address</label>
                <InputText @bind-Value="loginModel.Email" class="form-control" id="email" />
                <ValidationMessage For="@(() => loginModel.Email)" class="validation-message" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText type="password" @bind-Value="loginModel.Password" class="form-control" id="password" />
                <ValidationMessage For="@(() => loginModel.Password)" class="validation-message" />
            </div>

            <div class="form-options">
                <div class="form-check">
                    <InputCheckbox @bind-Value="loginModel.RememberMe" class="form-check-input" id="remember" />
                    <label class="form-check-label" for="remember">Remember me</label>
                </div>
                <a href="/forgot-password" class="forgot-password">Forgot password?</a>
            </div>

            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Logging in...</span>
                }
                else
                {
                    <span>Login</span>
                }
            </button>

            <div class="register-link">
                Don't have an account? <a href="/businessregistration">Register your business</a>
            </div>
            @if (StateContainer.IsAuthenticated)
            {
                <button @onclick="Logout">Logout</button>
            }
        </EditForm>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private string? logoUrl;

    protected override async Task OnInitializedAsync()
    {
        await LoadBusinessLogo();
    }

    private async Task Logout()
    {
        StateContainer.CurrentBusiness = null;
        StateContainer.IsAuthenticated = false;
        StateContainer.IsRegistered = false;
        await JS.InvokeVoidAsync("localStorage.removeItem", "authToken");
        Navigation.NavigateTo("/", forceLoad: true);
    }

    private async Task LoadBusinessLogo()
    {
        try
        {
            if (StateContainer.CurrentBusiness?.BusinessDetails?.LogoData != null)
            {
                logoUrl = $"data:image/png;base64,{Convert.ToBase64String(StateContainer.CurrentBusiness.BusinessDetails.LogoData)}";
                return;
            }

            var logoData = await AdminService.GetBusinessLogo("aitisamahmed24@gmail.com");
            if (logoData != null)
            {
                logoUrl = $"data:image/png;base64,{Convert.ToBase64String(logoData)}";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading business logo: {ex.Message}");
        }
    }

        private async Task HandleLogin()
        {
            isLoading = true;
            errorMessage = string.Empty;
            StateHasChanged();

            try
            {
                if (string.IsNullOrEmpty(loginModel.Email))
                {
                    errorMessage = "Email is required";
                    return;
                }

                if (string.IsNullOrEmpty(loginModel.Password))
                {
                    errorMessage = "Password is required";
                    return;
                }

                var isValid = await AdminService.VerifyCredentials(loginModel.Email, loginModel.Password);

                if (isValid)
                {
                    var business = await AdminService.GetBusinessByEmail(loginModel.Email);
                    if (business != null)
                    {
                        StateContainer.CurrentBusiness = business;
                    StateContainer.IsRegistered = true;
                    StateContainer.IsAuthenticated = true;
                    }

                    if (loginModel.RememberMe)
                    {
                        await JS.InvokeVoidAsync("localStorage.setItem", "authToken", "generated-token");
                    }

                    // Show success alert - CORRECTED SYNTAX
                    await JS.InvokeVoidAsync("Swal.fire", new
                    {
                        title = "Login Successful!",
                        text = "You're being redirected to your dashboard",
                        icon = "success",
                        showConfirmButton = false,
                        timer = 1500,
                        background = "#ffffff",
                        backdrop = "rgba(108,92,231,0.4)",
                        customClass = new
                        {
                            popup = "custom-swal-popup",
                            title = "custom-swal-title"
                        }
                    });

                    // Navigate after alert closes
                    await Task.Delay(1500);
                    Navigation.NavigateTo("/adminpage", forceLoad: true);
                   
                }
                else
                {
                    errorMessage = "Invalid email or password";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Login failed: {ex.Message}";
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }


    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }
}

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        padding: 2rem;
    }

    .login-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 420px;
        padding: 2.5rem;
        animation: fadeIn 0.5s ease;
    }

    .login-header {
        text-align: center;
        margin-bottom: 2rem;
    }

        .login-header .logo {
            height: 60px;
            margin-bottom: 1.5rem;
        }

        .login-header h2 {
            color: #2c3e50;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }

        .login-header p {
            color: #7f8c8d;
            margin-bottom: 0;
        }

    .login-form {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

        .form-group label {
            font-weight: 500;
            color: #2c3e50;
        }

    .form-control {
        padding: 0.75rem 1rem;
        border: 1px solid #dfe6e9;
        border-radius: 8px;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

        .form-control:focus {
            border-color: #4a6bff;
            box-shadow: 0 0 0 3px rgba(74, 107, 255, 0.2);
        }

    .form-options {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .form-check {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .form-check-input {
        width: 1.2em;
        height: 1.2em;
        margin-top: 0;
    }

    .forgot-password {
        color: #4a6bff;
        text-decoration: none;
        font-size: 0.9rem;
    }

        .forgot-password:hover {
            text-decoration: underline;
        }

    .btn-primary {
        background-color: #4a6bff;
        border: none;
        padding: 0.75rem;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .btn-primary:hover {
            background-color: #3a5bef;
        }

        .btn-primary:disabled {
            background-color: #bdc3c7;
            cursor: not-allowed;
        }

    .register-link {
        text-align: center;
        margin-top: 1rem;
        color: #7f8c8d;
    }

        .register-link a {
            color: #4a6bff;
            text-decoration: none;
        }

            .register-link a:hover {
                text-decoration: underline;
            }

    .validation-summary {
        color: #e74c3c;
        background-color: #fdecea;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        font-size: 0.9rem;
    }

    .validation-message {
        color: #e74c3c;
        font-size: 0.85rem;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
        padding: 0.75rem 1.25rem;
        margin-bottom: 1rem;
        border-radius: 6px;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* SweetAlert Customizations */
    .custom-swal-popup {
        border-radius: 16px !important;
        box-shadow: 0 10px 30px rgba(108, 92, 231, 0.3) !important;
    }

    .custom-swal-title {
        color: #6c5ce7 !important;
        font-weight: 700 !important;
    }

    @@media (max-width: 576px) {
        .login-container {
            padding: 1rem;
        }

        .login-card {
            padding: 1.5rem;
        }
    }
</style>