@page "/"
@namespace BlazorAppUserView.Components.Pages.User
@using Microsoft.AspNetCore.Components.Forms
@using ClassLibraryEntities
@using ClassLibraryServices
@inject IAdminService AdminService
@inject StateContainerService StateContainer
@inject IJSRuntime JS
@inject NavigationManager Navigation
@rendermode InteractiveServer

<style>
    /* Modern, clean styling with background image */
    :root {
        --primary-color: #4361ee;
        --secondary-color: #3f37c9;
        --accent-color: #4895ef;
        --dark-color: #1a1a2e;
        --light-color: #f8f9fa;
        --success-color: #4cc9f0;
        --danger-color: #f72585;
        --warning-color: #f8961e;
        --info-color: #7209b7;
    }

    .registration-container {
        background-image: url('/Images/backgroundimg.jpg');
        background-size: cover;
        background-attachment: fixed;
        background-repeat: no-repeat;
        margin: 0 auto;
        padding: 2rem 4rem ;
        position: relative;
        overflow: hidden;
    }

    .progress-tracker {
        margin-bottom: 3rem;
        padding: 0 20px; /* Add some padding to prevent cutting off the progress bar */
    }

    .step-container {
        display: flex;
        justify-content: space-between;
        position: relative;
    }

    .step-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        flex: 1;
        position: relative;
    }

    .step-progress {
        width: 100%;
        height: 6px;
        background-color: #e9ecef;
        position: absolute;
        top: 15px;
        left: 0;
        z-index: 1;
    }

    .step-item:first-child .step-progress {
        display: none;
    }

    .progress-segment {
        width: 0%;
        height: 100%;
        background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
        transition: width 0.8s cubic-bezier(0.65, 0, 0.35, 1); /* Smooth easing function */
        position: absolute;
        left: 0; /* Changed from right:0 to left:0 */
    }

    .segment-active {
        width: 100%;
    }

    .segment-completed {
        width: 100%;
        background: var(--success-color);
    }

    .step-circle {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #e9ecef;
        color: #adb5bd;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        margin-bottom: 0.5rem;
        border: 3px solid white;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        transition: all 0.5s ease;
        position: relative;
        z-index: 2;
    }

    .step-item.active .step-circle {
        background-color: var(--primary-color);
        color: white;
        transform: scale(1.1);
    }

    .step-item.completed .step-circle {
        background-color: var(--success-color);
        color: white;
    }

    .step-label {
        font-size: 0.9rem;
        font-weight: 500;
        color: #adb5bd;
        text-align: center;
        max-width: 100px;
        transition: all 0.3s ease;
    }

    .step-item.active .step-label {
        color: var(--primary-color);
        font-weight: 600;
    }

    .step-item.completed .step-label {
        color: var(--success-color);
    }

    /* Connector lines between steps */
    .step-item:not(:last-child)::after {
        content: '';
        position: absolute;
        top: 15px;
        left: calc(50% + 20px); /* Adjust based on circle size */
        right: calc(-50% + 20px); /* Adjust based on circle size */
        height: 6px;
        background-color: #e9ecef;
        z-index: 1;
    }

    .step-item.completed:not(:last-child)::after {
        background-color: var(--success-color);
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .step-label {
            font-size: 0.8rem;
        }

        .step-circle {
            width: 35px;
            height: 35px;
        }
    }

    @@media (max-width: 576px) {
        .progress-tracker {
            padding: 0 10px;
        }

        .step-label {
            font-size: 0.7rem;
            max-width: 80px;
        }

        .step-circle {
            width: 30px;
            height: 30px;
            font-size: 0.9rem;
        }
    }

    .form-card {
        border: none;
        margin-bottom: 2.5rem;
        overflow: hidden;
        transition: all 0.3s ease;
    }


    .form-card-header {
        padding: 1.5rem;
        border-radius: 12px 12px 0 0;
    }

    .form-card-header h4 {
        margin: 0;
        font-weight: 600;
    }

    .form-card-body {
        padding: 2rem;
    }

    .form-label {
        font-weight: 600;
        color: #495057;
        margin-bottom: 0.5rem;
        display: block;
        font-size: 0.95rem;
    }

    .form-control, .form-select {
        border-radius: 8px;
        padding: 0.75rem 1rem;
        border: 2px solid #e9ecef;
        width: 100%;
        font-size: 1rem;
        transition: all 0.3s;
    }

    .form-control:focus, .form-select:focus {
        border-color: var(--primary-color);
        outline: none;
    }

    .form-select {
        appearance: none;
        background-position: right 0.75rem center;

    }

    .validation-message {
        color: var(--danger-color);
        font-size: 0.85rem;
        margin-top: 0.5rem;
        font-weight: 500;
    }

    .btn {
        padding: 0.75rem 1.75rem;
        border-radius: 8px;
        font-weight: 600;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s;
        border: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .btn i {
        margin-right: 8px;
    }

    .btn-primary {
        background-color: var(--primary-color);
        color: white;
    }

    .btn-primary:hover {
        background-color: var(--secondary-color);
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(67, 97, 238, 0.3);
    }

    .btn-secondary {
        background-color: #e9ecef;
        color: #495057;
    }

    .btn-secondary:hover {
        background-color: #dee2e6;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(108, 117, 125, 0.1);
    }

    .btn-success {
        background-color: var(--success-color);
        color: white;
    }

    .btn-success:hover {
        background-color: #3aa8d8;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(76, 201, 240, 0.3);
    }

    .logo-preview {
        max-width: 200px;
        max-height: 200px;
        border-radius: 8px;
        border: 2px solid #e9ecef;
        margin-top: 1rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    }

    .review-section {
        margin-bottom: 2.5rem;
    }

    .review-section h5 {
        color: var(--dark-color);
        margin-bottom: 1.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #e9ecef;
    }

    .review-card {
        border: none;
        border-radius: 12px;
        background: white;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        overflow: hidden;
    }

    .review-card-body {
        padding: 1.5rem;
    }

    .required-field::after {
        content: " *";
        color: var(--danger-color);
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
        padding: 1rem;
        margin-bottom: 1.5rem;
        border-radius: 8px;
        border-left: 4px solid var(--danger-color);
    }

    .validation-summary {
        margin-bottom: 2rem;
    }

    .receipt-settings {
        margin-top: 2rem;
        border-top: 2px dashed #e9ecef;
        padding-top: 2rem;
    }

    .receipt-settings h5 {
        color: var(--dark-color);
        margin-bottom: 1.5rem;
    }

    .barcode-preview {
        max-width: 200px;
        height: 80px;
        margin-top: 10px;
        border: 2px solid #e9ecef;
        padding: 10px;
        background: white;
        border-radius: 8px;
    }

    .password-strength {
        margin-top: 0.5rem;
        font-size: 0.85rem;
        font-weight: 600;
    }

    .strength-weak {
        color: var(--danger-color);
    }

    .strength-medium {
        color: var(--warning-color);
    }

    .strength-strong {
        color: var(--success-color);
    }

    .form-check {
        margin-bottom: 0.5rem;
    }

    .form-check-input {
        width: 1.2em;
        height: 1.2em;
        margin-top: 0.15em;
        margin-right: 0.5em;
    }

    .form-check-label {
        font-weight: 500;
    }

    .navigation-buttons {
        display: flex;
        justify-content: space-between;
        margin-top: 2rem;
    }

    .badge {
        padding: 0.35em 0.65em;
        font-size: 0.75em;
        font-weight: 600;
        border-radius: 50rem;
    }

    .bg-info {
        background-color: var(--accent-color) !important;
    }

    /* Print receipt specific styles */
    @@media print {
        body * {
            visibility: hidden;
        }

        .print-receipt, .print-receipt * {
            visibility: visible;
        }

        .print-receipt {
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
        }

        .no-print {
            display: none !important;
        }
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .registration-container {
            margin: 1rem;
            padding: 1.5rem;
        }

        .form-card-body {
            padding: 1.5rem;
        }

        .step {
            font-size: 0.8rem;
            padding: 0 5px;
        }

        .step::before {
            width: 16px;
            height: 16px;
        }

        .navigation-buttons {
            flex-direction: column;
            gap: 1rem;
        }

        .btn {
            width: 100%;
        }
    }

    @@media (max-width: 576px) {
        .registration-container {
            margin: 0.5rem;
            padding: 1rem;
            border-radius: 0;
        }

        .form-card-header {
            padding: 1rem;
        }

        .form-card-body {
            padding: 1rem;
        }

        .step-indicator {
            flex-wrap: wrap;
            justify-content: center;
            gap: 1rem;
        }

        .step {
            flex: 0 0 calc(50% - 1rem);
            text-align: center;
        }

        .step-indicator::before {
            display: none;
        }
    }

    /* Animation for form steps */
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .form-card {
        animation: fadeIn 0.5s ease-out;
    }

    /* Custom radio and checkbox styling */
    .form-check-input:checked {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
    }

    .form-check-input:focus {
        box-shadow: 0 0 0 0.25rem rgba(67, 97, 238, 0.25);
    }

    /* Custom file upload button */
    .input-file-container {
        position: relative;
        overflow: hidden;
        display: inline-block;
        width: 100%;
    }

    .input-file-container input[type="file"] {
        position: absolute;
        left: 0;
        top: 0;
        opacity: 0;
        width: 100%;
        height: 100%;
        cursor: pointer;
    }

    .custom-file-button {
        display: block;
        padding: 0.75rem 1rem;
        background-color: #f8f9fa;
        border: 2px dashed #ced4da;
        border-radius: 8px;
        text-align: center;
        color: #495057;
        font-weight: 500;
        transition: all 0.3s;
    }

    .input-file-container:hover .custom-file-button {
        background-color: #e9ecef;
        border-color: #adb5bd;
    }

    /* Review section styling */
    dl.row {
        margin: 0;
    }

    dt.col-sm-3 {
        font-weight: 600;
        color: #495057;
        padding: 0.75rem 0;
    }

    dd.col-sm-9 {
        padding: 0.75rem 0;
        color: #212529;
    }

    /* Receipt preview styling */
    .print-receipt {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
    }

    /* Additional spacing for better visual hierarchy */
    .mb-4 {
        margin-bottom: 1.5rem !important;
    }

    .mt-3 {
        margin-top: 1rem !important;
    }

    .mt-4 {
        margin-top: 1.5rem !important;
    }

    /* Custom scrollbar for the page */
    ::-webkit-scrollbar {
        width: 8px;
    }

    ::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    ::-webkit-scrollbar-thumb {
        background: var(--primary-color);
        border-radius: 4px;
    }

    ::-webkit-scrollbar-thumb:hover {
        background: var(--secondary-color);
    }
</style>

<div class="registration-container">

  <div class="progress-tracker">
    <!-- Step Indicators with integrated progress bar -->
    <div class="step-container">
        <div class="step-item @GetStepClass(1)">
            <div class="step-progress">
                <div class="progress-segment @GetSegmentClass(1)"></div>
            </div>
            <div class="step-circle">1</div>
            <div class="step-label">General Information</div>
        </div>
        
        <div class="step-item @GetStepClass(2)">
            <div class="step-progress">
                <div class="progress-segment @GetSegmentClass(2)"></div>
            </div>
            <div class="step-circle">2</div>
            <div class="step-label">Business Details</div>
        </div>
        
        <div class="step-item @GetStepClass(3)">
            <div class="step-progress">
                <div class="progress-segment @GetSegmentClass(3)"></div>
            </div>
            <div class="step-circle">3</div>
            <div class="step-label">Review & Submit</div>
        </div>
    </div>
</div>

    @if (currentStep == 1)
    {
        <!-- Step 1: General Information -->
        <div class="form-card">
            <div class="form-card-header">
                <h4 class="mb-0">General Information</h4>
            </div>
            <div class="form-card-body">
                <EditForm Model="@generalInfo" OnValidSubmit="HandleStep1Submit" FormName="step1">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger validation-summary" />

                    <div class="row">
                        <div class="col-md-6 mb-4">
                            <label class="form-label required-field">First Name</label>
                            <InputText @bind-Value="generalInfo.FirstName" class="form-control" />
                            <ValidationMessage For="@(() => generalInfo.FirstName)" class="validation-message" />
                        </div>
                        <div class="col-md-6 mb-4">
                            <label class="form-label required-field">Last Name</label>
                            <InputText @bind-Value="generalInfo.LastName" class="form-control" />
                            <ValidationMessage For="@(() => generalInfo.LastName)" class="validation-message" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-4">
                            <label class="form-label required-field">Gender</label>
                            <InputSelect @bind-Value="generalInfo.Gender" class="form-select">
                                <option value="">Select Gender</option>
                                <option value="Male">Male</option>
                                <option value="Female">Female</option>
                                <option value="Other">Other</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => generalInfo.Gender)" class="validation-message" />
                        </div>
                       
                    </div>

                    <div class="mb-4">
                        <label class="form-label required-field">Email Address</label>
                        <InputText @bind-Value="generalInfo.Email" class="form-control" />
                        <ValidationMessage For="@(() => generalInfo.Email)" class="validation-message" />
                    </div>

                    <div class="row">
                       
                        <div class="col-md-6 mb-4">
                            <label class="form-label required-field">Time Zone</label>
                            <InputSelect @bind-Value="generalInfo.TimeZone" class="form-select">
                                <option value="IST - Indian Standard Time - GMT +5:30">IST - Indian Standard Time - GMT +5:30</option>
                                <option value="GMT - Greenwich Mean Time">GMT - Greenwich Mean Time</option>
                                <option value="EST - Eastern Standard Time - GMT -5:00">EST - Eastern Standard Time - GMT -5:00</option>
                            </InputSelect>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-4">
                            <label class="form-label required-field">Date of Birth</label>
                            <InputDate @bind-Value="generalInfo.DateOfBirth" class="form-control" />
                            <ValidationMessage For="@(() => generalInfo.DateOfBirth)" class="validation-message" />
                        </div>
                        <div class="col-md-6 mb-4">
                            <label class="form-label required-field">Country</label>
                            <InputSelect @bind-Value="generalInfo.Country" class="form-select">
                                <option value="">Select Country</option>
                                <option value="India">India</option>
                                <option value="USA">USA</option>
                                <option value="UK">UK</option>
                                <option value="Canada">Canada</option>
                                <option value="Australia">Australia</option>
                                <option value="Pakistan">Pakistan</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => generalInfo.Country)" class="validation-message" />
                        </div>
                    </div>

                    <div class="mb-4">
                        <label class="form-label required-field">Phone Number (include country code)</label>
                        <InputText @bind-Value="generalInfo.PhoneNumber" class="form-control" />
                        <ValidationMessage For="@(() => generalInfo.PhoneNumber)" class="validation-message" />
                    </div>

                    <div class="d-flex justify-content-end">
                        <button type="submit" class="btn btn-primary">
                            Next: Business Details
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
    else if (currentStep == 2)
    {
        <!-- Step 2: Business Details -->
        <div class="form-card">
            <div class="form-card-header">
                <h4 class="mb-0">Business Details</h4>
            </div>
            <div class="form-card-body">
                <EditForm Model="@businessDetails" OnValidSubmit="HandleStep2Submit" FormName="step2">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger validation-summary" />

                    <div class="mb-4">
                        <label class="form-label required-field">Business Title</label>
                        <InputText @bind-Value="businessDetails.BusinessName" class="form-control" />
                        <ValidationMessage For="@(() => businessDetails.BusinessName)" class="validation-message" />
                    </div>

                    <div class="mb-4">
                        <label class="form-label required-field">Logo</label>
                        <div class="input-file-container">
                            <InputFile class="form-control" OnChange="HandleFileUpload" accept="image/*" />
                            <span class="custom-file-button">Choose File</span>
                        </div>
                        @if (logoPreviewUrl != null)
                        {
                            <div class="mt-3">
                                <img src="@logoPreviewUrl" alt="Logo Preview" class="logo-preview" />
                            </div>
                        }
                        <ValidationMessage For="@(() => businessDetails.LogoData)" class="validation-message" />
                    </div>

                    <div class="mb-4">
                        <label class="form-label required-field">Business Type</label>
                        <InputSelect @bind-Value="businessDetails.BusinessType" class="form-select">
                            <option value="">Select Business Type</option>
                            <option value="Café">Café</option>
                            <option value="Restaurant">Restaurant</option>
                            <option value="Retail Store">Retail Store</option>
                            <option value="Service Provider">Service Provider</option>
                            <option value="Other">Other</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => businessDetails.BusinessType)" class="validation-message" />
                    </div>

                    <div class="mb-4">
                        <label class="form-label required-field">Address</label>
                        <InputText @bind-Value="businessDetails.Address" class="form-control" />
                        <ValidationMessage For="@(() => businessDetails.Address)" class="validation-message" />
                    </div>

                    <div class="row">
                        <div class="col-md-4 mb-4">
                            <label class="form-label required-field">City</label>
                            <InputText @bind-Value="businessDetails.City" class="form-control" />
                            <ValidationMessage For="@(() => businessDetails.City)" class="validation-message" />
                        </div>
                        <div class="col-md-4 mb-4">
                            <label class="form-label required-field">Area</label>
                            <InputText @bind-Value="businessDetails.Area" class="form-control" />
                            <ValidationMessage For="@(() => businessDetails.Area)" class="validation-message" />
                        </div>
                        <div class="col-md-4 mb-4">
                            <label class="form-label">Location</label>
                            <InputText @bind-Value="businessDetails.Location" class="form-control" />
                        </div>
                    </div>

                    <!-- New Password Fields -->
                    <div class="row">
                        <div class="col-md-6 mb-4">
                            <label class="form-label required-field">Password</label>
                            <InputText type="password" @bind-Value="businessDetails.Password" class="form-control" />
                            <ValidationMessage For="@(() => businessDetails.Password)" class="validation-message" />
                            @if (!string.IsNullOrEmpty(businessDetails.Password))
                            {
                                <div class="password-strength @GetPasswordStrengthClass(businessDetails.Password)">
                                    Password strength: @GetPasswordStrength(businessDetails.Password)
                                </div>
                            }
                        </div>
                        <div class="col-md-6 mb-4">
                            <label class="form-label required-field">Confirm Password</label>
                            <InputText type="password" @bind-Value="businessDetails.ConfirmPassword" class="form-control" />
                            <ValidationMessage For="@(() => businessDetails.ConfirmPassword)" class="validation-message" />
                            @if (!string.IsNullOrEmpty(businessDetails.ConfirmPassword) &&
                           businessDetails.Password != businessDetails.ConfirmPassword)
                            {
                                <div class="validation-message">Passwords do not match</div>
                            }
                        </div>
                    </div>

                    <div class="mb-4">
                        <label class="form-label">Additional Options</label>
                        <div class="form-check mb-2">
                            <InputCheckbox @bind-Value="businessDetails.HasWiFi" class="form-check-input" />
                            <label class="form-check-label">WiFi Available</label>
                        </div>
                        <div class="form-check">
                            <InputCheckbox @bind-Value="businessDetails.HasOutdoorSeating" class="form-check-input" />
                            <label class="form-check-label">Outdoor Seating</label>
                        </div>
                    </div>

                    <!-- Receipt Settings Section -->
                    <div class="receipt-settings">
                        <h5>Receipt Settings</h5>

                        <div class="mb-4">
                            <label class="form-label">Receipt Header Text</label>
                            <InputTextArea @bind-Value="businessDetails.ReceiptHeader" class="form-control" rows="3"
                                           placeholder="Enter your business name, address, contact info etc." />
                        </div>

                        <div class="mb-4">
                            <label class="form-label">Receipt Footer Text</label>
                            <InputTextArea @bind-Value="businessDetails.ReceiptFooter" class="form-control" rows="3"
                                           placeholder="Enter return policy, thank you message etc." />
                        </div>

                        <div class="mb-4">
                            <label class="form-label">Tax Identification Number</label>
                            <InputText @bind-Value="businessDetails.TaxNumber" class="form-control" />
                        </div> 


                        <div class="mb-4">
                            <label class="form-label">Default Tax Rate (%)</label>
                            <InputNumber @bind-Value="businessDetails.DefaultTaxRate" class="form-control" />
                        </div>

                        <div class="mb-4">
                            <label class="form-label">Enable Barcode on Receipt</label>
                            <InputCheckbox @bind-Value="businessDetails.IncludeBarcode" class="form-check-input" />
                            @if (businessDetails.IncludeBarcode)
                            {
                                <div class="mt-2">
                                    <label class="form-label">Barcode Preview</label>
                                    <div class="barcode-preview">
                                        <svg id="barcodePreview"></svg>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="navigation-buttons">
                        <button type="button" class="btn btn-secondary" @onclick="HandleBack">Back</button>
                        <button type="submit" class="btn btn-primary">Next: Review & Submit</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
    else if (currentStep == 3)
    {
        <!-- Step 3: Overview -->
        <div class="form-card">
            <div class="form-card-header">
                <h4 class="mb-0">Review Your Information</h4>
            </div>
            <div class="form-card-body">
                <div class="review-section">
                    <h5 class="mb-3">General Information</h5>
                    <div class="review-card">
                        <div class="review-card-body">
                            <dl class="row">
                                <dt class="col-sm-3">Name</dt>
                                <dd class="col-sm-9">@generalInfo.FirstName @generalInfo.LastName</dd>

                                <dt class="col-sm-3">Gender</dt>
                                <dd class="col-sm-9">@generalInfo.Gender</dd>

                                <dt class="col-sm-3">Email</dt>
                                <dd class="col-sm-9">@generalInfo.Email</dd>

                                <dt class="col-sm-3">Phone</dt>
                                <dd class="col-sm-9">@generalInfo.PhoneNumber</dd>

                                <dt class="col-sm-3">Date of Birth</dt>
                                <dd class="col-sm-9">@generalInfo.DateOfBirth?.ToString("dd/MM/yyyy")</dd>

                                <dt class="col-sm-3">Country</dt>
                                <dd class="col-sm-9">@generalInfo.Country</dd>

                                <dt class="col-sm-3">Time Zone</dt>
                                <dd class="col-sm-9">@generalInfo.TimeZone</dd>
                            </dl>
                        </div>
                    </div>
                </div>

                <div class="review-section">
                    <h5 class="mb-3">Business Information</h5>
                    <div class="review-card">
                        <div class="review-card-body">
                            <dl class="row">
                                <dt class="col-sm-3">Business Name</dt>
                                <dd class="col-sm-9">@businessDetails.BusinessName</dd>

                                <dt class="col-sm-3">Business Type</dt>
                                <dd class="col-sm-9">@businessDetails.BusinessType</dd>

                                <dt class="col-sm-3">Address</dt>
                                <dd class="col-sm-9">@businessDetails.Address</dd>

                                <dt class="col-sm-3">City/Area</dt>
                                <dd class="col-sm-9">@businessDetails.City, @businessDetails.Area</dd>

                                <dt class="col-sm-3">Location</dt>
                                <dd class="col-sm-9">@businessDetails.Location</dd>

                                <dt class="col-sm-3">Password</dt>
                                <dd class="col-sm-9">••••••••</dd>

                                <dt class="col-sm-3">Amenities</dt>
                                <dd class="col-sm-9">
                                    @if (businessDetails.HasWiFi)
                                    {
                                        <span class="badge bg-info me-1">WiFi</span>
                                    }
                                    @if (businessDetails.HasOutdoorSeating)
                                    {
                                        <span class="badge bg-info">Outdoor Seating</span>
                                    }
                                </dd>

                                @if (logoPreviewUrl != null)
                                {
                                    <dt class="col-sm-3">Logo</dt>
                                    <dd class="col-sm-9">
                                        <img src="@logoPreviewUrl" alt="Logo Preview" class="logo-preview" />
                                    </dd>
                                }
                            </dl>
                        </div>
                    </div>
                    @if (!hasEditedBusinessDetails)
                    {
                        <button class="btn btn-outline-primary mt-3" @onclick="() => HandleEdit(2)">
                            Edit Business Details
                        </button>
                    }
                </div>

                <!-- Receipt Preview Section -->
                <div class="review-section">
                    <h5 class="mb-3">Receipt Preview</h5>
                    <div class="review-card print-receipt">
                        <div class="review-card-body">
                            <!-- Receipt Header -->
                            @if (!string.IsNullOrEmpty(businessDetails.ReceiptHeader))
                            {
                                <div class="text-center mb-3">
                                    @((MarkupString)businessDetails.ReceiptHeader.Replace("\n", "<br/>"))
                                </div>
                                <hr />
                            }


                            <!-- Barcode -->
                            @if (businessDetails.IncludeBarcode)
                            {
                                <div class="text-center mt-3">
                                    <svg id="receiptBarcode"></svg>
                                </div>
                            }

                            <!-- Receipt Footer -->
                            @if (!string.IsNullOrEmpty(businessDetails.ReceiptFooter))
                            {
                                <hr />
                                <div class="text-center mt-3 small">
                                    @((MarkupString)businessDetails.ReceiptFooter.Replace("\n", "<br/>"))
                                </div>
                            }
                        </div>
                    </div>


                </div>

                <div class="navigation-buttons mt-4">
                    <button type="button" class="btn btn-secondary" @onclick="HandleBack">Back</button>
                    <button type="button" class="btn btn-success" @onclick="HandleSubmit">
                        Submit Registration
                    </button>
                </div>
            </div>
        </div>
    }
</div>


@code {
    private int currentStep = 1;
    private bool hasEditedBusinessDetails = false;
    private GeneralInformation generalInfo = new();
    private BusinessDetails businessDetails = new();
    private string? logoPreviewUrl;
    private IBrowserFile? logoFile;
    private bool isInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isInitialized = true;
            if (businessDetails.IncludeBarcode)
            {
                await GenerateBarcodePreview();
            }
        }

        // Always regenerate barcode when step changes to 3
        if (currentStep == 3 && isInitialized)
        {
            await Task.Delay(100); // Small delay to ensure elements are rendered
            if (businessDetails.IncludeBarcode)
            {
                await JS.InvokeVoidAsync("generateBarcode", "receiptBarcode", "RECEIPT" + DateTime.Now.ToString("yyyyMMddHHmmss"));
            }
        }
    }

    private string GetPasswordStrength(string password)
    {
        if (password.Length < 6) return "Weak";
        if (password.Length < 10) return "Medium";
        return "Strong";
    }

    private string GetPasswordStrengthClass(string password)
    {
        if (password.Length < 6) return "strength-weak";
        if (password.Length < 10) return "strength-medium";
        return "strength-strong";
    }

    private async Task GenerateBarcodePreview()
    {
        try
        {
            // Wait for the element to be rendered
            await Task.Delay(100);

            // Generate a sample barcode for preview
            await JS.InvokeVoidAsync("generateBarcode", "barcodePreview", "PREVIEW12345");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating barcode: {ex.Message}");
        }
    }


    private string GetStepClass(int step)
    {
        if (currentStep == step) return "active";
        if (currentStep > step) return "completed";
        return "";
    }
    private string GetSegmentClass(int segment)
    {
        if (currentStep == segment) return "segment-active";
        if (currentStep > segment) return "segment-completed";
        return "";
    }

    private void HandleEdit(int step)
    {
        currentStep = step;
        if (step == 2)
        {
            hasEditedBusinessDetails = true;
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        logoFile = e.File;
        if (logoFile != null)
        {
            try
            {
                var format = "image/png";
                var resizedImage = await logoFile.RequestImageFileAsync(format, 500, 500);
                var buffer = new byte[resizedImage.Size];
                await resizedImage.OpenReadStream().ReadAsync(buffer);
                businessDetails.LogoData = buffer;
                businessDetails.LogoPath = logoFile.Name;
                logoPreviewUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Error uploading image: {ex.Message}");
            }
        }
    }

    private async Task PrintReceipt()
    {
        try
        {
            // Ensure barcode is generated before printing
            if (businessDetails.IncludeBarcode)
            {
                await JS.InvokeVoidAsync("generateBarcode", "receiptBarcode", "RECEIPT" + DateTime.Now.ToString("yyyyMMddHHmmss"));
                await Task.Delay(200); // Small delay to ensure barcode is rendered
            }

            await JS.InvokeVoidAsync("printReceipt");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error printing receipt: {ex.Message}");
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            // Validate passwords match
            if (businessDetails.Password != businessDetails.ConfirmPassword)
            {
                await JS.InvokeVoidAsync("alert", "Passwords do not match");
                currentStep = 2;
                StateHasChanged();
                return;
            }

            // Validate password strength
            if (businessDetails.Password.Length < 6)
            {
                await JS.InvokeVoidAsync("alert", "Password must be at least 6 characters long");
                currentStep = 2;
                StateHasChanged();
                return;
            }

            // Combine data from both models
            var business = new BusinessModel
                {
                    GeneralInformation = generalInfo,
                    BusinessDetails = businessDetails,
                    IsActive = true,
                    Email = generalInfo.Email,
                    PasswordHash = PasswordHasher.HashPassword(businessDetails.Password)
                };

            var success = await AdminService.AddBusiness(business);

            if (success)
            {
                StateContainer.CurrentBusiness = business;
                StateHasChanged();
                 await Task.Delay(100);
                await JS.InvokeVoidAsync("alert", "Business registered successfully!");
                Navigation.NavigateTo("/login");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Failed to register business. Please try again.");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
        }
    }


    private string HashPassword(string password)
    {
        // Implement proper password hashing (e.g., using BCrypt)
        // Example: return BCrypt.Net.BCrypt.HashPassword(password);
        return password; // In production, use proper hashing!
    }

    private async Task HandleStep1Submit()
    {
        currentStep = 2;
        await Task.Delay(1); // Allow UI to update
        StateHasChanged();
    }

    private async Task HandleStep2Submit()
    {
        currentStep = 3;
        await Task.Delay(1); // Allow UI to update
        StateHasChanged();
    }

    private void HandleBack()
    {
        if (currentStep > 1)
        {
            currentStep--;
            StateHasChanged();
        }
    }
}