@page "/order-history"
@using System.Globalization
@inject ITransactionService TransactionService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@implements IDisposable
@rendermode InteractiveServer

<div class="container mt-3" style="max-width: 1400px;">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 style="color: #6c5ce7; font-weight: 600;">Order History</h3>
        <div>
            <div class="input-group">
                <input type="month" class="form-control rounded-start" @bind="selectedMonth" style="border-color: #6c5ce7;" />
                <input type="date" class="form-control" @bind="selectedDate" style="border-color: #6c5ce7;" />
                <button class="btn" @onclick="FilterTransactions" style="background-color: #6c5ce7; color: white;">
                    <i class="fas fa-filter"></i> Filter
                </button>
                <button class="btn" @onclick="DownloadBills" style="background-color: #6c5ce7; color: white;">
                    <i class="fas fa-download"></i> Download
                </button>
                <button class="btn" @onclick="PrintBills" style="background-color: #6c5ce7; color: white;">
                    <i class="fas fa-print"></i> Print
                </button>
            </div>
        </div>
    </div>

    <div class="mb-4">
        <div class="input-group" style="max-width: 400px;">
            <span class="input-group-text" style="background-color: #6c5ce7; color: white;">
                <i class="fas fa-search"></i>
            </span>
            <input type="text" class="form-control" placeholder="Search orders..."
                   @bind="searchText" @bind:event="oninput" style="border-color: #6c5ce7;" />
        </div>
    </div>

    <div class="table-responsive rounded" style="box-shadow: 0 4px 12px rgba(108, 92, 231, 0.15);">
        <table class="table table-hover mb-0">
            <thead style="background-color: #6c5ce7; color: white;">
                <tr>
                    <th style="padding: 12px 16px;">Date</th>
                    <th style="padding: 12px 16px;">Items</th>
                    <th class="text-end" style="padding: 12px 16px;">Subtotal</th>
                    <th class="text-end" style="padding: 12px 16px;">Discount</th>
                    <th class="text-end" style="padding: 12px 16px;">Tax</th>
                    <th class="text-end" style="padding: 12px 16px;">Total</th>
                    <th class="text-end" style="padding: 12px 16px;">Payment</th>
                </tr>
            </thead>
            <tbody>
                @if (transactions == null)
                {
                    <tr>
                        <td colspan="7" class="text-center py-4">Loading transactions...</td>
                    </tr>
                }
                else if (!filteredTransactions.Any())
                {
                    <tr>
                        <td colspan="7" class="text-center py-4">No orders found</td>
                    </tr>
                }
                else
                {
                    @foreach (var transaction in filteredTransactions)
                    {
                        <tr @onclick="() => ShowTransactionDetails(transaction)"
                            style="cursor: pointer; transition: background-color 0.2s;"
                            class="hover-row">
                            <td style="padding: 12px 16px;">@transaction.TransactionDate.ToString("g")</td>
                            <td style="padding: 12px 16px;">@transaction.Items.Sum(i => i.Quantity)</td>
                            <td class="text-end" style="padding: 12px 16px;">@transaction.SubTotal.ToString("C")</td>
                            <td class="text-end" style="padding: 12px 16px;">
                                @if (!transaction.Items.Any(i => i.IsRateListItem))
                                {
                                    @transaction.Discount.ToString("C")
                                }
                                else
                                {
                                    <span>N/A</span>
                                }
                            </td>
                            <td class="text-end" style="padding: 12px 16px;">@transaction.Tax.ToString("C")</td>
                            <td class="text-end" style="padding: 12px 16px;">@transaction.Total.ToString("C")</td>
                            <td class="text-end" style="padding: 12px 16px;">@transaction.PaymentMethod</td>
                          
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<style>
    .hover-row:hover {
        background-color: rgba(108, 92, 231, 0.1) !important;
    }

    .btn {
        transition: all 0.2s;
    }

        .btn:hover {
            opacity: 0.9;
            transform: translateY(-1px);
        }

    .form-control:focus {
        border-color: #6c5ce7;
        box-shadow: 0 0 0 0.25rem rgba(108, 92, 231, 0.25);
    }

    .table {
        border-collapse: separate;
        border-spacing: 0;
    }

        .table thead th:first-child {
            border-top-left-radius: 8px;
        }

        .table thead th:last-child {
            border-top-right-radius: 8px;
        }
</style>

@code {
    private List<BusinessTransaction> transactions = new();
    private string searchText = string.Empty;
    private BusinessTransaction? selectedTransaction;
    private DateTime? selectedDate;
    private DateTime? selectedMonth;

    private IEnumerable<BusinessTransaction> filteredTransactions => transactions?
        .Where(t => string.IsNullOrEmpty(searchText) ||
                   t.Id.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                   (t.CustomerName != null && t.CustomerName.Contains(searchText, StringComparison.OrdinalIgnoreCase)) ||
                   t.Items.Any(i => i.ProductName.Contains(searchText, StringComparison.OrdinalIgnoreCase)))
        .OrderByDescending(t => t.TransactionDate) ?? Enumerable.Empty<BusinessTransaction>();

    protected override async Task OnInitializedAsync()
    {
        await LoadTransactions();
    }

    private async Task LoadTransactions()
    {
        DateTime? startDate = selectedMonth?.Date;
        DateTime? endDate = selectedMonth?.AddMonths(1).AddDays(-1);

        if (selectedDate.HasValue)
        {
            startDate = selectedDate.Value.Date;
            endDate = selectedDate.Value.Date.AddDays(1).AddTicks(-1);
        }

        transactions = await TransactionService.GetTransactionsByDateAsync(startDate, endDate);
    }

    private async Task FilterTransactions()
    {
        await LoadTransactions();
    }

    private void ShowTransactionDetails(BusinessTransaction transaction)
    {
        selectedTransaction = transaction;
    }

    private void CloseModal()
    {
        selectedTransaction = null;
    }

    private async Task PrintReceipt(BusinessTransaction transaction)
    {
        try
        {
            await JS.InvokeVoidAsync("printReceipt", transaction.Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error printing receipt: {ex.Message}");
        }
    }

    private async Task DownloadBills()
    {
        try
        {
            var csvContent = "Bill ID,Customer,Date,Items,Subtotal,Discount,Total\n";
            foreach (var t in filteredTransactions)
            {
                var discountValue = t.Items.Any(i => i.IsRateListItem) ? "N/A" : t.Discount.ToString();

                csvContent += $"{t.Id},\"{t.CustomerName ?? "Walk-in"}\"," +
                            $"{t.TransactionDate:dd-MM-yyyy HH:mm}," +
                            $"{t.Items.Sum(i => i.Quantity)}," +
                            $"{t.SubTotal}," +
                            $"{discountValue}," +
                            $"{t.Total}\n";
            }

            var timestamp = DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss");
            var fileName = $"Bills_{timestamp}.csv";
            await JS.InvokeVoidAsync("downloadCSV", csvContent, fileName);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading bills: {ex.Message}");
        }
    }

    private async Task PrintBills()
    {
        try
        {
            await JS.InvokeVoidAsync("printBillsList");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error printing bills: {ex.Message}");
        }
    }

    public void Dispose()
    {
        // Cleanup if needed
    }
}

<script>
    window.downloadCSV = (content, filename) => {
        const blob = new Blob([content], { type: "text/csv;charset=utf-8;" });
        const link = document.createElement("a");

        const now = new Date();
        const timeStr = now.toLocaleString(); // Include time in local format

        const fileWithTime = filename.replace(".csv", `_${timeStr.replace(/[^\d]/g, "")}.csv`);

        link.setAttribute("href", URL.createObjectURL(blob));
        link.setAttribute("download", fileWithTime);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    window.printBillsList = () => {
        const printContent = document.querySelector(".table-responsive").innerHTML;
        const printWindow = window.open('', '', 'width=900,height=700');
        const now = new Date().toLocaleString();

        printWindow.document.write(`
            <html>
                <head>
                    <title>Order History - ${now}</title>
                    <style>
                        body { font-family: Arial, sans-serif; }
                        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                        th { background-color: #6c5ce7; color: white; padding: 10px; text-align: left; }
                        td { padding: 8px; border-bottom: 1px solid #ddd; }
                        h2 { color: #6c5ce7; }
                        .text-end { text-align: right; }
                    </style>
                </head>
                <body>
                    <h2>Order History</h2>
                    <p>Printed on: ${now}</p>
                    ${printContent}
                </body>
            </html>
        `);
        printWindow.document.close();
        printWindow.focus();
        printWindow.print();
        printWindow.close();
    };
</script>