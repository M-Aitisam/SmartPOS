@page "/menu"
@using ClassLibraryEntities
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject BillService BillService
@rendermode InteractiveServer

<div class="container mt-4">
    <div class="card shadow-sm">
        <Sidebar />
        <div class="card-body">
            <h3 class="card-title text-primary mb-4">Weekly Menu Management</h3>

            <div class="d-flex mb-4 overflow-auto">
                @foreach (var day in daysOfWeek)
                {
                    <button class="btn @(selectedDay == day ? "btn-primary" : "btn-outline-primary") mx-1"
                            @onclick="() => SelectDay(day)">
                        @day
                    </button>
                }
            </div>

            @if (!string.IsNullOrEmpty(selectedDay))
            {
                <div class="row g-3">
                    <div class="col-md-6">
                        <label class="form-label">Select Category</label>
                        <select class="form-select" @bind="selectedCategoryId">
                            <option value="0">-- Select Category --</option>
                            @foreach (var category in businessCategories)
                            {
                                <option value="@category.CategoryID">
                                    @category.CategoryName -
                                    <span style="direction: rtl; unicode-bidi: bidi-override;">
                                        @category.UrduName
                                    </span>
                                </option>
                            }
                        </select>
                    </div>
                </div>

                @if (selectedCategoryId > 0)
                {
                    <div class="mt-4">
                        <h5 class="text-primary mb-3">Products in Category</h5>

                        @if (FilteredProducts.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Active</th>
                                            <th>Product Name (English/Urdu)</th>
                                            <th>Price</th>
                                            <th>Image</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var product in FilteredProducts)
                                        {
                                            var isActiveForDay = IsProductActiveForDay(product.ProductID, selectedDay);
                                            <tr>
                                                <td>
                                                    <div class="form-check form-switch">
                                                        <input type="checkbox"
                                                               class="form-check-input"
                                                               checked="@(isActiveForDay || string.IsNullOrEmpty(product.ActiveDays))"
                                                               @onchange="async e => await ToggleProductForDay(product.ProductID, selectedDay, e.Value)" />
                                                    </div>
                                                </td>
                                                <td>
                                                    @product.ProductTitle
                                                    @if (!string.IsNullOrEmpty(product.ProductUrduName))
                                                    {
                                                        <text>/</text>
                                                        <span style="direction: rtl; unicode-bidi: bidi-override;">
                                                            @product.ProductUrduName
                                                        </span>
                                                    }
                                                    <button class="btn btn-sm btn-link" @onclick="async () => await AutoTranslateProduct(product)">
                                                        <i class="fas fa-language"></i>
                                                    </button>
                                                </td>
                                                <td>
                                                    @product.ProductPrice.ToString("C")
                                                </td>
                                                <td>
                                                    @if (!string.IsNullOrEmpty(product.ImageUrl))
                                                    {
                                                        <img src="@product.ImageUrl" alt="@product.ProductTitle" style="max-height: 50px;" />
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            <div class="mt-3 text-end">
                                <button class="btn btn-success" @onclick="SaveMenuForDay">
                                    <i class="bi bi-save"></i> Save Menu for @selectedDay
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">No products found in this category</div>
                        }
                    </div>
                }
            }
            else
            {
                <div class="alert alert-info">Please select a day to manage its menu</div>
            }
        </div>
    </div>
</div>

@code {
    private string selectedDay = "";
    private int selectedCategoryId = 0;
    private List<Product> ProductList { get; set; } = new();
    private List<BusinessCategory> businessCategories { get; set; } = new();
    private Product newProduct = new();

    private List<string> daysOfWeek = new()
    {
        "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"
    };

    private List<Product> FilteredProducts =>
        ProductList.Where(p => p.CategoryID == selectedCategoryId).ToList();

    protected override async Task OnInitializedAsync()
    {
        await LoadProductsFromDatabase();
        await LoadBusinessCategories();
    }

    private async Task LoadProductsFromDatabase()
    {
        try
        {
            ProductList = await ProductService.GetAllProductsAsync();
            // Initialize new products with all days active by default
            foreach (var product in ProductList.Where(p => string.IsNullOrEmpty(p.ActiveDays)))
            {
                product.ActiveDays = string.Join(",", daysOfWeek);
                product.IsActive = true;
                await ProductService.UpdateProductAsync(product);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
        }
    }

    private async Task LoadBusinessCategories()
    {
        try
        {
            businessCategories = await CategoryService.GetCategoriesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
        }
    }

    private void SelectDay(string day)
    {
        selectedDay = day;
        selectedCategoryId = 0;
    }

    private async Task ToggleProductForDay(int productId, string day, object isChecked)
    {
        if (bool.TryParse(isChecked?.ToString(), out var newValue))
        {
            var product = ProductList.FirstOrDefault(p => p.ProductID == productId);
            if (product != null)
            {
                var daysList = product.ActiveDays?.Split(',', StringSplitOptions.RemoveEmptyEntries).ToList() ?? new List<string>();

                if (newValue && !daysList.Contains(day))
                {
                    daysList.Add(day);
                }
                else if (!newValue && daysList.Contains(day))
                {
                    daysList.Remove(day);
                }

                product.ActiveDays = string.Join(",", daysList);
                product.IsActive = daysList.Count > 0;
                await ProductService.UpdateProductAsync(product);
            }
        }
        StateHasChanged();
    }

    private bool IsProductActiveForDay(int productId, string day)
    {
        var product = ProductList.FirstOrDefault(p => p.ProductID == productId);
        // Return true if ActiveDays is empty (new product) or contains the day
        return string.IsNullOrEmpty(product?.ActiveDays) || product?.ActiveDays?.Split(',').Contains(day) == true;
    }

    private async Task SaveMenuForDay()
    {
        try
        {
            // Update all products for the selected day
            foreach (var product in ProductList)
            {
                await ProductService.UpdateProductAsync(product);
            }

            // Update RateList with current selections
            await UpdateRateItems();

            // Show success message
            await JSRuntime.InvokeVoidAsync("alert", $"Menu for {selectedDay} saved successfully!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving menu: {ex.Message}");
        }
    }

    private async Task UpdateRateItems()
    {
        try
        {
            // Get all active products regardless of day
            var activeProducts = ProductList
                .Where(p => p.IsActive)
                .ToList();

            // Convert to RateItems with their ActiveDays
            var rateItems = activeProducts.Select(p => new RateItem
                {
                    Name = p.ProductTitle,
                    BasePrice = p.ProductPrice,
                    ImageUrl = p.ImageUrl,
                    IsActive = true,
                    Category = businessCategories.FirstOrDefault(c => c.CategoryID == p.CategoryID)?.CategoryName ?? "Uncategorized",
                    ActiveDays = p.ActiveDays // Include full ActiveDays information
                }).ToList();

            // Update BillService
            BillService.UpdateRateItems(rateItems);
            await BillService.NotifyStateChangedAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating rate items: {ex.Message}");
        }
    }

    private async Task AutoTranslateProduct(Product product)
    {
        try
        {
            var apiUrl = "https://libretranslate.de/translate";
            var request = new
            {
                q = product.ProductTitle,
                source = "en",
                target = "ur"
            };

            var response = await Http.PostAsJsonAsync(apiUrl, request);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<TranslationResult>();
                if (!string.IsNullOrEmpty(result?.translatedText))
                {
                    product.ProductUrduName = result.translatedText;
                    await ProductService.UpdateProductAsync(product);
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Translation error: {ex.Message}");
        }
    }

    private class TranslationResult
    {
        public string? translatedText { get; set; }
    }
}