@page "/categories"
@using ClassLibraryEntities
@using ClassLibraryDAL
@using ClassLibraryServices
@inject ICategoryService CategoryService
@inject StateContainerService StateContainer
@rendermode InteractiveServer

<style>
    /* Modal Animations */
   
    /* Category Card */
    .category-card {
        transition: all 0.2s ease;
        border-radius: 10px;
        border: 1px solid #e9ecef;
    }

        .category-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.08);
        }

    /* Floating Button */
    .fab {
        width: 56px;
        height: 56px;
        border-radius: 50%;
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        z-index: 1000;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        transition: all 0.2s ease;
    }

        .fab:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 16px rgba(0, 123, 255, 0.3);
        }

    .modern-modal {
        max-width: 500px;
        border-radius: 12px;
        box-shadow: 0 12px 28px rgba(0, 0, 0, 0.15);
    }

    .form-control-lg {
        padding: 0.75rem 1rem;
        font-size: 1.05rem;
    }
</style>

<!-- Floating Action Button -->
<button class="fab btn btn-primary d-flex align-items-center justify-content-center" @onclick="OpenAddModal">
    <i class="bi bi-plus fs-4"></i>
</button>

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold text-primary">Category Management</h2>
    </div>

    <!-- Category Grid -->
    <div class="row g-4">
        @if (categories == null)
        {
            <div class="col-12 text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (!categories.Any())
        {
            <div class="col-12">
                <div class="alert alert-info">
                    <i class="bi bi-info-circle me-2"></i> No categories found. Click the + button to add one.
                </div>
            </div>
        }
        else
        {
            @foreach (var category in categories)
            {
                <div class="col-md-4 col-sm-6">
                    <div class="category-card card h-100">
                        <div class="card-body d-flex flex-column">
                            <div class="d-flex justify-content-between">
                                <InputText @bind-Value="category.CategoryName"
                                           class="form-control border-0 fs-5 fw-bold p-0 bg-transparent" />
                                <button class="btn btn-sm btn-outline-danger"
                                        @onclick="() => ConfirmDeleteCategory(category.CategoryID)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Save Changes Button -->
    @if (categories?.Any() == true)
    {
        <div class="text-center mt-4">
            <button class="btn btn-success px-5 py-2" @onclick="SaveChanges">
                <i class="bi bi-save me-2"></i>Save All Changes
            </button>
        </div>
    }
</div>

<!-- Add Category Modal -->
@if (showAddModal)
{
    <div class="position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center fade-background"
         style="z-index: 1050; background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-enter modern-modal bg-white w-100" style="max-width: 500px;">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Add New Category</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseAddModal"></button>
                </div>
                <div class="modal-body p-4">
                    <EditForm Model="@newCategory" OnValidSubmit="SaveCategory">
                        <DataAnnotationsValidator />
                        <div class="mb-4">
                            <label class="form-label fw-semibold mb-3">Category Name</label>
                            <InputText @bind-Value="newCategory.CategoryName"
                                       class="form-control form-control-lg"
                                       placeholder="e.g. Electronics, Clothing" />
                            <ValidationMessage For="@(() => newCategory.CategoryName)"
                                               class="text-danger small mt-2" />
                        </div>
                        <div class="d-flex justify-content-end gap-3 pt-3">
                            <button type="button" class="btn btn-lg btn-outline-secondary px-4" @onclick="CloseAddModal">
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-lg btn-primary px-4">
                                <i class="bi bi-plus-circle me-2"></i>Add Category
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (confirmDeleteVisible)
{
    <div class="position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center fade-background"
         style="z-index: 1050; background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-enter modern-modal bg-white w-100" style="max-width: 500px;">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Confirm Deletion</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => confirmDeleteVisible = false"></button>
                </div>
                <div class="modal-body">
                    <p class="lead">Are you sure you want to delete this category?</p>
                    <p class="text-muted">This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" @onclick="() => confirmDeleteVisible = false">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteConfirmed">
                        <i class="bi bi-trash me-2"></i>Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<BusinessCategory> categories = new();
    private BusinessCategory newCategory = new();
    private bool showAddModal = false;
    private bool confirmDeleteVisible = false;
    private int? itemToDeleteId = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        categories = await CategoryService.GetCategoriesAsync();
        StateContainer.Categories = categories;
        StateHasChanged();
    }

    private void OpenAddModal()
    {
        newCategory = new BusinessCategory();
        showAddModal = true;
    }

    private void CloseAddModal()
    {
        showAddModal = false;
    }

    private async Task SaveCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategory.CategoryName))
        {
            await CategoryService.AddCategoryAsync(newCategory);
            newCategory = new BusinessCategory();
            await LoadCategories();
            showAddModal = false;
        }
    }

    private void ConfirmDeleteCategory(int categoryId)
    {
        itemToDeleteId = categoryId;
        confirmDeleteVisible = true;
    }

    private async Task DeleteConfirmed()
    {
        if (itemToDeleteId.HasValue)
        {
            await CategoryService.DeleteCategoryAsync(itemToDeleteId.Value);
            await LoadCategories();
            confirmDeleteVisible = false;
        }
    }

    private async Task SaveChanges()
    {
        await CategoryService.UpdateCategoriesAsync(categories);
        await LoadCategories();
        StateContainer.Categories = categories;
    }
}
