@page "/categories"
@using ClassLibraryEntities
@using ClassLibraryDAL
@using ClassLibraryServices
@inject ICategoryService CategoryService
@inject NavigationManager Navigation
@inject IProductService ProductService
@inject StateContainerService StateContainer
@rendermode InteractiveServer

<style>
    :root {
        --primary-color: #6c5ce7;
        --primary-hover: #5d4aec;
        --danger-color: #dc2626;
        --danger-hover: #b91c1c;
        --text-color: #4b5563;
        --text-dark: #111827;
        --text-light: #6b7280;
        --border-color: #d1d5db;
        --bg-light: #f9fafb;
        --bg-white: #ffffff;
        --shadow-sm: 0 1px 2px rgba(0,0,0,0.05);
        --shadow-md: 0 4px 6px rgba(0,0,0,0.1);
        --radius-md: 0.375rem;
        --radius-lg: 0.5rem;
    }

    .btn-primary {
        background-color: var(--primary-color);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: var(--radius-md);
        border: none;
        cursor: pointer;
        transition: background-color 0.2s;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .btn-primary:hover {
            background-color: var(--primary-hover);
        }

    .btn-danger {
        background-color: var(--danger-color);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: var(--radius-md);
        border: none;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .btn-danger:hover {
            background-color: var(--danger-hover);
        }

    .btn-outline {
        padding: 0.5rem 1rem;
        border: 1px solid var(--border-color);
        border-radius: var(--radius-md);
        background: var(--bg-white);
        color: var(--text-color);
        cursor: pointer;
        transition: all 0.2s;
    }

        .btn-outline:hover {
            background-color: var(--bg-light);
        }

    .btn-icon {
        background: none;
        border: none;
        cursor: pointer;
        font-size: 1.1rem;
        padding: 0.25rem;
        border-radius: var(--radius-md);
        transition: background-color 0.2s;
    }

        .btn-icon:hover {
            background-color: rgba(0,0,0,0.05);
        }

    .input-field {
        border: 1px solid var(--border-color);
        border-radius: var(--radius-md);
        padding: 0.5rem 0.75rem;
        width: 100%;
        transition: border-color 0.2s;
    }

        .input-field:focus {
            outline: none;
            border-color: var(--primary-color);
        }

    .select-field {
        border: 1px solid var(--border-color);
        border-radius: var(--radius-md);
        padding: 0.5rem 0.75rem;
        color: var(--text-color);
        background-color: var(--bg-white);
    }

    .card {
        background-color: var(--bg-white);
        border: 1px solid #e5e7eb;
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-sm);
    }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table th {
            padding: 0.75rem 1rem;
            color: var(--text-color);
            font-weight: 500;
            text-align: left;
            background-color: var(--bg-light);
            border-bottom: 1px solid #e5e7eb;
        }

        .table td {
            padding: 0.75rem 1rem;
            color: var(--text-dark);
            border-bottom: 1px solid #e5e7eb;
        }

        .table tr:hover {
            background-color: var(--bg-light);
        }

    .badge {
        width: 2.5rem;
        height: 2.5rem;
        border-radius: var(--radius-md);
        background-color: rgba(108, 92, 231, 0.1);
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--primary-color);
        font-size: 1.25rem;
        font-weight: 600;
    }

    .modal-overlay {
        position: fixed;
        inset: 0;
        background-color: rgba(0,0,0,0.4);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 50;
    }

    .modal-content {
        background-color: var(--bg-white);
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-md);
        width: 100%;
        max-width: 28rem;
    }

    .modal-header {
        padding: 1rem;
        border-bottom: 1px solid #e5e7eb;
        font-size: 1.125rem;
        font-weight: 600;
    }

    .modal-body {
        padding: 1rem;
    }

    .modal-footer {
        padding: 1rem;
        border-top: 1px solid #e5e7eb;
        display: flex;
        justify-content: flex-end;
        gap: 0.5rem;
    }

    .pagination-btn {
        color: var(--text-light);
        background: none;
        border: 1px solid var(--border-color);
        border-radius: var(--radius-md);
        padding: 0.25rem 0.75rem;
        cursor: pointer;
    }

        .pagination-btn:hover:not(:disabled) {
            background-color: var(--bg-light);
        }

        .pagination-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .pagination-btn.active {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

    .action-buttons {
        display: flex;
        gap: 0.5rem;
    }

    .search-container {
        display: flex;
        align-items: center;
        gap: 1rem;
        width: 100%;
        max-width: 18rem;
    }

    .controls-container {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        align-items: center;
    }

    @@media (max-width: 768px) {
        .table-responsive {
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }

        .search-container {
            max-width: 100%;
        }

        .controls-container {
            width: 100%;
            justify-content: space-between;
        }

        .pagination {
            flex-direction: column;
            gap: 1rem;
        }

        .pagination-buttons {
            flex-wrap: wrap;
            justify-content: center;
        }
    }
</style>

<div class="container" style="padding: 1rem;">
    <h3 style="margin-bottom: 1rem; font-size: 1.25rem; font-weight: 600; color: var(--text-dark);">Manage Categories</h3>

    <!-- Search + Controls -->
    <div style="display: flex; flex-wrap: wrap; justify-content: space-between; margin-bottom: 1rem; gap: 1rem;">
        <div class="search-container">
            <input type="text" class="input-field" placeholder="Search Category"
                   @bind="searchQuery" @bind:event="oninput" />
            <button class="btn-icon" style="color: var(--text-light);">
                <i class="bi bi-filter"></i>
            </button>
        </div>

        <div class="controls-container">
            <select class="select-field" @bind="pageSize" @bind:after="OnPageSizeChanged">
                <option value="7">7</option>
                <option value="10">10</option>
                <option value="20">20</option>
            </select>

            <button class="btn-primary" @onclick="OpenAddModal">
                <span style="font-size: 1.125rem;">+</span> Add Category
            </button>
        </div>
    </div>

    <!-- Delete Selected Button -->
    @if (selectedCategoryIds.Any())
    {
        <div style="margin-bottom: 1rem;">
            <button class="btn-danger" @onclick="ConfirmDeleteSelected">
                Delete Selected (@selectedCategoryIds.Count)
            </button>
        </div>
    }

    <!-- Categories Table -->
    <div class="card table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th style="width: 5%;">
                        <input type="checkbox"
                               @onchange="ToggleSelectAll"
                               checked="@(selectedCategoryIds.Count == filteredCategories.Count && filteredCategories.Count > 0)" />
                    </th>
                    <th style="width: 25%;">CATEGORIES</th>
                    <th style="width: 15%;">TOTAL PRODUCTS</th>
                    <th style="width: 10%;">ACTIONS</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in PagedCategories)
                {
                    <tr>
                        <td style="text-align: center; vertical-align: middle;">
                            <input type="checkbox"
                                   @onchange="e => ToggleCategorySelection(category.CategoryID, e.Value)"
                                   checked="@selectedCategoryIds.Contains(category.CategoryID)" />
                        </td>

                        <td style="vertical-align: middle;">
                            <div style="display: flex; align-items: center; gap: 0.75rem;">
                                <div class="badge">
                                    @category.CategoryName.Substring(0, 1)
                                </div>
                                <div>
                                    <div style="font-weight: 600; color: var(--text-dark);">@category.CategoryName</div>
                                    <div style="color: var(--text-light); font-size: 0.875rem; margin-top: 0.25rem;">
                                        @GetCategoryDescription(category.CategoryName)
                                    </div>
                                </div>
                            </div>
                        </td>

                        <td style="color: var(--text-dark); font-weight: 500; vertical-align: middle;">
                            @(category.Products?.Count ?? 0)
                        </td>

                        <td style="vertical-align: middle;">
                            <div class="action-buttons">
                                <button class="btn-icon" style="color: #2563eb;" @onclick="() => EditCategory(category)">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn-icon" style="color: var(--text-light);" @onclick="() => ToggleDropdown(category.CategoryID)">
                                    <i class="bi bi-three-dots-vertical"></i>
                                </button>
                                <button class="btn-icon" style="color: var(--primary-color);"
                                        @onclick="() => expandedCategoryId = expandedCategoryId == category.CategoryID ? null : category.CategoryID">
                                    <i class="bi @(expandedCategoryId == category.CategoryID ? "bi-chevron-up" : "bi-chevron-down")"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                    @if (expandedCategoryId == category.CategoryID)
                    {
                        <tr>
                            <td colspan="4" style="background: var(--bg-light); padding: 1rem;">
                                @if (category.Products != null && category.Products.Any())
                                {
                                    <table style="width: 100%; font-size: 0.875rem; margin-bottom: 0;">
                                        <thead>
                                            <tr>
                                                <th style="padding: 0.5rem; text-align: left;">Product Name</th>
                                                <th style="padding: 0.5rem; text-align: left;">Price</th>
                                                <th style="padding: 0.5rem; text-align: left;">Status</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var product in category.Products)
                                            {
                                                <tr>
                                                    <td style="padding: 0.5rem;">@product.ProductTitle</td>
                                                    <td style="padding: 0.5rem;">@product.ProductPrice.ToString("C")</td>
                                                    <td style="padding: 0.5rem;">@(product.IsActive ? "Active" : "Inactive")</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                                else
                                {
                                    <div style="color: var(--text-light);">No products in this category.</div>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <div style="display: flex; flex-direction: column; justify-content: space-between; align-items: center; margin-top: 1rem; padding: 1rem; font-size: 0.875rem; color: var(--text-light); gap: 1rem;">
        <div>Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, filteredCategories.Count) of @filteredCategories.Count entries</div>
        <div style="display: flex; align-items: center; gap: 0.5rem; flex-wrap: wrap; justify-content: center;">
            <button class="pagination-btn" disabled="@(currentPage == 1)" @onclick="PreviousPage">
                Previous
            </button>
            @for (int i = 1; i <= TotalPages; i++)
            {
                <button class="pagination-btn @(i == currentPage ? "active" : "")" @onclick="() => GoToPage(i)">
                    @i
                </button>
            }
            <button class="pagination-btn" disabled="@(currentPage == TotalPages)" @onclick="NextPage">
                Next
            </button>
        </div>
    </div>

    <!-- Add/Edit Category Modal -->
    @if (showAddModal)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                <div class="modal-header">
                    @(isEditing ? "Edit Category" : "Add Category")
                </div>
                <div class="modal-body">
                    <input type="text" class="input-field" placeholder="Category Name" @bind="newCategory.CategoryName" />
                    @if (!string.IsNullOrWhiteSpace(duplicateError))
                    {
                        <div style="color: #ef4444; font-size: 0.875rem; margin-top: 0.5rem;">@duplicateError</div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn-outline" @onclick="CloseAddModal">
                        Cancel
                    </button>
                    <button class="btn-primary" @onclick="SaveCategory">
                        @(isEditing ? "Update" : "Save")
                    </button>
                </div>
            </div>
        </div>
    }

    <!-- Delete Confirmation Modal -->
    @if (confirmDeleteVisible)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                <div class="modal-header" style="background-color: var(--danger-color); color: white;">
                    @(selectedCategoryIds.Count > 1 ? "Confirm Multiple Deletion" : "Confirm Deletion")
                </div>
                <div class="modal-body">
                    @if (selectedCategoryIds.Count > 1)
                    {
                        <p style="color: var(--text-dark);">Are you sure you want to delete these @selectedCategoryIds.Count selected categories?</p>
                    }
                    else
                    {
                        <p style="color: var(--text-dark);">Are you sure you want to delete this category?</p>
                    }
                    <p style="color: var(--text-light); font-size: 0.875rem;">This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button class="btn-outline" @onclick="() => { confirmDeleteVisible = false; selectedCategoryIds.Clear(); }">
                        Cancel
                    </button>
                    <button class="btn-danger" @onclick="DeleteConfirmed">
                        Delete
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<BusinessCategory> categories = new();
    private List<BusinessCategory> filteredCategories = new();
    private BusinessCategory newCategory = new();
    private bool showAddModal = false;
    private bool confirmDeleteVisible = false;
    private string duplicateError = string.Empty;
    private HashSet<int> selectedCategoryIds = new();
    private int? dropdownVisible = null;
    private string _searchQuery = "";
    private string searchQuery
    {
        get => _searchQuery;
        set
        {
            if (_searchQuery != value)
            {
                _searchQuery = value;
                currentPage = 1;
                FilterCategories();
            }
        }
    }
    private bool isEditing = false;

    // Pagination properties
    private int currentPage = 1;
    private int pageSize = 7;
    private int totalItems = 0;
    private int TotalPages => (int)Math.Ceiling((double)totalItems / pageSize);
    private IEnumerable<BusinessCategory> PagedCategories =>
        filteredCategories.Skip((currentPage - 1) * pageSize).Take(pageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        categories = await CategoryService.GetCategoriesAsync();
        var products = await ProductService.GetAllProductsAsync();

        foreach (var category in categories)
        {
            category.Products = products.Where(p => p.CategoryID == category.CategoryID).ToList();
        }

        totalItems = categories.Count;
        FilterCategories();
        StateContainer.Categories = categories;
        StateHasChanged();
    }

    private void OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int size))
        {
            pageSize = size;
            currentPage = 1;
            StateHasChanged();
        }
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        currentPage = 1;
        FilterCategories();
    }

    private void FilterCategories()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredCategories = new List<BusinessCategory>(categories);
        }
        else
        {
            filteredCategories = categories
                .Where(c => c.CategoryName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        totalItems = filteredCategories.Count;
        StateHasChanged();
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    private void NextPage()
    {
        if (currentPage < TotalPages)
        {
            currentPage++;
            StateHasChanged();
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            StateHasChanged();
        }
    }

    // Static data to match the design
    private Dictionary<string, (int Products, string Description)> categoryData = new()
    {
        { "Travel", (4186, "Choose from wide range of travel accessories from popular brands") },
        { "Smart Phone", (99129, "Choose from wide range of smartphones from popular brands") },
        { "Shoes", (4940, "Explore the latest shoes from Top brands") },
        { "Jewellery", (4186, "Choose from wide range of Jewellery from popular brands") },
        { "Home Decor", (9184, "Choose from wide range of home decor from popular brands") },
        { "Grocery", (4186, "Get fresh groceries delivered at your doorstep") },
        { "Games", (5764, "Dive into world of Virtual Reality with latest games") }
    };

    private string GetCategoryDescription(string categoryName)
    {
        return categoryData.TryGetValue(categoryName, out var data)
            ? data.Description
            : "Category description";
    }

    private int GetTotalProducts(BusinessCategory category)
    {
        return category.Products?.Count ?? 0;
    }

    private void OnPageSizeChanged()
    {
        currentPage = 1;
        StateHasChanged();
    }
    private void ToggleDropdown(int categoryId)
    {
        dropdownVisible = dropdownVisible == categoryId ? null : categoryId;
    }

    private void ToggleCategorySelection(int categoryId, object isChecked)
    {
        if ((bool)isChecked)
        {
            selectedCategoryIds.Add(categoryId);
        }
        else
        {
            selectedCategoryIds.Remove(categoryId);
        }
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        if ((bool)e.Value)
        {
            selectedCategoryIds = new HashSet<int>(PagedCategories.Select(c => c.CategoryID));
        }
        else
        {
            selectedCategoryIds.Clear();
        }
    }

    private void ConfirmDeleteSelected()
    {
        if (selectedCategoryIds.Any())
        {
            confirmDeleteVisible = true;
        }
    }

    private void OpenAddModal()
    {
        newCategory = new BusinessCategory();
        isEditing = false;
        showAddModal = true;
        duplicateError = string.Empty;
    }

    private void CloseAddModal()
    {
        showAddModal = false;
    }

    private async Task SaveCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategory.CategoryName))
        {
            // Check for duplicates (excluding current category when editing)
            bool isDuplicate = categories.Any(c =>
                c.CategoryID != newCategory.CategoryID &&
                string.Equals(c.CategoryName.Trim(), newCategory.CategoryName.Trim(), StringComparison.OrdinalIgnoreCase));

            if (isDuplicate)
            {
                duplicateError = "Category with this name already exists.";
                return;
            }

            if (isEditing)
            {
                await CategoryService.UpdateCategoryAsync(newCategory);
            }
            else
            {
                await CategoryService.AddCategoryAsync(newCategory);
            }

            newCategory = new BusinessCategory();
            await LoadCategories();
            showAddModal = false;
            duplicateError = string.Empty;
        }
    }

    private void EditCategory(BusinessCategory category)
    {
        newCategory = new BusinessCategory
        {
            CategoryID = category.CategoryID,
            CategoryName = category.CategoryName
        };
        isEditing = true;
        showAddModal = true;
        duplicateError = string.Empty;
    }

    private void ConfirmDeleteCategory(int categoryId)
    {
        selectedCategoryIds.Clear();
        selectedCategoryIds.Add(categoryId);
        confirmDeleteVisible = true;
    }

    private async Task DeleteConfirmed()
    {
        foreach (var id in selectedCategoryIds)
        {
            await CategoryService.DeleteCategoryAsync(id);
        }

        selectedCategoryIds.Clear();
        confirmDeleteVisible = false;
        await LoadCategories();
    }

    private int? expandedCategoryId = null;

    private List<Product> GetProductsForCategory(BusinessCategory category)
    {
        return category.Products ?? new List<Product>();
    }
}