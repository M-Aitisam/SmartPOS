@page "/category-management"
@inject ICategoryService CategoryService
@inject StateContainerService StateContainer
@rendermode InteractiveServer

<h3 class="text-center text-primary mb-4">Category Management</h3>

<<<<<<< HEAD
@if (isLoading)
=======
<h4 class="mt-4 text-primary">Add New Category</h4>
<EditForm Model="@newCategory" OnValidSubmit="SaveCategory">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label class="form-label">Category Name:</label>
        <InputText @bind-Value="newCategory.CategoryName" class="form-control" required />
    </div>
    <button type="submit" class="btn btn-primary"><i class="bi bi-plus-circle"></i> Add Category</button><br /> 
</EditForm>

@if (categories == null)
>>>>>>> de5ddb538c2704a693b40fcbf21354384b85d996
{
    <div class="text-center text-muted">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (categories?.Any() != true)
{
    <p class="text-warning">No categories found.</p>
}
else
{
<<<<<<< HEAD
    <div class="table-responsive">
        <table class="table table-bordered align-middle">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Category Name</th>
                    <th>Actions</th>
=======
    <table class="table table-bordered">
        <thead class="table-dark">
            <tr>
                <th>ID</th>
                <th>Category / Product / Sub-product</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in categories)
            {
                <tr>
                    <td>@category.CategoryID</td>
                    <td>
                        <InputText class="form-control" @bind-Value="category.CategoryName" />
                    </td>
                    <td></td>
                    <td>
                        <button class="btn btn-success btn-sm" @onclick="() => OpenPopup(category.CategoryID, null)">
                            <i class="bi bi-plus-lg"></i> Add Product
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDeleteCategory(category.CategoryID)">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </td>
>>>>>>> de5ddb538c2704a693b40fcbf21354384b85d996
                </tr>
            </thead>
            <tbody>
                @foreach (var category in categories)
                {
                    <tr>
                        <td>@category.CategoryID</td>
                        <td>@category.CategoryName</td>
                        <td>
                            <button class="btn btn-success btn-sm me-2" @onclick="() => OpenPopup(category.CategoryID, null)">
                                <i class="bi bi-plus-lg"></i> Add Subcategory
                            </button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteCategory(category.CategoryID)">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </td>
                    </tr>

                    @foreach (var subItem in category.SubItems ?? new())
                    {
                        <tr>
                            <td></td>
<<<<<<< HEAD
                            <td>├── @subItem.SubItemName</td>
                            <td>
                                <button class="btn btn-success btn-sm me-2" @onclick="() => OpenPopup(category.CategoryID, subItem.SubItemID)">
                                    <i class="bi bi-plus"></i> Add Nested
=======
                            <td class="ps-3">
                                └ <InputText class="form-control" @bind-Value="subItem.SubItemName" />
                            </td>
                            <td>
                                <InputNumber class="form-control" @bind-Value="subItem.Price" />
                            </td>
                            <td>
                                <button class="btn btn-success btn-sm" @onclick="() => OpenPopup(category.CategoryID, subItem.SubItemID)">
                                    <i class="bi bi-plus"></i> Add Sub-product
>>>>>>> de5ddb538c2704a693b40fcbf21354384b85d996
                                </button>
                                <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDeleteSubItem(subItem.SubItemID)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </td>
                        </tr>

                        @foreach (var nested in subItem.NestedSubItems ?? new())
                        {
<<<<<<< HEAD
                            <tr>
                                <td></td>
                                <td class="ps-4">│   └── @nested.SubItemName <small class="text-muted">(Price: $@nested.Price)</small></td>
                                <td>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteSubItem(nested.SubItemID)">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
    </div>
}

<hr />

<h4 class="mt-4 text-primary">Add New Category</h4>
<EditForm Model="@newCategory" OnValidSubmit="SaveCategory">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label class="form-label">Category Name:</label>
        <InputText @bind-Value="newCategory.CategoryName" class="form-control" required />
    </div>
    <button type="submit" class="btn btn-primary">
        <i class="bi bi-plus-circle"></i> Add Category
    </button>
</EditForm>
=======
                            @foreach (var nestedItem in subItem.NestedSubItems)
                            {
                                <tr>
                                    <td></td>
                                    <td class="ps-5">
                                        └ <InputText class="form-control" @bind-Value="nestedItem.SubItemName" />
                                    </td>
                                    <td>
                                        <InputNumber class="form-control" @bind-Value="nestedItem.Price" />
                                    </td>
                                    <td>
                                        <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDeleteSubItem(nestedItem.SubItemID)">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                    }
                }
            }
        </tbody>
    </table>

    <button class="btn btn-primary mt-3" @onclick="SaveChanges">Save Changes</button>
}


>>>>>>> de5ddb538c2704a693b40fcbf21354384b85d996

@if (isPopupOpen)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" @onclick="ClosePopup">
        <div class="modal-dialog" @onclick:stopPropagation>
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @(parentSubItemID == null ? "Add Product" : "Add Sub-product")
                    </h5>
                    <button type="button" class="btn-close" @onclick="ClosePopup"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@newSubItem" OnValidSubmit="SaveSubItem">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-3">
                            <label class="form-label">Name:</label>
                            <InputText @bind-Value="newSubItem.SubItemName" class="form-control" required />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Price:</label>
                            <InputNumber @bind-Value="newSubItem.Price" class="form-control" />
                        </div>

                        <button type="submit" class="btn btn-success">Save</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (confirmDeleteVisible)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Deletion</h5>
                    <button type="button" class="btn-close" @onclick="() => confirmDeleteVisible = false"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this item?</p>
                    <button class="btn btn-danger" @onclick="DeleteConfirmed">Yes, Delete</button>
                    <button class="btn btn-secondary" @onclick="() => confirmDeleteVisible = false">Cancel</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<BusinessCategory> categories = new();
    private BusinessCategory newCategory = new();
    private BusinessSubItem newSubItem = new() { Price = 0 };
    private bool isPopupOpen = false;
<<<<<<< HEAD
    private int currentCategoryID;
    private int? parentSubItemID = null;
    private bool isLoading = true;
=======
    private bool confirmDeleteVisible = false;
    private int currentCategoryID = 0;
    private int? parentSubItemID = null;
    private int? itemToDeleteId = null;
    private bool isDeletingCategory = false;
>>>>>>> de5ddb538c2704a693b40fcbf21354384b85d996

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        isLoading = true;
        categories = await CategoryService.GetCategoriesAsync();
        StateContainer.Categories = categories;
<<<<<<< HEAD
        isLoading = false;
=======
        await InvokeAsync(StateHasChanged);
>>>>>>> de5ddb538c2704a693b40fcbf21354384b85d996
    }

    private async Task SaveCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategory.CategoryName))
        {
            await CategoryService.AddCategoryAsync(newCategory);
            newCategory = new BusinessCategory();
            await LoadCategories();
        }
    }

    private void ConfirmDeleteCategory(int categoryId)
    {
        itemToDeleteId = categoryId;
        isDeletingCategory = true;
        confirmDeleteVisible = true;
    }

    private void ConfirmDeleteSubItem(int subItemId)
    {
        itemToDeleteId = subItemId;
        isDeletingCategory = false;
        confirmDeleteVisible = true;
    }

    private async void DeleteConfirmed()
    {
        if (itemToDeleteId.HasValue)
        {
            if (isDeletingCategory)
                await CategoryService.DeleteCategoryAsync(itemToDeleteId.Value);
            else
                await CategoryService.DeleteSubItemAsync(itemToDeleteId.Value);

            await LoadCategories();
            confirmDeleteVisible = false;
        }
    }

    private void OpenPopup(int categoryId, int? subItemId)
    {
        currentCategoryID = categoryId;
        parentSubItemID = subItemId;
        newSubItem = new BusinessSubItem
            {
                CategoryID = categoryId,
                ParentSubItemID = subItemId,
                Price = 0
            };
        isPopupOpen = true;
    }

    private void ClosePopup()
    {
        isPopupOpen = false;
    }

    private async Task SaveSubItem()
    {
        if (!string.IsNullOrWhiteSpace(newSubItem.SubItemName))
        {
            await CategoryService.AddSubItemAsync(newSubItem);
<<<<<<< HEAD
=======
            await LoadCategories();
>>>>>>> de5ddb538c2704a693b40fcbf21354384b85d996
            ClosePopup();
            await LoadCategories();
        }
    }

    private async Task SaveChanges()
    {
        await CategoryService.UpdateCategoriesAsync(categories);
        StateContainer.Categories = categories;

        // Optional: clear product cache so next visit to Purchase reloads new data
        StateContainer.Products.Clear();
    }
}
