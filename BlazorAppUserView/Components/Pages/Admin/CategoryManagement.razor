@page "/categories"
@using ClassLibraryEntities
@using ClassLibraryDAL
@using ClassLibraryServices
@inject ICategoryService CategoryService
@inject NavigationManager Navigation
@inject StateContainerService StateContainer
@rendermode InteractiveServer

<h3 style="margin-bottom: 1rem; font-size: 1.25rem; font-weight: 600;">Manage Categories</h3>

<!-- Search + Controls -->
<div style="display: flex; justify-content: space-between; margin-bottom: 1rem; align-items: center;">
    <div style="display: flex; align-items: center; gap: 1rem;">
        <input type="text"
               style="border: 1px solid #d1d5db; border-radius: 0.375rem; padding: 0.5rem 0.75rem; width: 16rem;"
               placeholder="Search Category"
               @bind="searchQuery"
               @bind:event="oninput" />

        <div style="position: relative;">
            <button style="color: #6b7280; padding: 0.5rem;">
                <i class="bi bi-filter"></i>
            </button>
        </div>
    </div>

    <div style="display: flex; align-items: center; gap: 0.5rem;">
        <select style="border: 1px solid #d1d5db; border-radius: 0.375rem; padding: 0.5rem 0.75rem; color: #4b5563;"
                @bind="pageSize"
                @bind:after="OnPageSizeChanged">
            <option value="7">7</option>
            <option value="10">10</option>
            <option value="20">20</option>
        </select>

        <button style="background-color: #7e22ce; color: white; padding: 0.5rem 1rem; border-radius: 0.375rem; display: flex; align-items: center; gap: 0.5rem;"
                @onclick="OpenAddModal">
            <span style="font-size: 1.125rem;">+</span> Add Category
        </button>
    </div>
</div>

<!-- Delete Selected Button (shown only when items are selected) -->
@if (selectedCategoryIds.Any())
{
    <div style="margin-bottom: 1rem;">
        <button style="background-color: #dc2626; color: white; padding: 0.5rem 1rem; border-radius: 0.375rem;"
                @onclick="ConfirmDeleteSelected">
            Delete Selected (@selectedCategoryIds.Count)
        </button>
    </div>
}

<!-- Categories Table -->
<table style="width: 100%; background-color: white; border: 1px solid #e5e7eb; border-radius: 0.375rem; box-shadow: 0 1px 2px rgba(0,0,0,0.05); border-collapse: collapse;">
    <thead style="background-color: #f9fafb; text-align: left; border-bottom: 1px solid #e5e7eb;">
        <tr>
            <th style="padding: 0.75rem 1rem; color: #4b5563; font-weight: 500; width: 5%;">
                <input type="checkbox"
                       @onchange="ToggleSelectAll"
                       checked="@(selectedCategoryIds.Count == filteredCategories.Count && filteredCategories.Count > 0)" />
            </th>
            <th style="padding: 0.75rem 1rem; color: #4b5563; font-weight: 500; width: 25%;">CATEGORIES</th>
            <th style="padding: 0.75rem 1rem; color: #4b5563; font-weight: 500; width: 15%;">TOTAL PRODUCTS</th>
            <th style="padding: 0.75rem 1rem; color: #4b5563; font-weight: 500; width: 10%;">ACTIONS</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var category in PagedCategories)
        {
            <tr style="border-bottom: 1px solid #e5e7eb; transition: background-color 0.2s;"
                onmouseover="this.style.backgroundColor='#f9fafb'"
                onmouseout="this.style.backgroundColor='transparent'">

                <td style="padding: 0.75rem 1rem; text-align: center; vertical-align: middle;">
                    <input type="checkbox"
                           @onchange="e => ToggleCategorySelection(category.CategoryID, e.Value)"
                           checked="@selectedCategoryIds.Contains(category.CategoryID)" />
                </td>

                <td style="padding: 0.75rem 1rem; vertical-align: middle;">
                    <div style="display: flex; align-items: center; gap: 0.75rem;">
                        <div style="width: 2.5rem; height: 2.5rem; border-radius: 0.375rem; background-color: #f3e8ff; display: flex; align-items: center; justify-content: center;">
                            <span style="font-size: 1.25rem; color: #7e22ce;">@category.CategoryName.Substring(0, 1)</span>
                        </div>
                        <div>
                            <div style="font-weight: 600; color: #111827;">@category.CategoryName</div>
                            <div style="color: #6b7280; font-size: 0.875rem; margin-top: 0.25rem;">
                                @GetCategoryDescription(category.CategoryName)
                            </div>
                        </div>
                    </div>
                </td>

                <td style="padding: 0.75rem 1rem; color: #111827; font-weight: 500; vertical-align: middle;">
                    @GetTotalProducts(category.CategoryName)
                </td>

                <td style="padding: 0.75rem 1rem; vertical-align: middle;">
                    <div style="display: flex; gap: 0.5rem;">
                        <button style="color: #2563eb; background: none; border: none; cursor: pointer; font-size: 1.1rem;"
                                @onclick="() => EditCategory(category)">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <div style="position: relative;">
                            <button style="color: #6b7280; background: none; border: none; cursor: pointer; font-size: 1.1rem;"
                                    @onclick="() => ToggleDropdown(category.CategoryID)">
                                <i class="bi bi-three-dots-vertical"></i>
                            </button>

                            @if (dropdownVisible == category.CategoryID)
                            {
                                <div style="position: absolute; top: 100%; right: 0; background-color: white; border: 1px solid #e5e7eb; border-radius: 0.375rem; box-shadow: 0 4px 6px rgba(0,0,0,0.05); z-index: 10; display: flex; flex-direction: column;">
                                    <button style="padding: 0.5rem 1rem; cursor: pointer; white-space: nowrap; text-align: left; background: none; border: none;"
                                            @onclick="() => EditCategory(category)">
                                        Edit
                                    </button>
                                    <button style="padding: 0.5rem 1rem; cursor: pointer; white-space: nowrap; text-align: left; background: none; border: none; color: #dc2626;"
                                            @onclick="() => ConfirmDeleteCategory(category.CategoryID)">
                                        Delete
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Pagination -->
<div style="display: flex; justify-content: space-between; align-items: center; margin-top: 1rem; padding: 1rem; font-size: 0.875rem; color: #6b7280;">
    <div>Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, filteredCategories.Count) of @filteredCategories.Count entries</div>
    <div style="display: flex; align-items: center; gap: 0.5rem;">
        <button style="color: #9ca3af; background: none; border: 1px solid #d1d5db; border-radius: 0.375rem; padding: 0.25rem 0.75rem;"
                disabled="@(currentPage == 1)"
                @onclick="PreviousPage">
            Previous
        </button>
        @for (int i = 1; i <= TotalPages; i++)
        {
            <button style="@(i == currentPage ? "background-color: #7e22ce; color: white;" : "color: #6b7280; background: none;") border: 1px solid #d1d5db; border-radius: 0.375rem; padding: 0.25rem 0.75rem;"
                    @onclick="() => GoToPage(i)">
                @i
            </button>
        }
        <button style="color: #9ca3af; background: none; border: 1px solid #d1d5db; border-radius: 0.375rem; padding: 0.25rem 0.75rem;"
                disabled="@(currentPage == TotalPages)"
                @onclick="NextPage">
            Next
        </button>
    </div>
</div>

<!-- Add/Edit Category Modal -->
@if (showAddModal)
{
    <div style="position: fixed; inset: 0; background-color: rgba(0,0,0,0.4); display: flex; justify-content: center; align-items: center; z-index: 50;">
        <div style="background-color: white; border-radius: 0.5rem; box-shadow: 0 10px 15px rgba(0,0,0,0.1); width: 100%; max-width: 28rem;">
            <div style="padding: 1rem; border-bottom: 1px solid #e5e7eb;">
                <h4 style="font-size: 1.125rem; font-weight: 600;">
                    @(isEditing ? "Edit Category" : "Add Category")
                </h4>
            </div>
            <div style="padding: 1rem;">
                <input type="text"
                       style="border: 1px solid #d1d5db; border-radius: 0.375rem; padding: 0.75rem; width: 100%;"
                       placeholder="Category Name"
                       @bind="newCategory.CategoryName" />
                @if (!string.IsNullOrWhiteSpace(duplicateError))
                {
                    <div style="color: #ef4444; font-size: 0.875rem; margin-top: 0.5rem;">@duplicateError</div>
                }
            </div>
            <div style="padding: 1rem; border-top: 1px solid #e5e7eb; display: flex; justify-content: flex-end; gap: 0.5rem;">
                <button style="padding: 0.5rem 1rem; border: 1px solid #d1d5db; border-radius: 0.375rem; background: white; color: #4b5563;"
                        @onclick="CloseAddModal">
                    Cancel
                </button>
                <button style="padding: 0.5rem 1rem; background-color: #7e22ce; color: white; border-radius: 0.375rem;"
                        @onclick="SaveCategory">
                    @(isEditing ? "Update" : "Save")
                </button>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (confirmDeleteVisible)
{
    <div style="position: fixed; inset: 0; background-color: rgba(0,0,0,0.4); display: flex; justify-content: center; align-items: center; z-index: 50;">
        <div style="background-color: white; border-radius: 0.5rem; box-shadow: 0 10px 15px rgba(0,0,0,0.1); width: 100%; max-width: 28rem;">
            <div style="padding: 1rem; border-bottom: 1px solid #e5e7eb; background-color: #dc2626; color: white;">
                <h4 style="font-size: 1.125rem; font-weight: 600;">
                    @(selectedCategoryIds.Count > 1 ? "Confirm Multiple Deletion" : "Confirm Deletion")
                </h4>
            </div>
            <div style="padding: 1rem;">
                @if (selectedCategoryIds.Count > 1)
                {
                    <p style="color: #374151;">Are you sure you want to delete these @selectedCategoryIds.Count selected categories?</p>
                }
                else
                {
                    <p style="color: #374151;">Are you sure you want to delete this category?</p>
                }
                <p style="color: #9ca3af; font-size: 0.875rem;">This action cannot be undone.</p>
            </div>
            <div style="padding: 1rem; border-top: 1px solid #e5e7eb; display: flex; justify-content: flex-end; gap: 0.5rem;">
                <button style="padding: 0.5rem 1rem; border: 1px solid #d1d5db; border-radius: 0.375rem; background: white; color: #4b5563;"
                        @onclick="() => { confirmDeleteVisible = false; selectedCategoryIds.Clear(); }">
                    Cancel
                </button>
                <button style="padding: 0.5rem 1rem; background-color: #dc2626; color: white; border-radius: 0.375rem;"
                        @onclick="DeleteConfirmed">
                    Delete
                </button>
            </div>
        </div>
    </div>
}
@code {
    private List<BusinessCategory> categories = new();
    private List<BusinessCategory> filteredCategories = new();
    private BusinessCategory newCategory = new();
    private bool showAddModal = false;
    private bool confirmDeleteVisible = false;
    private string duplicateError = string.Empty;
    private HashSet<int> selectedCategoryIds = new();
    private int? dropdownVisible = null;
    private string _searchQuery = "";
    private string searchQuery
    {
        get => _searchQuery;
        set
        {
            if (_searchQuery != value)
            {
                _searchQuery = value;
                currentPage = 1;
                FilterCategories();
            }
        }
    }
    private bool isEditing = false;

    // Pagination properties
    private int currentPage = 1;
    private int pageSize = 7;
    private int totalItems = 0;
    private int TotalPages => (int)Math.Ceiling((double)totalItems / pageSize);
    private IEnumerable<BusinessCategory> PagedCategories =>
        filteredCategories.Skip((currentPage - 1) * pageSize).Take(pageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        categories = await CategoryService.GetCategoriesAsync();
        totalItems = categories.Count;
        FilterCategories();
        StateContainer.Categories = categories;
        StateHasChanged();
    }

    private void OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int size))
        {
            pageSize = size;
            currentPage = 1;
            StateHasChanged();
        }
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        currentPage = 1; // Reset to first page when searching
        FilterCategories();
    }

    private void FilterCategories()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredCategories = new List<BusinessCategory>(categories);
        }
        else
        {
            filteredCategories = categories
                .Where(c => c.CategoryName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        totalItems = filteredCategories.Count;
        StateHasChanged();
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    private void NextPage()
    {
        if (currentPage < TotalPages)
        {
            currentPage++;
            StateHasChanged();
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            StateHasChanged();
        }
    }

    // Static data to match the design
    private Dictionary<string, (int Products, string Description)> categoryData = new()
{
    { "Travel", (4186, "Choose from wide range of travel accessories from popular brands") },
    { "Smart Phone", (99129, "Choose from wide range of smartphones from popular brands") },
    { "Shoes", (4940, "Explore the latest shoes from Top brands") },
    { "Jewellery", (4186, "Choose from wide range of Jewellery from popular brands") },
    { "Home Decor", (9184, "Choose from wide range of home decor from popular brands") },
    { "Grocery", (4186, "Get fresh groceries delivered at your doorstep") },
    { "Games", (5764, "Dive into world of Virtual Reality with latest games") }
};

    private string GetCategoryDescription(string categoryName)
    {
        return categoryData.TryGetValue(categoryName, out var data)
            ? data.Description
            : "Category description";
    }

    private int GetTotalProducts(string categoryName)
    {
        return categoryData.TryGetValue(categoryName, out var data)
            ? data.Products
            : 0;
    }
    
    private void OnPageSizeChanged()
    {
        currentPage = 1;
        StateHasChanged();
    }
    private void ToggleDropdown(int categoryId)
    {
        dropdownVisible = dropdownVisible == categoryId ? null : categoryId;
    }

    private void ToggleCategorySelection(int categoryId, object isChecked)
    {
        if ((bool)isChecked)
        {
            selectedCategoryIds.Add(categoryId);
        }
        else
        {
            selectedCategoryIds.Remove(categoryId);
        }
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        if ((bool)e.Value)
        {
            selectedCategoryIds = new HashSet<int>(PagedCategories.Select(c => c.CategoryID));
        }
        else
        {
            selectedCategoryIds.Clear();
        }
    }

    private void ConfirmDeleteSelected()
    {
        if (selectedCategoryIds.Any())
        {
            confirmDeleteVisible = true;
        }
    }

    private void OpenAddModal()
    {
        newCategory = new BusinessCategory();
        isEditing = false;
        showAddModal = true;
        duplicateError = string.Empty;
    }

    private void CloseAddModal()
    {
        showAddModal = false;
    }

    private async Task SaveCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategory.CategoryName))
        {
            // Check for duplicates (excluding current category when editing)
            bool isDuplicate = categories.Any(c =>
                c.CategoryID != newCategory.CategoryID &&
                string.Equals(c.CategoryName.Trim(), newCategory.CategoryName.Trim(), StringComparison.OrdinalIgnoreCase));

            if (isDuplicate)
            {
                duplicateError = "Category with this name already exists.";
                return;
            }

            if (isEditing)
            {
                await CategoryService.UpdateCategoryAsync(newCategory);
            }
            else
            {
                await CategoryService.AddCategoryAsync(newCategory);
            }

            newCategory = new BusinessCategory();
            await LoadCategories();
            showAddModal = false;
            duplicateError = string.Empty;
        }
    }

    private void EditCategory(BusinessCategory category)
    {
        newCategory = new BusinessCategory
        {
            CategoryID = category.CategoryID,
            CategoryName = category.CategoryName
        };
        isEditing = true;
        showAddModal = true;
        duplicateError = string.Empty;
    }

    private void ConfirmDeleteCategory(int categoryId)
    {
        selectedCategoryIds.Clear();
        selectedCategoryIds.Add(categoryId);
        confirmDeleteVisible = true;
    }

    private async Task DeleteConfirmed()
    {
        foreach (var id in selectedCategoryIds)
        {
            await CategoryService.DeleteCategoryAsync(id);
        }

        selectedCategoryIds.Clear();
        confirmDeleteVisible = false;
        await LoadCategories();
    }
}