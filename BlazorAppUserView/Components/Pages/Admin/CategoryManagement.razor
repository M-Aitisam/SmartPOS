@page "/category-management"
@inject ICategoryService CategoryService
@rendermode InteractiveServer

<h3 class="text-center text-primary">Category Management</h3>

@if (categories == null)
{
    <p class="text-muted">Loading...</p>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>ID</th>
                <th>Category Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in categories)
            {
                <tr>
                    <td>@category.CategoryID</td>
                    <td>@category.CategoryName</td>
                    <td>
                        <button class="btn btn-success btn-sm" @onclick="() => OpenPopup(category.CategoryID)">
                            <i class="bi bi-plus-lg"></i> Add SubItem
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteCategory(category.CategoryID)">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </td>
                </tr>

                @if (category.SubItems.Any())
                {
                    <tr>
                        <td colspan="3">
                            <ul class="list-group">
                                @foreach (var subItem in category.SubItems)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        @subItem.SubItemName
                                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteSubItem(subItem.SubItemID)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </li>
                                }
                            </ul>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

<!-- Add Category Form -->
<h4 class="mt-4 text-primary">Add New Category</h4>
<EditForm Model="@newCategory" OnValidSubmit="SaveCategory">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Category Name:</label>
        <InputText @bind-Value="newCategory.CategoryName" class="form-control" required />
    </div>
    <button type="submit" class="btn btn-primary"><i class="bi bi-plus-circle"></i> Add Category</button>
</EditForm>

<!-- Popup for Adding SubItems -->
@if (isPopupOpen)
{
    <div class="popup-overlay">
        <div class="popup-content">
            <h4>Add Sub Item</h4>
            <EditForm Model="@newSubItem" OnValidSubmit="SaveSubItem">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label class="form-label">Sub Item Name:</label>
                    <InputText @bind-Value="newSubItem.SubItemName" class="form-control" required />
                </div>
                <button type="submit" class="btn btn-success">Add</button>
                <button type="button" class="btn btn-danger" @onclick="ClosePopup">Close</button>
            </EditForm>
        </div>
    </div>
}

@code {
    private List<BusinessCategory> categories = new();
    private BusinessCategory newCategory = new();
    private BusinessSubItem newSubItem = new();
    private bool isPopupOpen = false;
    private int currentCategoryID = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        categories = await CategoryService.GetCategoriesAsync();
    }

    private async Task SaveCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategory.CategoryName))
        {
            await CategoryService.AddCategoryAsync(newCategory);
            newCategory = new BusinessCategory();
            await LoadCategories();
        }
    }

    private async Task DeleteCategory(int categoryId)
    {
        await CategoryService.DeleteCategoryAsync(categoryId);
        await LoadCategories();
    }

    private void OpenPopup(int categoryId)
    {
        currentCategoryID = categoryId;
        newSubItem = new BusinessSubItem { CategoryID = categoryId };
        isPopupOpen = true;
    }

    private void ClosePopup()
    {
        isPopupOpen = false;
    }

    private async Task SaveSubItem()
    {
        if (!string.IsNullOrWhiteSpace(newSubItem.SubItemName))
        {
            await CategoryService.AddSubItemAsync(newSubItem);
            await LoadCategories();
            ClosePopup();
        }
    }

    private async Task DeleteSubItem(int subItemId)
    {
        await CategoryService.DeleteSubItemAsync(subItemId);
        await LoadCategories();
    }
}
