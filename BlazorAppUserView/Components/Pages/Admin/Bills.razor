@page "/bills"
@inject BillService BillService
@rendermode InteractiveServer

<div class="container-fluid p-2">
    <div class="card shadow-sm h-100">
        <div class="card-body p-2 table-responsive" style="max-height: 60vh; overflow-y: auto;">
            <table class="table table-hover table-striped text-center align-middle">
                <thead class="table-light sticky-top">
                    <tr>
                        <th>#</th>
                        <th>Product Name</th>
                        <th>Qty.</th>
                        <th>Price</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (BillService.SelectedItems != null && BillService.SelectedItems.Any())
                    {
                        @foreach (var (item, index) in BillService.SelectedItems.Select((item, index) => (item, index + 1)))
                        {
                            <tr>
                                <td>@index</td>
                                <td class="text-start">@item.Name</td>
                                <td>
                                    <div class="d-flex justify-content-center align-items-center gap-1">
                                        <button class="btn btn-sm btn-secondary" @onclick="() => IncreaseQuantity(item)">
                                            <i class="bi bi-plus"></i>
                                        </button>
                                        <input type="text" class="form-control form-control-sm text-center" value="@item.Quantity" readonly style="width: 50px;" />
                                        <button class="btn btn-sm btn-secondary" @onclick="() => DecreaseQuantity(item)">
                                            <i class="bi bi-dash"></i>
                                        </button>
                                    </div>
                                </td>
                                <td>@item.Price</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(item)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <!-- Footer -->
        <div class="card-footer bg-light mt-2">
            <div class="row g-2">
                <div class="col-md-6 d-flex flex-column flex-md-row align-items-start justify-content-between gap-2 bg-success-subtle p-3 rounded">
                    <div>
                        <p class="mb-1">Total Item(s): <strong>@BillService.SelectedItems?.Count()</strong></p>
                        <p class="mb-1">Discount:</p>
                    </div>
                    <div class="d-flex flex-column align-items-start gap-2">
                        <input type="text" class="form-control form-control-sm" placeholder="Discount" style="width: 80px;" />
                        <button class="btn btn-sm btn-danger">
                            <i class="bi bi-x-circle"></i> Cancel
                        </button>
                    </div>
                </div>

                <div class="col-md-3 d-flex flex-column align-items-start gap-2">
                    <p class="mb-0">Price:</p>
                    <p class="mb-0">Gross Price</p>
                    <p class="mb-0">(Inc 15% Tax):</p>
                    <button class="btn btn-sm btn-info">
                        <i class="bi bi-pause-circle"></i> Hold
                    </button>
                </div>

                <div class="col-md-3 d-flex flex-column align-items-start gap-2">
                    <strong>@BillService.TotalAmount</strong>
                    <strong class="fs-5">@((BillService.TotalAmount * 1.15m).ToString("0.00"))</strong>
                    <button class="btn btn-sm btn-success">
                        <i class="bi bi-check-circle"></i> Pay
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Bootstrap Modal -->
<div class="modal fade @(ShowDeleteModal ? "show d-block" : "")" tabindex="-1" role="dialog" style="background: rgba(0,0,0,0.5);">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close" @onclick="CancelDelete"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete <strong>@(SelectedItem?.Name)</strong>?</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary btn-sm" @onclick="CancelDelete">Cancel</button>
                <button class="btn btn-danger btn-sm" @onclick="DeleteItem">OK</button>
            </div>
        </div>
    </div>
</div>


@code {
	private RateItem? SelectedItem;
	private bool ShowDeleteModal = false;

	protected override void OnInitialized()
	{
		BillService.OnChange += async () => await InvokeAsync(StateHasChanged);
	}

	public void Dispose()
	{
		BillService.OnChange -= async () => await InvokeAsync(StateHasChanged);
	}

	private async Task IncreaseQuantity(RateItem item)
	{
		if (item.Quantity == 0)
		{
			item.Quantity = 1; // Set the initial quantity
			item.Price = item.BasePrice; // Set initial price to base price
		}
		else
		{
			item.Quantity++;
			item.Price = item.BasePrice * item.Quantity;
		}

		await BillService.UpdateItemAsync(item);
	}


	private async Task DecreaseQuantity(RateItem item)
	{
		if (item.Quantity > 1)
		{
			item.Quantity--;
			item.Price = item.BasePrice * item.Quantity;
			await BillService.UpdateItemAsync(item);
		}
	}

	private void ConfirmDelete(RateItem item)
	{
		SelectedItem = item;
		ShowDeleteModal = true;
	}

	private async Task DeleteItem()
	{
		if (SelectedItem != null)
		{
			await BillService.RemoveItemAsync(SelectedItem);
			SelectedItem = null;
			await InvokeAsync(StateHasChanged);
		}
		ShowDeleteModal = false;
	}

	private void CancelDelete()
	{
		SelectedItem = null;
		ShowDeleteModal = false;
	}
}
