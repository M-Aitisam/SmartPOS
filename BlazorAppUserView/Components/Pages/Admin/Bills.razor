@page "/bills"
@inject BillService BillService
@inject NavigationManager NavigationManager
@inject ITransactionService TransactionService
@inject IAdminService AdminService
@inject IJSRuntime JS
@using QRCoder
@using ZXing
@using ZXing.Common
@using System.IO
@rendermode InteractiveServer

<style>
    /* Main receipt container - now full height and fixed */
    .receipt-container {
    font-family: 'Courier New', monospace;
    margin: 0 auto;
    max-width: 500px;
    min-height: 90vh;
    padding: 10px;
    background: white;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    overflow: hidden;
    }

    /* Content area that will scroll */
    .receipt-content {
    flex: 1;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    }

    .receipt-line {
    display: flex;
    justify-content: space-between;
    margin-bottom: 5px;
    }

    .receipt-footer {
    margin-top: auto;
    border-top: 1px dashed #000;
    padding-top: 10px;
    }

    .quantity-control {
    display: inline-flex;
    align-items: center;
    gap: 5px;
    }

    .action-buttons {
    display: flex;
    gap: 10px;
    margin-top: 20px;
    justify-content: center;
    }

    .product-row {
    display: flex;
    margin: 3px 0;
    padding: 0 10px;
    gap: 10px;
    }

    .col-number {
    width: 50px;
    text-align: left;
    }

    .col-name {
    flex: 1;
    text-align: left;
    padding-left: 5px;
    }

    .col-qty {
    width: 10px;
    text-align: center;
    display: flex;
    justify-content: center;
    align-items: center;
    }

    .col-price {
    width: 170px;
    text-align: center;
    margin-left: 3px;
    }

    .qty-control {
    text-align: left;
    display: flex;
    align-items: center;
    gap: 5px;
    }

    .qty-btn {
    border: none;
    background: none;
    cursor: pointer;
    font-weight: bold;
    padding: 0 5px;
    }

    /* Scrollable product list */
    .product-list-container {
    max-height: 25rem;
    overflow-y: auto;
    margin-bottom: 20px;
    padding: 0 5px;
    flex-shrink: 0;
    }

    .product-list-header {
    border-bottom: 3px solid #eee;
    font-weight: bold;
    margin-bottom: 5px;
    padding: 0 10px;
    position: sticky;
    top: 0;
    background: white;
    z-index: 1;
    }

    /* QR and barcode styles */
    .code-container {
    text-align: center;
    margin: 10px 0;
    }

    .qr-code-img, .barcode-img {
    max-width: 100%;
    height: auto;
    display: block;
    margin: 0 auto;
    }

    .barcode-img {
    height: 60px;
    }

    .dotted-line {
    border-top: 1px dashed #000;
    margin: 5px 0;
    }

    /* Discount section styles */

    .discount-item {
    background: white;
    border-radius: 5px;
    padding: 10px;
    margin-bottom: 10px;
    border: 1px solid #ddd;
    }

    .discount-actions {
    display: flex;
    gap: 5px;
    margin-top: 5px;
    }

    .applied-discounts {
    margin-top: 10px;
    }

    .applied-discount-item {
    display: flex;
    justify-content: space-between;
    padding: 5px 0;
    border-bottom: 1px dashed #ddd;
    }

    /* Modal styles */
    .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0,0,0,0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    }

    .modal-content {
    background: white;
    border-radius: 8px;
    max-width: 600px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 4px 20px rgba(0,0,0,0.15);
    }

    .modal-header {
    padding: 15px 20px;
    border-bottom: 1px solid #eee;
    display: flex;
    justify-content: space-between;
    align-items: center;
    }

    .modal-body {
    padding: 20px;
    }

    .modal-footer {
    padding: 15px 20px;
    border-top: 1px solid #eee;
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    }

    .close-btn {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #666;
    }

    @@media print {
    body * {
    visibility: hidden;
    }

    .print-receipt, .print-receipt * {
    visibility: visible;
    }

    .print-receipt {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    margin: 0;
    padding: 10px;
    box-shadow: none;
    border: none;
    }

    .no-print {
    display: none !important;
    }

    .barcode-img, .qr-code-img {
    max-width: 200px;
    height: auto;
    }
    }

    .action-buttons {
    display: flex;
    gap: 10px;
    margin-top: 20px;
    justify-content: center;
    flex-wrap: wrap;
    }

    .action-buttons button {
    padding: 8px 15px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: bold;
    transition: all 0.3s;
    min-width: 120px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 5px;
    }

    .action-buttons button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    }

    .action-buttons button i {
    font-size: 1rem;
    }
</style>

<div class="receipt-container">
    <div class="receipt-content">
        <div class="product-list-container">
            <div class="product-list-header receipt-line">
                <span>#</span>
                <span class="product-name">Name</span>
                <span class="product-qty">Qt.</span>
                <span class="product-price">Price</span>
                <span>Action</span>
            </div>

            @if (BillService.SelectedItems != null && BillService.SelectedItems.Any())
            {
                @foreach (var (item, index) in BillService.SelectedItems.Select((item, index) => (item, index + 1)))
                {
                    <div class="product-row">
                        <div class="col-number">@index</div>
                        <div class="col-name">@item.Name</div>
                        <div class="col-qty">
                            <div class="qty-control">
                                <button class="qty-btn" @onclick="() => DecreaseQuantity(item)">-</button>
                                @item.Quantity
                                <button class="qty-btn" @onclick="() => IncreaseQuantity(item)">+</button>
                            </div>
                        </div>
                        <div class="col-price">@((item.BasePrice * item.Quantity).ToString("0"))</div>
                        <div style="width: 40px; text-align: center;">
                            <button class="btn btn-sm btn-outline-danger delete-btn" @onclick="() => ConfirmDelete(item)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                }
            }
            else
            {
                <div style="text-align: center; color: #999;">
                    No products added to the bill
                </div>
            }
        </div>


        <div class="receipt-footer">
            <!-- Enhanced Discount Section -->
            <div class="discount-section">
                <!-- Default Discounts -->
                @if (businessDetails?.DefaultDiscounts?.Any() == true)
                {
                    <div class="mb-3">
                        <h6>Standard Discounts:</h6>
                        <div class="discount-actions">
                            @foreach (var discount in businessDetails.DefaultDiscounts)
                            {
                                <button class="btn btn-outline-primary btn-sm"
                                @onclick="() => ApplyStandardDiscount(discount)">
                                    @discount.Name (@discount.Value@(discount.IsPercentage ? "%" : ""))
                                </button>
                            }
                        </div>
                    </div>
                }

                <!-- Custom Discount -->
                <div class="mb-3">
                    <h6>Custom Discount:</h6>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="input-group col-md-12 mb-2">
                                <input type="number" class="form-control" @bind="customDiscountValue"
                                placeholder="Discount value" style="padding: 0  0 0 10px;" />
                                <select class="form-select" @bind="customDiscountType" style="max-width: 100px;">
                                    <option value="true">%</option>
                                    <option value="false">Fixed</option>
                                </select>
                                <button class="btn btn-primary" @onclick="ApplyCustomDiscount">
                                    Apply
                                </button>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="input-group mb-2">
                                <input type="text" class="form-control" @bind="discountCode"
                                placeholder="Discount code" />
                                <button class="btn btn-primary" @onclick="ApplyDiscountCode">
                                    Apply Code
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Applied Discounts -->
                @if (appliedDiscounts.Any())
                {
                    <div class="applied-discounts">
                        <h6>Applied Discounts:</h6>
                        @foreach (var discount in appliedDiscounts)
                        {
                            <div class="applied-discount-item">
                                <span>
                                    @discount.Name (@discount.Value@(discount.IsPercentage ? "%" : ""))
                                </span>
                                <span>
                                    -@CalculateDiscountAmount(discount).ToString("0.00")
                                    <button class="btn btn-sm btn-outline-danger ms-2"
                                    @onclick="() => RemoveAppliedDiscount(discount)">
                                        <i class="bi bi-x"></i>
                                    </button>
                                </span>
                            </div>
                        }
                    </div>
                }
            </div>
            <div class="receipt-line">
                <span>Total Item(s) :</span>
                <span>@(BillService.SelectedItems?.Count() ?? 0)</span>
            </div>

            @if (appliedDiscounts.Any())
            {
                <div class="receipt-line">
                    <span>Subtotal:</span>
                    <span>@subtotal.ToString("0.00"))</span>
                </div>

                <div class="receipt-line">
                    <span>Total Discount:</span>
                    <span>-@totalDiscount.ToString("0.00"))</span>
                </div>
            }

            <div class="receipt-line">
                <span>Price After Discount:</span>
                <span>@subtotalAfterDiscount.ToString("0.00"))</span>
            </div>

            <div class="receipt-line">
                <span>Tax (@(businessDetails?.DefaultTaxRate ?? 15)%):</span>
                <span>@taxAmount.ToString("0.00"))</span>
            </div>

            <div class="receipt-line" style="font-weight: bold;">
                <span>Total Amount:</span>
                <span>@totalWithTax.ToString("0.00"))</span>
            </div>
        </div>
    </div>

    <div class="action-buttons">
        <button @onclick="ProcessPayment" disabled="@(BillService.SelectedItems == null || !BillService.SelectedItems.Any())"
        style="padding: 5px 10px; background: #4CAF50; color: white; border: none; cursor: pointer;">
            Pay Now
        </button>
        <button @onclick="ShowPrintPreview" disabled="@(BillService.SelectedItems == null || !BillService.SelectedItems.Any())"
        style="padding: 5px 10px; background: #2196F3; color: white; border: none; cursor: pointer;">
            Print Preview
        </button>
        <button @onclick="CancelOrder" style="padding: 5px 10px; background: #f44336; color: white; border: none; cursor: pointer;">
            Cancel
        </button>
    </div>
</div>

<!-- Delete Confirmation Modal -->
@if (ShowDeleteModal)
{
    <div style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.5); display: flex; justify-content: center; align-items: center; z-index: 1000;">
        <div style="background: white; padding: 20px; max-width: 400px; border-radius: 5px;">
            <h3>Remove Items</h3>
            <p>What would you like to do with <strong>@(SelectedItem?.Name)</strong>?</p>

            <div style="margin-top: 20px; display: flex; flex-direction: column; gap: 10px;">
                <button @onclick="RemoveOneQuantity"
                style="padding: 8px 15px; background: #f44336; color: white; border: none; cursor: pointer; width: 100%;">
                    Remove 1 Quantity (Current: @SelectedItem?.Quantity)
                </button>

                <button @onclick="RemoveAllQuantities"
                style="padding: 8px 15px; background: #d32f2f; color: white; border: none; cursor: pointer; width: 100%;">
                    Remove ALL Quantities (Delete Item)
                </button>

                <button @onclick="CancelDelete"
                style="padding: 8px 15px; background: #ddd; border: none; cursor: pointer; width: 100%; margin-top: 10px;">
                    Cancel
                </button>
            </div>
        </div>
    </div>
}

@if (ShowPaymentModal)
{
    <div style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.5); display: flex; justify-content: center; align-items: center; z-index: 1000;">
        <div style="background: white; padding: 20px; max-width: 400px;">
            <h3>Process Payment</h3>
            <div style="margin-bottom: 15px;">
                <label>Payment Method</label>
                <select @bind="selectedPaymentMethod" style="width: 100%; padding: 5px;">
                    <option value="Cash">Cash</option>
                    <option value="Card">Credit/Debit Card</option>
                    <option value="UPI">UPI</option>
                    <option value="Net Banking">Net Banking</option>
                </select>
            </div>
            <div style="margin-bottom: 15px;">
                <label>Amount Received</label>
                <input type="number" @bind="amountReceived" min="@totalWithTax" step="0.01" style="width: 100%; padding: 5px;" />
            </div>
            @if (amountReceived > 0)
            {
                <div style="background: #e7f3fe; padding: 10px; margin-bottom: 15px;">
                    Change: @((amountReceived - totalWithTax).ToString("0.00"))
                </div>
            }
            <div style="display: flex; justify-content: flex-end; gap: 10px;">
                <button @onclick="ClosePaymentModal" style="padding: 5px 10px; background: #ddd; border: none; cursor: pointer;">Cancel</button>
                <button @onclick="ConfirmPayment" style="padding: 5px 10px; background: #4CAF50; color: white; border: none; cursor: pointer;">Confirm</button>
            </div>
        </div>
    </div>
}

@if (showReceiptModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Receipt Preview</h5>
                <button @onclick="CloseReceiptModal" class="close-btn">&times;</button>
            </div>
            <div class="modal-body">
                <div class="print-receipt" id="receiptToPrint">
                    <!-- Store header information -->
                    <div style="text-align: center; margin-bottom: 10px;">
                        <h3 style="margin-bottom: 5px;">@businessDetails?.BusinessName.ToUpper()</h3>
                        <div style="font-size: 0.9em;">@businessDetails?.AddressLine1</div>
                        <div style="font-size: 0.9em;">@businessDetails?.AddressLine2</div>
                        <div style="font-size: 0.9em;">Tel: @businessDetails?.PhoneNumber</div>
                    </div>

                    <!-- Transaction details -->
                    <div class="dotted-line"></div>
                    <div style="text-align: center; margin: 5px 0; font-size: 0.9em;">
                        <div>Transaction # @currentTransactionId</div>
                        <div>@DateTime.Now.ToString("MMMM d, yyyy")</div>
                        <div>@DateTime.Now.ToString("h:mm tt")</div>
                    </div>
                    <div class="dotted-line"></div>

                    <!-- Staff information -->
                    <div style="display: flex; justify-content: space-between; margin: 5px 0; font-size: 0.9em;">
                        <div>Cashier: #@(currentUser?.Id ?? "3")</div>
                        <div>Manager: @(businessDetails?.ManagerName ?? "Eric Steer")</div>
                    </div>

                    <!-- Items header -->
                    <div style="display: flex; justify-content: space-between; font-weight: bold; margin: 5px 0;">
                        <div style="width: 50%;">Name</div>
                        <div style="width: 15%; text-align: center;">Qty</div>
                        <div style="width: 35%; text-align: right;">Price</div>
                    </div>

                    <!-- Items list -->
                    <div style="margin-bottom: 10px;">
                        @foreach (var item in BillService.SelectedItems)
                        {
                            <div style="display: flex; justify-content: space-between; margin-bottom: 3px;">
                                <div style="width: 50%;">@item.Name</div>
                                <div style="width: 15%; text-align: center;">@item.Quantity</div>
                                <div style="width: 35%; text-align: right;">@((item.BasePrice * item.Quantity).ToString("0.00"))</div>
                            </div>
                        }
                    </div>

                    <div class="dotted-line"></div>

                    <!-- Totals section -->
                    <div style="margin-bottom: 10px;">
                        <div style="display: flex; justify-content: space-between;">
                            <div>Sub Total:</div>
                            <div>@subtotal.ToString("0.00"))</div>
                        </div>

                        @if (appliedDiscounts.Any())
                        {
                            <div style="display: flex; justify-content: space-between;">
                                <div>Discounts:</div>
                                <div>-@totalDiscount.ToString("0.00"))</div>
                            </div>
                        }

                        <div style="display: flex; justify-content: space-between;">
                            <div>Tax (@(businessDetails?.DefaultTaxRate ?? 15)%):</div>
                            <div>@taxAmount.ToString("0.00"))</div>
                        </div>
                        <div style="display: flex; justify-content: space-between; font-weight: bold;">
                            <div>Total:</div>
                            <div>@totalWithTax.ToString("0.00"))</div>
                        </div>
                    </div>

                    <!-- Payment info -->
                    <div style="margin-bottom: 10px;">
                        <div style="display: flex; justify-content: space-between;">
                            <div>@selectedPaymentMethod:</div>
                            <div>@amountReceived.ToString("0.00"))</div>
                        </div>
                        <div style="display: flex; justify-content: space-between;">
                            <div>Change:</div>
                            <div>@((amountReceived - totalWithTax).ToString("0.00"))</div>
                        </div>
                    </div>

                    <div class="dotted-line"></div>

                    <!-- QR Code -->
                    @if (businessDetails?.IncludeQRCode == true)
                    {
                        <div class="code-container">
                            <img class="qr-code-img" src="@qrCodeImageSrc" alt="Transaction QR Code" />
                        </div>
                    }

                    <!-- Barcode -->
                    @if (businessDetails?.IncludeBarcode == true)
                    {
                        <div class="code-container">
                            <img class="barcode-img" src="@barcodeImageSrc" alt="Transaction barcode" />
                        </div>
                    }

                    <!-- Thank you message -->
                    <div style="text-align: center; margin-top: 15px; font-weight: bold;">
                        THANK YOU!
                    </div>
                    <div style="text-align: center; font-size: 0.9em;">
                        Glad to see you again!
                    </div>
                </div>
            </div>
            <div class="modal-footer no-print">
                <button @onclick="PrintReceipt" class="btn btn-primary">
                    <i class="bi bi-printer"></i> Print Receipt
                </button>
                <button @onclick="CloseReceiptModal" class="btn btn-secondary">Close</button>
                @if (!ShowPaymentModal)
                {
                    <button @onclick="ProcessPaymentFromPreview" class="btn btn-success">
                        <i class="bi bi-credit-card"></i> Proceed to Payment
                    </button>
                }
            </div>
        </div>
    </div>
}

@code {
    private BusinessDetails? businessDetails;
    private bool showReceiptModal = false;
    private string currentTransactionId = Guid.NewGuid().ToString().Substring(0, 8).ToUpper();
    private RateItem? SelectedItem;
    private bool ShowDeleteModal = false;
    private bool ShowPaymentModal = false;
    private string selectedPaymentMethod = "Cash";
    private decimal amountReceived = 0;
    private bool isInitialized = false;
    private bool isLoading = true;
    private string qrCodeImageSrc = string.Empty;
    private string barcodeImageSrc = string.Empty;
    private CurrentUser? currentUser;

    // Discount related variables
    private List<Discount> appliedDiscounts = new();
    private decimal customDiscountValue = 0;
    private bool customDiscountType = true; // true=percentage, false=fixed
    private string discountCode = "";

    // Calculated totals
    private decimal subtotal => BillService.SelectedItems?.Sum(item => item.BasePrice * item.Quantity) ?? 0;
    private decimal totalDiscount => appliedDiscounts.Sum(d => CalculateDiscountAmount(d));
    private decimal subtotalAfterDiscount =>
         Math.Max(subtotal - totalDiscount, 0); 
    private decimal taxRate => (businessDetails?.DefaultTaxRate ?? 15) / 100m;
    private decimal taxAmount => subtotalAfterDiscount * taxRate;
    private decimal totalWithTax => subtotalAfterDiscount + taxAmount;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isInitialized = true;
        }

        // Generate codes whenever receipt modal is shown
        if (showReceiptModal && isInitialized)
        {
            await Task.Delay(100); // Small delay for rendering
            await GenerateQRCode();
            await GenerateBarcode();
        }
    }

    private async Task GenerateQRCode()
    {
        try
        {
            if (businessDetails?.IncludeQRCode == true)
            {
                var qrData = new
                {
                    TransactionId = currentTransactionId,
                    DateTime = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss"),
                    TotalAmount = totalWithTax,
                    TaxAmount = taxAmount,
                    Items = BillService.SelectedItems?.Select(i => new { i.Name, i.Quantity, i.BasePrice }),
                    Discounts = appliedDiscounts.Select(d => new { d.Name, d.Value, d.IsPercentage })
                };

                var jsonData = System.Text.Json.JsonSerializer.Serialize(qrData);
                qrCodeImageSrc = await GenerateQRCodeImage(jsonData);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating QR code: {ex.Message}");
        }
    }

    private async Task<string> GenerateQRCodeImage(string data)
    {
        using var qrGenerator = new QRCodeGenerator();
        using var qrCodeData = qrGenerator.CreateQrCode(data, QRCodeGenerator.ECCLevel.Q);
        using var qrCode = new PngByteQRCode(qrCodeData);
        var qrCodeBytes = qrCode.GetGraphic(20);
        return $"data:image/png;base64,{Convert.ToBase64String(qrCodeBytes)}";
    }

    private async Task GenerateBarcode()
    {
        try
        {
            if (businessDetails?.IncludeBarcode == true)
            {
                barcodeImageSrc = await GenerateBarcodeImage(currentTransactionId);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating barcode: {ex.Message}");
        }
    }

    private async Task<string> GenerateBarcodeImage(string data)
    {
        try
        {
            var writer = new BarcodeWriterPixelData
                {
                    Format = BarcodeFormat.CODE_128,
                    Options = new EncodingOptions
                    {
                        Height = 60,
                        Width = 250,
                        Margin = 0
                    }
                };

            var pixelData = writer.Write(data);

            // Convert to base64
            using var bitmap = new System.Drawing.Bitmap(pixelData.Width, pixelData.Height, System.Drawing.Imaging.PixelFormat.Format32bppRgb);
            using var ms = new MemoryStream();

            // Lock the bitmap's bits
            var bitmapData = bitmap.LockBits(new System.Drawing.Rectangle(0, 0, pixelData.Width, pixelData.Height),
                System.Drawing.Imaging.ImageLockMode.WriteOnly,
                System.Drawing.Imaging.PixelFormat.Format32bppRgb);

            try
            {
                // Copy the data from the pixelData to the bitmap
                System.Runtime.InteropServices.Marshal.Copy(pixelData.Pixels, 0, bitmapData.Scan0, pixelData.Pixels.Length);
            }
            finally
            {
                bitmap.UnlockBits(bitmapData);
            }

            bitmap.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
            return $"data:image/png;base64,{Convert.ToBase64String(ms.ToArray())}";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Barcode generation error: {ex.Message}");
            return string.Empty;
        }
    }

    private async Task ShowPrintPreview()
    {
        if (BillService.SelectedItems == null || !BillService.SelectedItems.Any())
            return;

        // Generate a new transaction ID for the preview
        currentTransactionId = Guid.NewGuid().ToString().Substring(0, 8).ToUpper();
        showReceiptModal = true;

        // Ensure UI updates before generating codes
        StateHasChanged();
        await Task.Delay(50);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            businessDetails = await AdminService.GetBusinessDetails();
            currentUser = await AdminService.GetCurrentUserAsync();
        }
        catch
        {
            // Fallback values
            businessDetails = new BusinessDetails
                {
                    BusinessName = "SUPERMARKET",
                    ManagerName = "Eric Steer",
                    IncludeBarcode = true,
                    IncludeQRCode = true,
                    DefaultDiscounts = new List<Discount>
                {
                    new Discount { Name = "Senior Citizen", Value = 10, IsPercentage = true },
                    new Discount { Name = "Student", Value = 5, IsPercentage = true },
                    new Discount { Name = "Festival", Value = 50, IsPercentage = false }
                }
                };
            currentUser = new CurrentUser { Id = "3", Name = "Cashier" };
        }
        finally
        {
            isLoading = false;
        }

        BillService.OnChange += async () =>
        {
            await InvokeAsync(StateHasChanged);
        };
    }

    private decimal CalculateDiscountAmount(Discount discount)
    {
        if (discount.IsPercentage)
        {
            return subtotal * (discount.Value / 100m);
        }
        return discount.Value;
    }

    private async Task IncreaseQuantity(RateItem item)
    {
        item.Quantity++;
        await BillService.UpdateItemAsync(item);
        StateHasChanged();
    }

    private async Task DecreaseQuantity(RateItem item)
    {
        if (item.Quantity > 1)
        {
            item.Quantity--;
            await BillService.UpdateItemAsync(item);
            StateHasChanged();
        }
    }

    private void ConfirmDelete(RateItem item)
    {
        SelectedItem = item;
        ShowDeleteModal = true;
        StateHasChanged();
    }

    private async Task RemoveOneQuantity()
    {
        if (SelectedItem != null)
        {
            await BillService.RemoveItemAsync(SelectedItem);
        }
        ShowDeleteModal = false;
        StateHasChanged();
    }

    private async Task RemoveAllQuantities()
    {
        if (SelectedItem != null)
        {
            await BillService.RemoveItemCompletelyAsync(SelectedItem);
        }
        ShowDeleteModal = false;
        StateHasChanged();
    }

    private void CancelDelete()
    {
        SelectedItem = null;
        ShowDeleteModal = false;
        StateHasChanged();
    }

    private void ProcessPayment()
    {
        amountReceived = totalWithTax;
        ShowPaymentModal = true;
        StateHasChanged();
    }

    private void ClosePaymentModal()
    {
        ShowPaymentModal = false;
        StateHasChanged();
    }

    private async Task ConfirmPayment()
    {
        try
        {

            var transaction = new BusinessTransaction
                {
                    TransactionId = currentTransactionId,
                    Items = BillService.SelectedItems.Select(i => new TransactionItem
                    {
                        ProductName = i.Name,
                        UnitPrice = i.BasePrice,
                        Quantity = i.Quantity
                    }).ToList(),
                    SubTotal = subtotal,
                    Discount = totalDiscount,
                    Tax = taxAmount,
                    Total = totalWithTax,
                    PaymentMethod = selectedPaymentMethod,
                    AmountReceived = amountReceived,
                    ChangeAmount = amountReceived - totalWithTax,
                    TransactionDate = DateTime.Now,
                    AppliedDiscounts = appliedDiscounts
                };

            
            await TransactionService.SaveTransactionAsync(transaction);
            await BillService.ClearCart();
            
            appliedDiscounts.Clear();
           
        }
       
       		
     catch (Exception ex)
    {
            // Handle error (log/show message)
            Console.WriteLine($"Payment failed: {ex.Message}");
        }
    finally
    {
            ShowPaymentModal = false;
        }
        // Show receipt after payment
        showReceiptModal = false;
    }


    private async Task CancelOrder()
    {
        if (BillService.SelectedItems != null && BillService.SelectedItems.Any())
        {
            await BillService.ClearCart();
        }
    }

    private void CloseReceiptModal()
    {
        showReceiptModal = false;
        currentTransactionId = Guid.NewGuid().ToString().Substring(0, 8).ToUpper();
    }

    private async Task PrintReceipt()
    {
        try
        {
            // Ensure codes are generated before printing
            if (businessDetails?.IncludeBarcode == true || businessDetails?.IncludeQRCode == true)
            {
                await Task.WhenAll(
                    businessDetails.IncludeQRCode ? GenerateQRCode() : Task.CompletedTask,
                    businessDetails.IncludeBarcode ? GenerateBarcode() : Task.CompletedTask
                );
                await Task.Delay(100); // Small delay to ensure codes are rendered
            }

            await JS.InvokeVoidAsync("printReceipt");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error printing receipt: {ex.Message}");
        }
        finally
        {
            CloseReceiptModal();
            NavigationManager.NavigateTo("/order-history");
        }
    }

    private async Task ProcessPaymentFromPreview()
    {
        showReceiptModal = false;
        await Task.Delay(50); // Small delay for modal transition
        ProcessPayment();
    }

    // Discount related methods
    private void ApplyStandardDiscount(Discount discount)
    {
        if (!appliedDiscounts.Any(d => d.Name == discount.Name))
        {
            appliedDiscounts.Add(new Discount
                {
                    Name = discount.Name,
                    Value = discount.Value,
                    IsPercentage = discount.IsPercentage,
                    Code = discount.Code
                });
            StateHasChanged();
        }
    }

    private void ApplyCustomDiscount()
    {
        if (customDiscountValue > 0)
        {
            appliedDiscounts.Add(new Discount
                {
                    Name = "Custom Discount",
                    Value = customDiscountValue,
                    IsPercentage = customDiscountType,
                    Code = "CUSTOM"
                });
            customDiscountValue = 0;
            StateHasChanged();
        }
    }

    private void ApplyDiscountCode()
    {
        if (!string.IsNullOrWhiteSpace(discountCode))
        {
            // Check if code matches any default discounts
            var defaultDiscount = businessDetails?.DefaultDiscounts?
                .FirstOrDefault(d => d.Code?.Equals(discountCode, StringComparison.OrdinalIgnoreCase) == true);

            if (defaultDiscount != null)
            {
                ApplyStandardDiscount(defaultDiscount);
                discountCode = "";
            }
            else
            {
                // Handle invalid code (show message to user)
            }
        }
    }

    private void RemoveAppliedDiscount(Discount discount)
    {
        appliedDiscounts.Remove(discount);
        StateHasChanged();
    }
}