@page "/bills"
@inject BillService BillService
@inject NavigationManager NavigationManager
@inject ITransactionService TransactionService
@inject IAdminService AdminService
@inject IJSRuntime  JS 
@rendermode InteractiveServer

<style>
    /* Main receipt container - now full height and fixed */
    .receipt-container {
        font-family: 'Courier New', monospace;
        margin: 0 auto;
        max-width: 500px;
        min-height: 80vh;
        padding: 20px;
        background: white;
        box-sizing: border-box;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    /* Content area that will scroll */
    .receipt-content {
        flex: 1;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
    }

    .receipt-line {
        display: flex;
        justify-content: space-between;
        margin-bottom: 5px;
    }

    .receipt-footer {
        margin-top: auto;
        border-top: 1px dashed #000;
        padding-top: 10px;
    }

    .quantity-control {
        display: inline-flex;
        align-items: center;
        gap: 5px;
    }

    .action-buttons {
        display: flex;
        gap: 10px;
        margin-top: 20px;
        justify-content: center;
    }

    .product-row {
        display: flex;
        margin: 3px 0;
        padding: 0 10px;
        gap: 10px;
    }

    .col-number {
        width: 50px;
        text-align: left;
    }

    .col-name {
        flex: 1;
        text-align: left;
        padding-left: 5px;
    }

    .col-qty {
        width: 10px;
        text-align: center;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .col-price {
        width: 170px;
        text-align: center;
        margin-left: 3px;
    }

    .qty-control {
        text-align: left;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .qty-btn {
        border: none;
        background: none;
        cursor: pointer;
        font-weight: bold;
        padding: 0 5px;
    }

    /* Scrollable product list */
    .product-list-container {
        max-height: 25rem;
        overflow-y: auto;
        margin-bottom: 20px;
        padding: 0 5px;
        flex-shrink: 0;
    }

    .product-list-header {
        border-bottom: 3px solid #eee;
        font-weight: bold;
        margin-bottom: 5px;
        padding: 0 10px;
        position: sticky;
        top: 0;
        background: white;
        z-index: 1;
    }

    @@media print {
        body * {
            visibility: hidden;
        }

        .print-receipt, .print-receipt * {
            visibility: visible;
        }

        .print-receipt {
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
            margin: 0;
            padding: 10px;
            box-shadow: none;
            border: none;
        }

        .no-print {
            display: none !important;
        }

        .barcode-img {
            max-width: 200px;
            height: auto;
        }
    }

    /* Barcode display */
    .barcode-container {
        text-align: center;
        margin: 10px 0;
    }

    .barcode-img {
        max-width: 100%;
        height: 60px;
    }

    .action-buttons {
        display: flex;
        gap: 10px;
        margin-top: 20px;
        justify-content: center;
        flex-wrap: wrap;
    }

        .action-buttons button {
            padding: 8px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s;
            min-width: 120px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 5px;
        }

            .action-buttons button:disabled {
                opacity: 0.6;
                cursor: not-allowed;
            }

            .action-buttons button i {
                font-size: 1rem;
            }
</style>

<div class="receipt-container">
    <div class="receipt-content">
        <div class="product-list-container">
            <div class="product-list-header receipt-line">
                <span>#</span>
                <span class="product-name">Name</span>
                <span class="product-qty">Qt.</span>
                <span class="product-price">Price</span>
                <span>Action</span>
            </div>

            @if (BillService.SelectedItems != null && BillService.SelectedItems.Any())
            {
                @foreach (var (item, index) in BillService.SelectedItems.Select((item, index) => (item, index + 1)))
                {
                    <div class="product-row">
                        <div class="col-number">@index</div>
                        <div class="col-name">@item.Name</div>
                        <div class="col-qty">
                            <div class="qty-control">
                                <button class="qty-btn" @onclick="() => DecreaseQuantity(item)">-</button>
                                @item.Quantity
                                <button class="qty-btn" @onclick="() => IncreaseQuantity(item)">+</button>
                            </div>
                        </div>
                        <div class="col-price">@((item.BasePrice * item.Quantity).ToString("0"))</div>
                        <div style="width: 40px; text-align: center;">
                            <button class="btn btn-sm btn-outline-danger delete-btn" @onclick="() => ConfirmDelete(item)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                }
            }
            else
            {
                <div style="text-align: center; color: #999;">
                    No products added to the bill
                </div>
            }
        </div>

        <div class="receipt-footer">
            <div class="receipt-line">
                <span>Total Item(s) :</span>
                <span>@(BillService.SelectedItems?.Count() ?? 0)</span>
            </div>
            <div class="receipt-line">
                <span>Discount</span>
                <span>
                    <input type="number" @bind="discountValue" @bind:event="oninput" style="width: 50px; text-align: right;" />
                    @if (isPercentageDiscount)
                    {
                        <span>%</span>
                    }
                    <button @onclick="ToggleDiscountType" style="border: none; background: none; cursor: pointer;">↻</button>
                </span>
            </div>
            <div class="receipt-line">
                <span>Price : :</span>
                <span>@(BillService.TotalAmount.ToString("0"))</span>
            </div>
            <div class="receipt-line">
                <span>Gross Price (Inc 15% Tax)</span>
                <span>@_totalWithTax.ToString("0.00")</span>
            </div>
        </div>
    </div>

    <div class="action-buttons">
        <button @onclick="ProcessPayment" disabled="@(BillService.SelectedItems == null || !BillService.SelectedItems.Any())"
                style="padding: 5px 10px; background: #4CAF50; color: white; border: none; cursor: pointer;">
            Pay Now
        </button>
        <button @onclick="ShowPrintPreview" disabled="@(BillService.SelectedItems == null || !BillService.SelectedItems.Any())"
                style="padding: 5px 10px; background: #2196F3; color: white; border: none; cursor: pointer;">
            Print Preview
        </button>
        <button @onclick="CancelOrder" style="padding: 5px 10px; background: #f44336; color: white; border: none; cursor: pointer;">
            Cancel
        </button>
    </div>
</div>

<!-- Delete Confirmation Modal -->
@if (ShowDeleteModal)
{
    <div style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.5); display: flex; justify-content: center; align-items: center; z-index: 1000;">
        <div style="background: white; padding: 20px; max-width: 400px; border-radius: 5px;">
            <h3>Remove Items</h3>
            <p>What would you like to do with <strong>@(SelectedItem?.Name)</strong>?</p>

            <div style="margin-top: 20px; display: flex; flex-direction: column; gap: 10px;">
                <button @onclick="RemoveOneQuantity"
                        style="padding: 8px 15px; background: #f44336; color: white; border: none; cursor: pointer; width: 100%;">
                    Remove 1 Quantity (Current: @SelectedItem?.Quantity)
                </button>

                <button @onclick="RemoveAllQuantities"
                        style="padding: 8px 15px; background: #d32f2f; color: white; border: none; cursor: pointer; width: 100%;">
                    Remove ALL Quantities (Delete Item)
                </button>

                <button @onclick="CancelDelete"
                        style="padding: 8px 15px; background: #ddd; border: none; cursor: pointer; width: 100%; margin-top: 10px;">
                    Cancel
                </button>
            </div>
        </div>
    </div>
}

@if (ShowPaymentModal)
{
    <div style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.5); display: flex; justify-content: center; align-items: center; z-index: 1000;">
        <div style="background: white; padding: 20px; max-width: 400px;">
            <h3>Process Payment</h3>
            <div style="margin-bottom: 15px;">
                <label>Payment Method</label>
                <select @bind="selectedPaymentMethod" style="width: 100%; padding: 5px;">
                    <option value="Cash">Cash</option>
                    <option value="Card">Credit/Debit Card</option>
                    <option value="UPI">UPI</option>
                    <option value="Net Banking">Net Banking</option>
                </select>
            </div>
            <div style="margin-bottom: 15px;">
                <label>Amount Received</label>
                <input type="number" @bind="amountReceived" min="@_totalWithTax" step="0.01" style="width: 100%; padding: 5px;" />
            </div>
            @if (amountReceived > 0)
            {
                <div style="background: #e7f3fe; padding: 10px; margin-bottom: 15px;">
                    Change: @((amountReceived - _totalWithTax).ToString("0.00"))
                </div>
            }
            <div style="display: flex; justify-content: flex-end; gap: 10px;">
                <button @onclick="ClosePaymentModal" style="padding: 5px 10px; background: #ddd; border: none; cursor: pointer;">Cancel</button>
                <button @onclick="ConfirmPayment" style="padding: 5px 10px; background: #4CAF50; color: white; border: none; cursor: pointer;">Confirm</button>
            </div>
        </div>
    </div>
}
@if (showReceiptModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Receipt Preview</h5>
                <button @onclick="CloseReceiptModal" class="close-btn">&times;</button>
            </div>
            <div class="modal-body">
                <div class="print-receipt" id="receiptToPrint">
                    <!-- Receipt header from business settings -->
                    <div style="text-align: center; white-space: pre-line; margin-bottom: 10px;">
                        @if (businessDetails != null)
                        {
                            @businessDetails.ReceiptHeader
                        }
                        else
                        {
                            <text>My Business<br>123 Business Street<br>City, Country</text>
                        }
                    </div>

                    <div style="text-align: center; margin-bottom: 10px;">
                        <div>Transaction # @currentTransactionId</div>
                        <div>@DateTime.Now.ToString("MMMM d, yyyy")</div>
                        <div>@DateTime.Now.ToString("h:mm tt")</div>
                    </div>

                    <hr style="border-top: 1px dashed #000; margin: 5px 0;">

                    <!-- Items list -->
                    <div style="margin-bottom: 10px;">
                        @foreach (var item in BillService.SelectedItems)
                        {
                            <div style="display: flex; justify-content: space-between; margin-bottom: 3px;">
                                <div>
                                    @item.Name
                                    @if (item.Quantity > 1)
                                    {
                                        <text>(x@(item.Quantity))</text>
                                    }
                                </div>
                                <div>@((item.BasePrice * item.Quantity).ToString("0.00"))</div>
                            </div>
                        }
                    </div>

                    <hr style="border-top: 1px dashed #000; margin: 5px 0;">

                    <!-- Totals -->
                    <div style="margin-bottom: 10px;">
                        <div style="display: flex; justify-content: space-between;">
                            <div>Sub Total:</div>
                            <div>@_totalAmount.ToString("0.00"))</div>
                        </div>
                        <div style="display: flex; justify-content: space-between;">
                            <div>Discount:</div>
                            <div>@discountAmount.ToString("0.00"))</div>
                        </div>
                        <div style="display: flex; justify-content: space-between;">
                            <div>Tax (@(businessDetails?.DefaultTaxRate ?? 15)%:</div>
                            <div>@((_totalWithTax - subtotalAfterDiscount).ToString("0.00"))</div>
                        </div>
                        <div style="display: flex; justify-content: space-between; font-weight: bold;">
                            <div>Total:</div>
                            <div>@_totalWithTax.ToString("0.00"))</div>
                        </div>
                    </div>

                    <!-- Payment info -->
                    <div style="margin-bottom: 10px;">
                        <div style="display: flex; justify-content: space-between;">
                            <div>@selectedPaymentMethod:</div>
                            <div>@amountReceived.ToString("0.00"))</div>
                        </div>
                        <div style="display: flex; justify-content: space-between;">
                            <div>Change:</div>
                            <div>@((amountReceived - _totalWithTax).ToString("0.00"))</div>
                        </div>
                    </div>

                    <!-- Barcode -->
                    @if (businessDetails?.IncludeBarcode == true)
                    {
                        <div class="barcode-container">
                            <img class="barcode-img" id="receiptBarcode" alt="Transaction barcode" />
                        </div>
                    }

                    <!-- Footer -->
                    <div style="text-align: center; white-space: pre-line; margin-top: 10px; font-size: 0.8em;">
                        @if (businessDetails != null)
                        {
                            @businessDetails.ReceiptFooter
                        }
                        else
                        {
                            <text>Thank you for your business!<br>Items can be returned within 30 days with receipt.</text>
                        }
                    </div>
                </div>
            </div>
            <div class="modal-footer no-print">
                <button @onclick="PrintReceipt" class="btn btn-primary">
                    <i class="bi bi-printer"></i> Print Receipt
                </button>
                <button @onclick="CloseReceiptModal" class="btn btn-secondary">Close</button>
                @if (!ShowPaymentModal)
                {
                    <button @onclick="ProcessPaymentFromPreview" class="btn btn-success">
                        <i class="bi bi-credit-card"></i> Proceed to Payment
                    </button>
                }
            </div>
        </div>
    </div>
}


@code {
    private BusinessDetails? businessDetails;
    private bool showReceiptModal = false;
    private string currentTransactionId = Guid.NewGuid().ToString().Substring(0, 8).ToUpper();
    private RateItem? SelectedItem;
    private bool ShowDeleteModal = false;
    private bool ShowPaymentModal = false;
    private decimal discountValue = 0;
    private bool isPercentageDiscount = true;
    private string selectedPaymentMethod = "Cash";
    private decimal amountReceived = 0;
    private bool isInitialized = false;
    private bool isLoading = true;
    private decimal currentTotalAmount = 0;
    private decimal currentTotalWithTax = 0;


    private decimal discountAmount => isPercentageDiscount
        ? BillService.TotalAmount * (discountValue / 100m)
        : discountValue;

    private decimal subtotalAfterDiscount => BillService.TotalAmount - discountAmount;
     private decimal _totalAmount = 0;
    private decimal _totalWithTax = 0;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            businessDetails = await AdminService.GetBusinessDetails();
        }
        catch
        {
            // Fallback to default values
            businessDetails = new BusinessDetails();
        }
        finally
        {
            isLoading = false;
        }

        // Rest of your initialization...
        await UpdateTotals();
        BillService.OnChange += async () =>
        {
            await UpdateTotals();
            await InvokeAsync(StateHasChanged);
        };
    }
    private void ProcessPaymentFromPreview()
    {
        showReceiptModal = false;
        ProcessPayment();
    }

    private async Task ShowPrintPreview()
    {
        currentTransactionId = Guid.NewGuid().ToString().Substring(0, 8).ToUpper();

        if (businessDetails?.IncludeBarcode == true)
        {
            await JS.InvokeVoidAsync("generateBarcode", "receiptBarcode", currentTransactionId);
        }

        showReceiptModal = true;
        StateHasChanged();
    }
    private async Task UpdateTotals()
    {
        // Calculate base total
        _totalAmount = BillService.SelectedItems?.Sum(item => item.BasePrice * item.Quantity) ?? 0;

        // Calculate discount
        var discount = isPercentageDiscount
            ? _totalAmount * (discountValue / 100m)
            : discountValue;

        // Calculate subtotal after discount
        var subtotal = _totalAmount - discount;

        // Calculate final total with tax
        _totalWithTax = subtotal * 1.15m;

        await InvokeAsync(StateHasChanged);
    }

    private async Task CalculateTotals()
    {
        if (BillService.SelectedItems != null && BillService.SelectedItems.Any())
        {
            currentTotalAmount = BillService.SelectedItems.Sum(item => item.BasePrice * item.Quantity);

            var discount = isPercentageDiscount
                ? currentTotalAmount * (discountValue / 100m)
                : discountValue;

            var subtotal = currentTotalAmount - discount;
            currentTotalWithTax = subtotal + (subtotal * 0.15m);
        }
        else
        {
            currentTotalAmount = 0;
            currentTotalWithTax = 0;
        }

        await InvokeAsync(StateHasChanged);
    }
    private async Task HandleBillServiceChange()
    {
        await CalculateTotals();
    }

    public void Dispose()
    {
        BillService.OnChange -= HandleBillServiceChange;
    }


    private async Task IncreaseQuantity(RateItem item)
    {
        item.Quantity++;
        await BillService.UpdateItemAsync(item);
        await UpdateTotals();
    }

    private async Task DecreaseQuantity(RateItem item)
    {
        if (item.Quantity > 1)
        {
            item.Quantity--;
            await BillService.UpdateItemAsync(item);
            await UpdateTotals();
        }
    }

    private void ConfirmDelete(RateItem item)
    {
        SelectedItem = item;
        ShowDeleteModal = true;
        StateHasChanged();
    }

    private async Task RemoveOneQuantity()
    {
        if (SelectedItem != null)
        {
            await BillService.RemoveItemAsync(SelectedItem);
        }
        ShowDeleteModal = false;
        StateHasChanged();
    }

    private async Task RemoveAllQuantities()
    {
        if (SelectedItem != null)
        {
            await BillService.RemoveItemCompletelyAsync(SelectedItem);
        }
        ShowDeleteModal = false;
        StateHasChanged();
    }

    private void CancelDelete()
    {
        SelectedItem = null;
        ShowDeleteModal = false;
        StateHasChanged();
    }

    private void ToggleDiscountType()
    {
        isPercentageDiscount = !isPercentageDiscount;
        discountValue = 0;
        StateHasChanged();
    }

    private void ProcessPayment()
    {
        amountReceived = _totalWithTax;
        ShowPaymentModal = true;
        StateHasChanged();
    }

    private void ClosePaymentModal()
    {
        ShowPaymentModal = false;
        StateHasChanged();
    }

    private async Task ConfirmPayment()
    {
        // Calculate the discount amount first
        var discount = isPercentageDiscount
            ? _totalAmount * (discountValue / 100m)
            : discountValue;

        // Calculate subtotal after discount
        var subtotal = _totalAmount - discount;

        // Calculate tax amount
        var tax = subtotal * 0.15m;

        var transaction = new BusinessTransaction
            {
                Items = BillService.SelectedItems.Select(i => new TransactionItem
                {
                    ProductName = i.Name,
                    UnitPrice = i.BasePrice,
                    Quantity = i.Quantity
                }).ToList(),
                SubTotal = _totalAmount,
                Discount = discount,
                Tax = tax,
                Total = _totalWithTax,
                PaymentMethod = selectedPaymentMethod,
                AmountReceived = amountReceived,
                ChangeAmount = amountReceived - _totalWithTax
            };
        showReceiptModal = true;

        // Generate barcode if enabled
        if (businessDetails?.IncludeBarcode == true)
        {
            await JS.InvokeVoidAsync("generateBarcode", "receiptBarcode", currentTransactionId);
        }

        await TransactionService.SaveTransactionAsync(transaction);
        await BillService.ClearCart();
        ShowPaymentModal = false;
        NavigationManager.NavigateTo("/order-history");
    }

    private async Task CancelOrder()
    {
        if (BillService.SelectedItems != null && BillService.SelectedItems.Any())
        {
            await BillService.ClearCart();
        }
        NavigationManager.NavigateTo("/", forceLoad: true);
    }
    private void CloseReceiptModal()
    {
        showReceiptModal = false;
        currentTransactionId = Guid.NewGuid().ToString().Substring(0, 8).ToUpper();
    }

    private async Task PrintReceipt()
    {
        await JS.InvokeVoidAsync("printReceipt");
        CloseReceiptModal();

        // Navigate or clear cart as needed
        NavigationManager.NavigateTo("/order-history");
    }
}


 <script>
         // Function to generate barcode using JsBarcode library
    function generateBarcode(elementId, text) {
        // Ensure JsBarcode is loaded
        if (typeof JsBarcode !== 'undefined') {
            JsBarcode(`#${elementId}`, text, {
                format: "CODE128",
                lineColor: "#000",
                width: 2,
                height: 50,
                displayValue: true,
                fontSize: 12,
                margin: 5
            });
        } else {
            console.error("JsBarcode library not loaded");
        }
    }

    // Function to handle printing
    function printReceipt() {
        window.print();
    }

    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', function() {
        // Load JsBarcode library dynamically if not already loaded
        if (typeof JsBarcode === 'undefined') {
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/jsbarcode@3.11.5/dist/JsBarcode.all.min.js';
            script.onload = function() {
                console.log("JsBarcode library loaded");
            };
            document.head.appendChild(script);
        }
    });
 </script>