@page "/bills"
@inject BillService BillService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<style>
    /* Main receipt container - now full height and fixed */
    .receipt-container {
        font-family: 'Courier New', monospace;
        margin: 0 auto;
        max-width: 500px;
        height: 95vh; /* Full viewport height */
        padding: 20px;
        background: white;
        border: 1px solid #ddd;
        box-sizing: border-box;
        display: flex;
        flex-direction: column;
        overflow: hidden; /* Prevent outer scrolling */
    }

    /* Content area that will scroll */
    .receipt-content {
        /* padding-right:10px; */
        flex: 1;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
    }

    /* .receipt-header { */
    /*     text-align: center; */
    /*     font-weight: bold; */
    /*     margin-bottom: 20px; */
    /*     border-bottom: 1px dashed #000; */
    /*     padding-bottom: 10px; */
    /* } */

    .receipt-line {
        display: flex;
        justify-content: space-between;
        margin-bottom: 5px;
    }

    .receipt-footer {
        margin-top: auto; /* Push footer to bottom */
        border-top: 1px dashed #000;
        padding-top: 10px;
    }

    .quantity-control {
        display: inline-flex;
        align-items: center;
        gap: 5px;
    }

    .action-buttons {
        display: flex;
        gap: 10px;
        margin-top: 20px;
        justify-content: center;
    }

    .product-row {
        display: flex;
        margin: 3px 0;
        padding: 0 10px;
        gap:10px;
    }

    .col-number {
        width: 50px;
        text-align: left;
    }

    .col-name {
        flex: 1;
        text-align: left;
        padding-left: 5px;
    }

    .col-qty {
        width: 10px;
        text-align: center;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .col-price {
        width: 170px;
        text-align: center;
       margin-left:3px;
    }

    .qty-control {
        /* background-color:green; */
        text-align:left;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .qty-btn {
        border: none;
        background: none;
        cursor: pointer;
        font-weight: bold;
        padding: 0 5px;
    }
   
    /* Scrollable product list */
    .product-list-container {
        max-height: 25rem; /* Fixed height for product list */
        overflow-y: auto; /* Scroll when content exceeds height */
        margin-bottom: 20px;
        padding: 0 5px;
        flex-shrink: 0; /* Prevent shrinking */
    }

    .product-list-header {
        border-bottom: 3px solid #eee;
        font-weight: bold;
        margin-bottom: 5px;
        padding: 0 10px;
        position: sticky;
        top: 0;
        background: white;
        z-index: 1;
    }

    /* Prevent body scrolling */
    body {
        overflow: hidden;
        margin: 0;
        padding: 0;
    }
</style>

<div class="receipt-container">
    <div class="receipt-content">
        @* <div class="receipt-header"> *@
        @*     Walk in customer *@
        @* </div> *@

        @* <div style="margin-bottom: 20px;"> *@
        @*     Scan bar code or enter sku number then hit enter *@
        @* </div> *@

        <div class="product-list-container">
            <div class="product-list-header receipt-line">
                <span>#</span>
                <span class="product-name">Name</span>
                <span class="product-qty">Qt.</span>
                <span class="product-price">Price</span>
                <span >Action</span> <!-- Empty column for delete button alignment -->
            </div>

            @if (BillService.SelectedItems != null && BillService.SelectedItems.Any())
            {
                @foreach (var (item, index) in BillService.SelectedItems.Select((item, index) => (item, index + 1)))
                {
                    <div class="product-row">
                        <div class="col-number">@index</div>
                        <div class="col-name">@item.Name</div>
                        <div class="col-qty">
                            <div class="qty-control">
                                <button class="qty-btn" @onclick="() => DecreaseQuantity(item)">-</button>
                                @item.Quantity
                                <button class="qty-btn" @onclick="() => IncreaseQuantity(item)">+</button>
                            </div>
                        </div>
                        <div class="col-price">@item.BasePrice.ToString("0")</div>
                        <div style="width: 40px; text-align: center;">
                            <button class="btn btn-sm btn-outline-danger delete-btn" @onclick="() => ConfirmDelete(item)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                }
            }
            else
            {
                <div style="text-align: center; color: #999;">
                    No products added to the bill
                </div>
            }
        </div>

        @* /* <div style="border-top: 1px dashed #000; margin: 10px 0;"></div> */ *@

        <div class="receipt-footer">
            <div class="receipt-line">
                <span>Total Item(s) :</span>
                <span>@BillService.SelectedItems?.Count()</span>
            </div>
            <div class="receipt-line">
                <span>Discount</span>
                <span>
                    <input type="number" @bind="discountValue" style="width: 50px; text-align: right;" />
                    @if (isPercentageDiscount)
                    {
                        <span>%</span>
                    }
                    <button @onclick="ToggleDiscountType" style="border: none; background: none; cursor: pointer;">↻</button>
                </span>
            </div>
            <div class="receipt-line">
                <span>Price : :</span>
                <span>@BillService.TotalAmount.ToString("0")</span>
            </div>
            <div class="receipt-line">
                <span>Gross Price (Inc 15% Tax)</span>
                <span>@totalWithTax.ToString("0.00")</span>
            </div>
        </div>
    </div>

    <div class="action-buttons">
        <button @onclick="ProcessPayment" disabled="@(BillService.SelectedItems == null || !BillService.SelectedItems.Any())" style="padding: 5px 10px; background: #4CAF50; color: white; border: none; cursor: pointer;">
            Pay Now
        </button>
        <button @onclick="HoldOrder" disabled="@(BillService.SelectedItems == null || !BillService.SelectedItems.Any())" style="padding: 5px 10px; background: #FFC107; color: black; border: none; cursor: pointer;">
            Hold Order
        </button>
        <button @onclick="CancelOrder" style="padding: 5px 10px; background: #f44336; color: white; border: none; cursor: pointer;">
            Cancel
        </button>
    </div>
</div>

<!-- Delete Confirmation Modal -->
@if (ShowDeleteModal)
{
    <div style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.5); display: flex; justify-content: center; align-items: center; z-index: 1000;">
        <div style="background: white; padding: 20px; max-width: 400px; border-radius: 5px;">
            <h3>Remove Items</h3>
            <p>What would you like to do with <strong>@(SelectedItem?.Name)</strong>?</p>

            <div style="margin-top: 20px; display: flex; flex-direction: column; gap: 10px;">
                <button @onclick="RemoveOneQuantity"
                        style="padding: 8px 15px; background: #f44336; color: white; border: none; cursor: pointer; width: 100%;">
                    Remove 1 Quantity (Current: @SelectedItem?.Quantity)
                </button>

                <button @onclick="RemoveAllQuantities"
                        style="padding: 8px 15px; background: #d32f2f; color: white; border: none; cursor: pointer; width: 100%;">
                    Remove ALL Quantities (Delete Item)
                </button>

                <button @onclick="CancelDelete"
                        style="padding: 8px 15px; background: #ddd; border: none; cursor: pointer; width: 100%; margin-top: 10px;">
                    Cancel
                </button>
            </div>
        </div>
    </div>
}
@if (ShowPaymentModal)
{
    <div style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.5); display: flex; justify-content: center; align-items: center; z-index: 1000;">
        <div style="background: white; padding: 20px; max-width: 400px;">
            <h3>Process Payment</h3>
            <div style="margin-bottom: 15px;">
                <label>Payment Method</label>
                <select @bind="selectedPaymentMethod" style="width: 100%; padding: 5px;">
                    <option value="Cash">Cash</option>
                    <option value="Card">Credit/Debit Card</option>
                    <option value="UPI">UPI</option>
                    <option value="Net Banking">Net Banking</option>
                </select>
            </div>
            <div style="margin-bottom: 15px;">
                <label>Amount Received</label>
                <input type="number" @bind="amountReceived" min="@totalWithTax" step="0.01" style="width: 100%; padding: 5px;" />
            </div>
            @if (amountReceived > 0)
            {
                <div style="background: #e7f3fe; padding: 10px; margin-bottom: 15px;">
                    Change: @((amountReceived - totalWithTax).ToString("0.00"))
                </div>
            }
            <div style="display: flex; justify-content: flex-end; gap: 10px;">
                <button @onclick="ClosePaymentModal" style="padding: 5px 10px; background: #ddd; border: none; cursor: pointer;">Cancel</button>
                <button @onclick="ConfirmPayment" style="padding: 5px 10px; background: #4CAF50; color: white; border: none; cursor: pointer;">Confirm</button>
            </div>
        </div>
    </div>
}

@code {
    private RateItem? SelectedItem;
    private bool ShowDeleteModal = false;
    private bool ShowPaymentModal = false;
    private decimal discountValue = 0;
    private bool isPercentageDiscount = true;
    private string selectedPaymentMethod = "Cash";
    private decimal amountReceived = 0;

    private decimal discountAmount => isPercentageDiscount
        ? BillService.TotalAmount * (discountValue / 100m)
        : discountValue;

    private decimal subtotalAfterDiscount => BillService.TotalAmount - discountAmount;
    private decimal taxAmount => subtotalAfterDiscount * 0.15m;
    private decimal totalWithTax => subtotalAfterDiscount + taxAmount;

    protected override void OnInitialized()
    {
        BillService.OnChange += async () => await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        BillService.OnChange -= async () => await InvokeAsync(StateHasChanged);
    }

    private async Task IncreaseQuantity(RateItem item)
    {
        if (item.Quantity == 0)
        {
            item.Quantity = 1;
            item.Price = item.BasePrice;
        }
        else
        {
            item.Quantity++;
            item.Price = item.BasePrice * item.Quantity;
        }
        await BillService.UpdateItemAsync(item);
    }

    private async Task DecreaseQuantity(RateItem item)
    {
        if (item.Quantity > 1)
        {
            item.Quantity--;
            item.Price = item.BasePrice * item.Quantity;
            await BillService.UpdateItemAsync(item);
        }
    }

    private void ConfirmDelete(RateItem item)
    {
        SelectedItem = item;
        ShowDeleteModal = true;
    }

   private async Task RemoveOneQuantity()
    {
        if (SelectedItem != null)
        {
            await BillService.RemoveItemAsync(SelectedItem); // This decreases quantity by 1
        }
        ShowDeleteModal = false;
    }
    private async Task RemoveAllQuantities()
    {
        if (SelectedItem != null)
        {
            await BillService.RemoveItemCompletelyAsync(SelectedItem); // This removes entire item
        }
        ShowDeleteModal = false;
    }



    private void CancelDelete()
    {
        SelectedItem = null;
        ShowDeleteModal = false;
    }

    private void ToggleDiscountType()
    {
        isPercentageDiscount = !isPercentageDiscount;
        discountValue = 0;
    }

    private void ProcessPayment()
    {
        amountReceived = totalWithTax;
        ShowPaymentModal = true;
    }

    private void ClosePaymentModal()
    {
        ShowPaymentModal = false;
    }

    private async Task ConfirmPayment()
    {
        await BillService.ClearCart();
        ShowPaymentModal = false;
        NavigationManager.NavigateTo("/orders");
    }

    private async Task HoldOrder()
    {
        await BillService.ClearCart();
        NavigationManager.NavigateTo("/orders");
    }

    private async Task CancelOrder()
    {
        if (BillService.SelectedItems != null && BillService.SelectedItems.Any())
        {
            var itemsToRemove = BillService.SelectedItems.ToList();
            foreach (var item in itemsToRemove)
            {
                await BillService.RemoveItemAsync(item);
            }
        }
        NavigationManager.NavigateTo("/", forceLoad: true);
    }
}