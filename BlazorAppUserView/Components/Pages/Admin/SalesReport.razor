@page "/salesreport"
@using System.Globalization
@inject ITransactionService TransactionService
@inject IJSRuntime JS
@implements IDisposable
@rendermode InteractiveServer

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <h3 class="mt-3">Sales Dashboard</h3>
            <div class="mb-3">
                <select class="form-select d-inline-block me-2" style="width: 120px;" @bind="timeRange">
                    <option value="day">Today</option>
                    <option value="week">This Week</option>
                    <option value="month">This Month</option>
                    <option value="year">This Year</option>
                    <option value="custom">Custom</option>
                </select>

                @if (timeRange == "custom")
                {
                    <input type="date" class="form-control d-inline-block me-2" style="width: 150px;" @bind="startDate" />
                    <span class="me-2">to</span>
                    <input type="date" class="form-control d-inline-block" style="width: 150px;" @bind="endDate" />
                }

                <button class="btn btn-primary ms-2" @onclick="LoadData" disabled="@isLoading">
                    <i class="fas fa-sync-alt"></i> @(isLoading ? "Loading..." : "Apply")
                </button>
            </div>

            @if (isLoading)
            {
                <div class="text-center my-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p>Loading data...</p>
                </div>
            }
            else
            {
                <div class="row mb-4">
                    <!-- Dashboard Cards -->
                    <div class="col-md-3 mb-3">
                        <div class="card bg-primary text-white h-100">
                            <div class="card-body">
                                <h5 class="card-title">Total Sales</h5>
                                <h2 class="card-text">@totalSales.ToString("C")</h2>
                                <p class="small mb-0">@GetComparisonText(totalSalesComparison, "sales")</p>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-3 mb-3">
                        <div class="card bg-success text-white h-100">
                            <div class="card-body">
                                <h5 class="card-title">Total Orders</h5>
                                <h2 class="card-text">@totalOrders</h2>
                                <p class="small mb-0">@GetComparisonText(totalOrdersComparison, "orders")</p>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-3 mb-3">
                        <div class="card bg-info text-white h-100">
                            <div class="card-body">
                                <h5 class="card-title">Avg. Order Value</h5>
                                <h2 class="card-text">@avgOrderValue.ToString("C")</h2>
                                <p class="small mb-0">@GetComparisonText(avgOrderValueComparison, "average")</p>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-3 mb-3">
                        <div class="card bg-warning text-dark h-100">
                            <div class="card-body">
                                <h5 class="card-title">Total Discounts</h5>
                                <h2 class="card-text">@totalDiscounts.ToString("C")</h2>
                                <p class="small mb-0">@GetComparisonText(totalDiscountsComparison, "discounts")</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Charts Row -->
                <div class="row mb-4">
                    <div class="col-md-6 mb-3">
                        <div class="card h-100">
                            <div class="card-header bg-light">
                                <h5 class="mb-0">Sales Trend</h5>
                            </div>
                            <div class="card-body">
                                <div id="salesChart" style="height: 300px;"></div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6 mb-3">
                        <div class="card h-100">
                            <div class="card-header bg-light">
                                <h5 class="mb-0">Payment Methods</h5>
                            </div>
                            <div class="card-body">
                                <div id="paymentChart" style="height: 300px;"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Order History Section -->
                <div class="card">
                    <div class="card-header bg-light d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Order History</h5>
                        <div>
                            <button class="btn btn-sm btn-primary" @onclick="DownloadBills" disabled="@isLoading">
                                <i class="fas fa-download"></i> Download
                            </button>
                            <button class="btn btn-sm btn-secondary ms-2" @onclick="PrintBills" disabled="@isLoading">
                                <i class="fas fa-print"></i> Print
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-search"></i></span>
                                <input type="text" class="form-control" placeholder="Search orders..."
                                       @bind="searchText" @bind:event="oninput" />
                            </div>
                        </div>

                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Date</th>
                                        <th>Items</th>
                                        <th class="text-end">Subtotal</th>
                                        <th class="text-end">Discount</th>
                                        <th class="text-end">Tax</th>
                                        <th class="text-end">Total</th>
                                        <th class="text-end">Payment</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (!filteredTransactions.Any())
                                    {
                                        <tr>
                                            <td colspan="7" class="text-center">No orders found</td>
                                        </tr>
                                    }
                                    else
                                    {
                                        @foreach (var transaction in filteredTransactions)
                                        {
                                            <tr @onclick="() => ShowTransactionDetails(transaction)"
                                                style="cursor: pointer;">
                                                <td>@transaction.TransactionDate.ToString("g")</td>
                                                <td>@transaction.Items.Sum(i => i.Quantity)</td>
                                                <td class="text-end">@transaction.SubTotal.ToString("C")</td>
                                                <td class="text-end">@transaction.Discount.ToString("C")</td>
                                                <td class="text-end">@transaction.Tax.ToString("C")</td>
                                                <td class="text-end">@transaction.Total.ToString("C")</td>
                                                <td class="text-end">@transaction.PaymentMethod</td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Transaction Details Modal -->
@if (selectedTransaction != null)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Order Details - @selectedTransaction.Id</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <p><strong>Date:</strong> @selectedTransaction.TransactionDate.ToString("f")</p>
                            <p><strong>Customer:</strong> @(selectedTransaction.CustomerName ?? "Walk-in")</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Payment Method:</strong> @selectedTransaction.PaymentMethod</p>
                            <p><strong>Total:</strong> @selectedTransaction.Total.ToString("C")</p>
                        </div>
                    </div>

                    <table class="table table-bordered">
                        <thead class="table-light">
                            <tr>
                                <th>Item</th>
                                <th>Quantity</th>
                                <th>Unit Price</th>
                                <th>Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in selectedTransaction.Items)
                            {
                                <tr>
                                    <td>@item.ProductName</td>
                                    <td>@item.Quantity</td>
                                    <td>@item.UnitPrice.ToString("C")</td>
                                    <td>@((item.Quantity * item.UnitPrice).ToString("C"))</td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <div class="row mt-3">
                        <div class="col-md-6 offset-md-6">
                            <table class="table table-bordered">
                                <tr>
                                    <th>Subtotal:</th>
                                    <td class="text-end">@selectedTransaction.SubTotal.ToString("C")</td>
                                </tr>
                                <tr>
                                    <th>Discount:</th>
                                    <td class="text-end">@selectedTransaction.Discount.ToString("C")</td>
                                </tr>
                                <tr>
                                    <th>Tax:</th>
                                    <td class="text-end">@selectedTransaction.Tax.ToString("C")</td>
                                </tr>
                                <tr class="table-active">
                                    <th>Total:</th>
                                    <td class="text-end">@selectedTransaction.Total.ToString("C")</td>
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="() => PrintReceipt(selectedTransaction)">
                        <i class="fas fa-print"></i> Print Receipt
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<BusinessTransaction> transactions = new();
    private string searchText = string.Empty;
    private BusinessTransaction? selectedTransaction;
    private string timeRange = "week";
    private DateTime? startDate;
    private DateTime? endDate;
    private bool isLoading = false;

    // Dashboard metrics
    private decimal totalSales;
    private decimal totalSalesComparison;
    private int totalOrders;
    private decimal totalOrdersComparison;
    private decimal avgOrderValue;
    private decimal avgOrderValueComparison;
    private decimal totalDiscounts;
    private decimal totalDiscountsComparison;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // Set date range based on selection
            var now = DateTime.Now;
            DateTime comparisonStartDate;

            switch (timeRange)
            {
                case "day":
                    startDate = now.Date;
                    endDate = now.Date.AddDays(1).AddTicks(-1);
                    comparisonStartDate = now.Date.AddDays(-1);
                    break;
                case "week":
                    startDate = now.Date.AddDays(-(int)now.DayOfWeek);
                    endDate = startDate.Value.AddDays(7).AddTicks(-1);
                    comparisonStartDate = startDate.Value.AddDays(-7);
                    break;
                case "month":
                    startDate = new DateTime(now.Year, now.Month, 1);
                    endDate = startDate.Value.AddMonths(1).AddTicks(-1);
                    comparisonStartDate = startDate.Value.AddMonths(-1);
                    break;
                case "year":
                    startDate = new DateTime(now.Year, 1, 1);
                    endDate = startDate.Value.AddYears(1).AddTicks(-1);
                    comparisonStartDate = startDate.Value.AddYears(-1);
                    break;
                case "custom":
                    if (!startDate.HasValue || !endDate.HasValue)
                    {
                        timeRange = "week";
                        await LoadData();
                        return;
                    }
                    endDate = endDate.Value.Date.AddDays(1).AddTicks(-1);
                    var customRangeDays = (endDate.Value - startDate.Value).TotalDays;
                    comparisonStartDate = startDate.Value.AddDays(-customRangeDays - 1);
                    break;
                default:
                    startDate = now.Date.AddDays(-(int)now.DayOfWeek);
                    endDate = startDate.Value.AddDays(7).AddTicks(-1);
                    comparisonStartDate = startDate.Value.AddDays(-7);
                    break;
            }

            // Load current period data
            transactions = await TransactionService.GetTransactionsByDateAsync(startDate, endDate);

            // Load comparison period data for metrics
            var comparisonTransactions = await TransactionService.GetTransactionsByDateAsync(
                comparisonStartDate, startDate.Value.AddTicks(-1));

            // Calculate metrics
            totalSales = transactions.Sum(t => t.Total);
            var comparisonTotalSales = comparisonTransactions.Sum(t => t.Total);
            totalSalesComparison = comparisonTotalSales > 0 ?
                (totalSales - comparisonTotalSales) / comparisonTotalSales * 100 : 0;

            totalOrders = transactions.Count;
            var comparisonTotalOrders = comparisonTransactions.Count;
            totalOrdersComparison = comparisonTotalOrders > 0 ?
                (totalOrders - comparisonTotalOrders) / (decimal)comparisonTotalOrders * 100 : 0;

            avgOrderValue = totalOrders > 0 ? totalSales / totalOrders : 0;
            var comparisonAvgOrderValue = comparisonTotalOrders > 0 ?
                comparisonTotalSales / comparisonTotalOrders : 0;
            avgOrderValueComparison = comparisonAvgOrderValue > 0 ?
                (avgOrderValue - comparisonAvgOrderValue) / comparisonAvgOrderValue * 100 : 0;

            totalDiscounts = transactions.Sum(t => t.Discount);
            var comparisonTotalDiscounts = comparisonTransactions.Sum(t => t.Discount);
            totalDiscountsComparison = comparisonTotalDiscounts > 0 ?
                (totalDiscounts - comparisonTotalDiscounts) / comparisonTotalDiscounts * 100 : 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (transactions.Any())
        {
            await RenderCharts();
        }
    }

    private async Task RenderCharts()
    {
        try
        {
            if (!transactions.Any()) return;

            // Group sales by day for the chart
            var salesByDay = transactions
                .GroupBy(t => t.TransactionDate.Date)
                .OrderBy(g => g.Key)
                .Select(g => new { Date = g.Key, Sales = g.Sum(t => t.Total) })
                .ToList();

            // Group payments by method for the chart
            var paymentsByMethod = transactions
                .GroupBy(t => t.PaymentMethod)
                .Select(g => new { Method = g.Key, Amount = g.Sum(t => t.Total) })
                .ToList();

            // Prepare data for JavaScript charts
            var salesLabels = salesByDay.Select(x => x.Date.ToString("MMM dd")).ToArray();
            var salesData = salesByDay.Select(x => x.Sales).ToArray();

            var paymentMethods = paymentsByMethod.Select(x => x.Method).ToArray();
            var paymentAmounts = paymentsByMethod.Select(x => x.Amount).ToArray();

            await JS.InvokeVoidAsync("renderSalesReportCharts",
                new { salesLabels, salesData, paymentMethods, paymentAmounts });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error rendering charts: {ex.Message}");
        }
    }

    private string GetComparisonText(decimal percentage, string metricName)
    {
        if (percentage == 0) return "No change in " + metricName;

        var direction = percentage > 0 ? "increase" : "decrease";
        var absPercentage = Math.Abs(percentage).ToString("0.0");

        return $"{absPercentage}% {direction} from previous period";
    }

    private IEnumerable<BusinessTransaction> filteredTransactions => transactions?
        .Where(t => string.IsNullOrEmpty(searchText) ||
                   t.Id.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                   (t.CustomerName != null && t.CustomerName.Contains(searchText, StringComparison.OrdinalIgnoreCase)) ||
                   t.Items.Any(i => i.ProductName.Contains(searchText, StringComparison.OrdinalIgnoreCase)))
        .OrderByDescending(t => t.TransactionDate) ?? Enumerable.Empty<BusinessTransaction>();

    private void ShowTransactionDetails(BusinessTransaction transaction)
    {
        selectedTransaction = transaction;
    }

    private void CloseModal()
    {
        selectedTransaction = null;
    }

    private async Task PrintReceipt(BusinessTransaction transaction)
    {
        try
        {
            await JS.InvokeVoidAsync("printReceipt", transaction.Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error printing receipt: {ex.Message}");
        }
    }

    private async Task DownloadBills()
    {
        try
        {
            var csvContent = "Bill ID,Customer,Date,Items,Subtotal,Discount,Total\n";
            foreach (var t in filteredTransactions)
            {
                csvContent += $"{t.Id},\"{t.CustomerName ?? "Walk-in"}\"," +
                            $"{t.TransactionDate:dd-MM-yyyy HH:mm}," +
                            $"{t.Items.Sum(i => i.Quantity)}," +
                            $"{t.SubTotal}," +
                            $"{t.Discount}," +
                            $"{t.Total}\n";
            }

            var timestamp = DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss");
            var fileName = $"SalesReport_{timestamp}.csv";
            await JS.InvokeVoidAsync("downloadCSV", csvContent, fileName);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading bills: {ex.Message}");
        }
    }

    private async Task PrintBills()
    {
        try
        {
            await JS.InvokeVoidAsync("printBillsList");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error printing bills: {ex.Message}");
        }
    }

    public void Dispose()
    {
        // Cleanup if needed
    }
}

<script>
    // Chart rendering function for sales report
    function renderSalesReportCharts(data) {
        // Destroy existing charts if they exist
        if (window.salesChart) {
            window.salesChart.destroy();
        }
        if (window.paymentChart) {
            window.paymentChart.destroy();
        }

        // Sales Trend Chart (Line)
        const salesCtx = document.getElementById('salesChart').getContext('2d');
        window.salesChart = new Chart(salesCtx, {
            type: 'line',
            data: {
                labels: data.salesLabels,
                datasets: [{
                    label: 'Daily Sales',
                    data: data.salesData,
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 2,
                    tension: 0.1,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return '$' + value.toLocaleString();
                            }
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return '$' + context.parsed.y.toLocaleString();
                            }
                        }
                    }
                }
            }
        });

        // Payment Methods Chart (Doughnut)
        const paymentCtx = document.getElementById('paymentChart').getContext('2d');
        window.paymentChart = new Chart(paymentCtx, {
            type: 'doughnut',
            data: {
                labels: data.paymentMethods,
                datasets: [{
                    data: data.paymentAmounts,
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.7)',
                        'rgba(54, 162, 235, 0.7)',
                        'rgba(255, 206, 86, 0.7)',
                        'rgba(75, 192, 192, 0.7)',
                        'rgba(153, 102, 255, 0.7)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const value = context.raw;
                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                const percentage = Math.round((value / total) * 100);
                                return `${context.label}: $${value.toLocaleString()} (${percentage}%)`;
                            }
                        }
                    },
                    legend: {
                        position: 'right'
                    }
                }
            }
        });
    }

    // Download CSV function
    function downloadCSV(content, filename) {
        const blob = new Blob([content], { type: "text/csv;charset=utf-8;" });
        const link = document.createElement("a");

        const now = new Date();
        const timeStr = now.toLocaleString().replace(/[^\d]/g, "_");

        const fileWithTime = filename.replace(".csv", `_${timeStr}.csv`);

        link.setAttribute("href", URL.createObjectURL(blob));
        link.setAttribute("download", fileWithTime);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

    // Print bills list function
    function printBillsList() {
        const printContent = document.querySelector(".table-responsive").innerHTML;
        const printWindow = window.open('', '', 'width=900,height=700');
        const now = new Date().toLocaleString();

        printWindow.document.write(`
            <html>
                <head>
                    <title>Order History - ${now}</title>
                    <style>
                        table { width: 100%; border-collapse: collapse; }
                        th, td { padding: 8px; border: 1px solid #ccc; text-align: left; }
                        th { background-color: #333; color: white; }
                    </style>
                </head>
                <body>
                    <h2>Order History</h2>
                    <p>Printed on: ${now}</p>
                    ${printContent}
                </body>
            </html>
        `);
        printWindow.document.close();
        printWindow.focus();
        printWindow.print();
        printWindow.close();
    }

    // Print receipt function
    function printReceipt(transactionId) {
        // Implement your receipt printing logic here
        console.log(`Printing receipt for transaction ${transactionId}`);
    }
</script>