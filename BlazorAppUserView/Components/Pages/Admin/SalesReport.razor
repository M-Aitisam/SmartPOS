@page "/sales-report"
@using System.Globalization
@inject ITransactionService TransactionService
@inject IJSRuntime JS
@implements IDisposable
@rendermode InteractiveServer

<div class="container-fluid" style="max-width: 1400px;">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h3 style="color: #6c5ce7; font-weight: 600;">Sales Dashboard</h3>
            <p class="text-muted">Overview of your business performance</p>
        </div>
        <div class="d-flex align-items-center">
            <div class="input-group me-3" style="width: 250px;">
                <span class="input-group-text" style="background-color: #6c5ce7; color: white;">
                    <i class="fas fa-calendar"></i>
                </span>
                <input type="date" class="form-control" @bind="selectedDate" style="border-color: #6c5ce7;" />
            </div>
            <button class="btn me-2" @onclick="FilterData" style="background-color: #6c5ce7; color: white;">
                <i class="fas fa-filter"></i> Apply
            </button>
            <button class="btn" @onclick="DownloadReport" style="background-color: #6c5ce7; color: white;">
                <i class="fas fa-download"></i> Export
            </button>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card summary-card" style="border-left: 4px solid #6c5ce7;">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title text-muted mb-2">TOTAL SALES</h6>
                            <h4 class="mb-0">@totalSales.ToString("C")</h4>
                        </div>
                        <div class="icon-circle" style="background-color: rgba(108, 92, 231, 0.1);">
                            <i class="fas fa-shopping-bag" style="color: #6c5ce7;"></i>
                        </div>
                    </div>
                    <div class="mt-3">
                        <span class="@(salesChange >= 0 ? "text-success" : "text-danger")">
                            <i class="fas @(salesChange >= 0 ? "fa-arrow-up" : "fa-arrow-down")"></i>
                            @Math.Abs(salesChange)% @(salesChange >= 0 ? "increase" : "decrease") from last period
                        </span>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card summary-card" style="border-left: 4px solid #00b894;">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title text-muted mb-2">TOTAL ORDERS</h6>
                            <h4 class="mb-0">@totalOrders</h4>
                        </div>
                        <div class="icon-circle" style="background-color: rgba(0, 184, 148, 0.1);">
                            <i class="fas fa-receipt" style="color: #00b894;"></i>
                        </div>
                    </div>
                    <div class="mt-3">
                        <span class="@(ordersChange >= 0 ? "text-success" : "text-danger")">
                            <i class="fas @(ordersChange >= 0 ? "fa-arrow-up" : "fa-arrow-down")"></i>
                            @Math.Abs(ordersChange)% @(ordersChange >= 0 ? "increase" : "decrease") from last period
                        </span>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card summary-card" style="border-left: 4px solid #fd79a8;">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title text-muted mb-2">AVG. ORDER VALUE</h6>
                            <h4 class="mb-0">@(totalOrders > 0 ? (totalSales / totalOrders).ToString("C") : "$0.00")</h4>
                        </div>
                        <div class="icon-circle" style="background-color: rgba(253, 121, 168, 0.1);">
                            <i class="fas fa-dollar-sign" style="color: #fd79a8;"></i>
                        </div>
                    </div>
                    <div class="mt-3">
                        <span class="@(avgOrderChange >= 0 ? "text-success" : "text-danger")">
                            <i class="fas @(avgOrderChange >= 0 ? "fa-arrow-up" : "fa-arrow-down")"></i>
                            @Math.Abs(avgOrderChange)% @(avgOrderChange >= 0 ? "increase" : "decrease") from last period
                        </span>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card summary-card" style="border-left: 4px solid #fdcb6e;">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title text-muted mb-2">TOP PRODUCT</h6>
                            <h4 class="mb-0">@(topProduct ?? "N/A")</h4>
                        </div>
                        <div class="icon-circle" style="background-color: rgba(253, 203, 110, 0.1);">
                            <i class="fas fa-star" style="color: #fdcb6e;"></i>
                        </div>
                    </div>
                    <div class="mt-3">
                        <span class="text-muted">
                            @(topProductSales > 0 ? topProductSales.ToString("C") + " in sales" : "No data")
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Row -->
    <div class="row mb-4">
        <!-- Sales Trend Chart -->
        <div class="col-md-6">
            <div class="card chart-card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Sales Trend</h5>
                    <div>
                        <button class="btn btn-sm @(salesTimeFrame == "day" ? "btn-primary" : "btn-outline-primary")" @onclick="@(() => SetSalesTimeFrame("day"))">Day</button>
                        <button class="btn btn-sm @(salesTimeFrame == "week" ? "btn-primary" : "btn-outline-primary")" @onclick="@(() => SetSalesTimeFrame("week"))">Week</button>
                        <button class="btn btn-sm @(salesTimeFrame == "month" ? "btn-primary" : "btn-outline-primary")" @onclick="@(() => SetSalesTimeFrame("month"))">Month</button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="chart-container" style="height: 300px;">
                        <canvas id="salesTrendChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Payment Method Chart -->
        <div class="col-md-6">
            <div class="card chart-card">
                <div class="card-header">
                    <h5 class="mb-0">Payment Methods</h5>
                </div>
                <div class="card-body">
                    <div class="chart-container" style="height: 300px;">
                        <canvas id="paymentMethodChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Order History Section -->
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Recent Orders</h5>
            <div class="input-group" style="max-width: 300px;">
                <span class="input-group-text" style="background-color: #6c5ce7; color: white;">
                    <i class="fas fa-search"></i>
                </span>
                <input type="text" class="form-control" placeholder="Search orders..."
                       @bind="searchText" @bind:event="oninput" style="border-color: #6c5ce7;" />
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead style="background-color: #6c5ce7; color: white;">
                        <tr>
                            <th style="padding: 12px 16px;">Date</th>
                            <th style="padding: 12px 16px;">Items</th>
                            <th class="text-end" style="padding: 12px 16px;">Subtotal</th>
                            <th class="text-end" style="padding: 12px 16px;">Discount</th>
                            <th class="text-end" style="padding: 12px 16px;">Tax</th>
                            <th class="text-end" style="padding: 12px 16px;">Total</th>
                            <th class="text-end" style="padding: 12px 16px;">Payment</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (transactions == null)
                        {
                            <tr>
                                <td colspan="7" class="text-center py-4">Loading transactions...</td>
                            </tr>
                        }
                        else if (!filteredTransactions.Any())
                        {
                            <tr>
                                <td colspan="7" class="text-center py-4">No orders found</td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var transaction in filteredTransactions.Take(10))
                            {
                                <tr @onclick="() => ShowTransactionDetails(transaction)"
                                    style="cursor: pointer; transition: background-color 0.2s;"
                                    class="hover-row">
                                    <td style="padding: 12px 16px;">@transaction.TransactionDate.ToString("g")</td>
                                    <td style="padding: 12px 16px;">@transaction.Items.Sum(i => i.Quantity)</td>
                                    <td class="text-end" style="padding: 12px 16px;">@transaction.SubTotal.ToString("C")</td>
                                    <td class="text-end" style="padding: 12px 16px;">
                                        @if (!transaction.Items.Any(i => i.IsRateListItem))
                                        {
                                            @transaction.Discount.ToString("C")
                                        }
                                        else
                                        {
                                            <span>N/A</span>
                                        }
                                    </td>
                                    <td class="text-end" style="padding: 12px 16px;">@transaction.Tax.ToString("C")</td>
                                    <td class="text-end" style="padding: 12px 16px;">@transaction.Total.ToString("C")</td>
                                    <td class="text-end" style="padding: 12px 16px;">@transaction.PaymentMethod</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="card-footer text-end">
            <a href="/order-history" class="btn btn-link" style="color: #6c5ce7;">View All Orders</a>
        </div>
    </div>
</div>

<!-- Transaction Details Modal -->
@if (selectedTransaction != null)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #6c5ce7; color: white;">
                    <h5 class="modal-title">Order Details - @selectedTransaction.Id</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <p><strong>Date:</strong> @selectedTransaction.TransactionDate.ToString("g")</p>
                            <p><strong>Customer:</strong> @(selectedTransaction.CustomerName ?? "Walk-in")</p>
                        </div>
                        <div class="col-md-6 text-end">
                            <p><strong>Subtotal:</strong> @selectedTransaction.SubTotal.ToString("C")</p>
                            <p><strong>Discount:</strong> @selectedTransaction.Discount.ToString("C")</p>
                            <p><strong>Tax:</strong> @selectedTransaction.Tax.ToString("C")</p>
                            <p><strong>Total:</strong> @selectedTransaction.Total.ToString("C")</p>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead style="background-color: #f8f9fa;">
                                <tr>
                                    <th>Product</th>
                                    <th>Price</th>
                                    <th>Quantity</th>
                                    <th>Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in selectedTransaction.Items)
                                {
                                    <tr>
                                        <td>@item.ProductName</td>
                                        <td>@item.UnitPrice.ToString("C")</td>
                                        <td>@item.Quantity</td>
                                        <td>@((item.UnitPrice * item.Quantity).ToString("C"))</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                    <button type="button" class="btn" style="background-color: #6c5ce7; color: white;" @onclick="() => PrintReceipt(selectedTransaction)">
                        <i class="fas fa-print me-2"></i>Print Receipt
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .summary-card {
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .summary-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
        }

    .icon-circle {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.25rem;
    }

    .chart-card {
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        height: 100%;
    }

    .hover-row:hover {
        background-color: rgba(108, 92, 231, 0.1) !important;
    }

    .btn {
        transition: all 0.2s;
    }

        .btn:hover {
            opacity: 0.9;
            transform: translateY(-1px);
        }

    .form-control:focus {
        border-color: #6c5ce7;
        box-shadow: 0 0 0 0.25rem rgba(108, 92, 231, 0.25);
    }

    .table {
        border-collapse: separate;
        border-spacing: 0;
    }

        .table thead th:first-child {
            border-top-left-radius: 8px;
        }

        .table thead th:last-child {
            border-top-right-radius: 8px;
        }
</style>

@code {
    private List<BusinessTransaction> transactions = new();
    private string searchText = string.Empty;
    private BusinessTransaction? selectedTransaction;
    private DateTime? selectedDate;
    private decimal totalSales;
    private int totalOrders;
    private decimal salesChange;
    private int ordersChange;
    private decimal avgOrderChange;
    private string? topProduct;
    private decimal topProductSales;
    private string salesTimeFrame = "week";

    private IEnumerable<BusinessTransaction> filteredTransactions => transactions?
        .Where(t => string.IsNullOrEmpty(searchText) ||
                   t.Id.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                   (t.CustomerName != null && t.CustomerName.Contains(searchText, StringComparison.OrdinalIgnoreCase)))
        ?? Enumerable.Empty<BusinessTransaction>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeCharts();
        }
        else
        {
            await UpdateCharts();
        }
    }

    private async Task LoadData()
    {
        // Load transactions
        transactions = await TransactionService.GetTransactionsByDateAsync(selectedDate?.Date, selectedDate?.Date.AddDays(1).AddTicks(-1));

        // Calculate summary metrics
        totalSales = transactions.Sum(t => t.Total);
        totalOrders = transactions.Count;

        // Calculate changes (simplified - in a real app you'd compare with previous period)
        salesChange = 5.2m; // Example value
        ordersChange = 3;
        avgOrderChange = 2.1m;

        // Find top product
        var productSales = transactions
            .SelectMany(t => t.Items)
            .GroupBy(i => i.ProductName)
            .Select(g => new { Product = g.Key, Sales = g.Sum(i => i.UnitPrice * i.Quantity) })
            .OrderByDescending(x => x.Sales)
            .FirstOrDefault();

        topProduct = productSales?.Product;
        topProductSales = productSales?.Sales ?? 0;
    }

    private async Task FilterData()
    {
        await LoadData();
        await UpdateCharts();
    }

    private void ShowTransactionDetails(BusinessTransaction transaction)
    {
        selectedTransaction = transaction;
    }

    private void CloseModal()
    {
        selectedTransaction = null;
    }

    private async Task PrintReceipt(BusinessTransaction transaction)
    {
        try
        {
            await JS.InvokeVoidAsync("printReceipt", transaction.Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error printing receipt: {ex.Message}");
        }
    }

    private async Task DownloadReport()
    {
        try
        {
            var csvContent = "Date,Order ID,Customer,Items,Subtotal,Discount,Tax,Total,Payment Method\n";
            foreach (var t in filteredTransactions)
            {
                var discountValue = t.Items.Any(i => i.IsRateListItem) ? "N/A" : t.Discount.ToString();

                csvContent += $"{t.TransactionDate:dd-MM-yyyy HH:mm}," +
                            $"{t.Id}," +
                            $"\"{t.CustomerName ?? "Walk-in"}\"," +
                            $"{t.Items.Sum(i => i.Quantity)}," +
                            $"{t.SubTotal}," +
                            $"{discountValue}," +
                            $"{t.Tax}," +
                            $"{t.Total}," +
                            $"{t.PaymentMethod}\n";
            }

            var timestamp = DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss");
            var fileName = $"Sales_Report_{timestamp}.csv";
            await JS.InvokeVoidAsync("downloadCSV", csvContent, fileName);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading report: {ex.Message}");
        }
    }

    private async Task InitializeCharts()
    {
        await JS.InvokeVoidAsync("initializeSalesTrendChart", salesTimeFrame);
        await JS.InvokeVoidAsync("initializePaymentMethodChart");
    }

    private async Task UpdateCharts()
    {
        // Prepare sales trend data based on timeframe
        var trendData = GetSalesTrendData(salesTimeFrame);
        await JS.InvokeVoidAsync("updateSalesTrendChart", trendData.Labels, trendData.Values, salesTimeFrame);

        // Prepare payment method data
        var paymentData = transactions
            .GroupBy(t => t.PaymentMethod)
            .Select(g => new { Method = g.Key, Amount = g.Sum(t => t.Total) })
            .OrderByDescending(x => x.Amount)
            .ToList();

        var paymentLabels = paymentData.Select(x => x.Method).ToArray();
        var paymentAmounts = paymentData.Select(x => (double)x.Amount).ToArray();

        await JS.InvokeVoidAsync("updatePaymentMethodChart", paymentLabels, paymentAmounts);
    }

    private (string[] Labels, double[] Values) GetSalesTrendData(string timeframe)
    {
        // In a real app, you would get this data from your service
        // This is just sample data for demonstration

        if (timeframe == "day")
        {
            var labels = Enumerable.Range(0, 24).Select(h => $"{h}:00").ToArray();
            var values = new double[24];
            var random = new Random();

            for (int i = 0; i < 24; i++)
            {
                values[i] = random.Next(50, 200);
            }

            return (labels, values);
        }
        else if (timeframe == "week")
        {
            var labels = new[] { "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun" };
            var values = new double[] { 1200, 1900, 1500, 2100, 2500, 1800, 2200 };
            return (labels, values);
        }
        else // month
        {
            var daysInMonth = DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month);
            var labels = Enumerable.Range(1, daysInMonth).Select(d => d.ToString()).ToArray();
            var values = new double[daysInMonth];
            var random = new Random();

            for (int i = 0; i < daysInMonth; i++)
            {
                values[i] = random.Next(800, 3000);
            }

            return (labels, values);
        }
    }

    private async Task SetSalesTimeFrame(string timeframe)
    {
        salesTimeFrame = timeframe;
        await UpdateCharts();
    }

    public void Dispose()
    {
        // Cleanup if needed
    }
}

         <script>

                 // Sales Trend Chart
    let salesTrendChart;

    window.initializeSalesTrendChart = async (timeframe) => {
        const ctx = document.getElementById('salesTrendChart').getContext('2d');

        // Initial empty data
        salesTrendChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'Sales',
                    data: [],
                    backgroundColor: 'rgba(108, 92, 231, 0.2)',
                    borderColor: 'rgba(108, 92, 231, 1)',
                    borderWidth: 2,
                    tension: 0.4,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return '$' + context.raw.toFixed(2);
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return '$' + value;
                            }
                        }
                    }
                }
            }
        });
    };

    window.updateSalesTrendChart = (labels, values, timeframe) => {
        if (salesTrendChart) {
            salesTrendChart.data.labels = labels;
            salesTrendChart.data.datasets[0].data = values;

            // Update scale title based on timeframe
            salesTrendChart.options.scales.x = {
                title: {
                    display: true,
                    text: timeframe === 'day' ? 'Hour of Day' :
                          timeframe === 'week' ? 'Day of Week' : 'Day of Month'
                }
            };

            salesTrendChart.update();
        }
    };

    // Payment Method Chart
    let paymentMethodChart;

    window.initializePaymentMethodChart = async () => {
        const ctx = document.getElementById('paymentMethodChart').getContext('2d');

        paymentMethodChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: [],
                datasets: [{
                    data: [],
                    backgroundColor: [
                        'rgba(108, 92, 231, 0.8)',
                        'rgba(0, 184, 148, 0.8)',
                        'rgba(253, 203, 110, 0.8)',
                        'rgba(253, 121, 168, 0.8)',
                        'rgba(129, 236, 236, 0.8)'
                    ],
                    borderColor: [
                        'rgba(108, 92, 231, 1)',
                        'rgba(0, 184, 148, 1)',
                        'rgba(253, 203, 110, 1)',
                        'rgba(253, 121, 168, 1)',
                        'rgba(129, 236, 236, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'right',
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const label = context.label || '';
                                const value = context.raw || 0;
                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                const percentage = Math.round((value / total) * 100);
                                return `${label}: $${value.toFixed(2)} (${percentage}%)`;
                            }
                        }
                    }
                }
            }
        });
    };

    window.updatePaymentMethodChart = (labels, values) => {
        if (paymentMethodChart) {
            paymentMethodChart.data.labels = labels;
            paymentMethodChart.data.datasets[0].data = values;
            paymentMethodChart.update();
        }
    };

    // Helper functions for CSV download and printing (same as in your order history page)
    window.downloadCSV = (content, filename) => {
        const blob = new Blob([content], { type: "text/csv;charset=utf-8;" });
        const link = document.createElement("a");

        const now = new Date();
        const timeStr = now.toLocaleString(); // Include time in local format

        const fileWithTime = filename.replace(".csv", `_${timeStr.replace(/[^\d]/g, "")}.csv`);

        link.setAttribute("href", URL.createObjectURL(blob));
        link.setAttribute("download", fileWithTime);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    window.printReceipt = (transactionId) => {
        // Implement receipt printing logic here
        console.log(`Printing receipt for transaction ${transactionId}`);
    };
         </script>