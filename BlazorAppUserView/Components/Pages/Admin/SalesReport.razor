@page "/salesreport"
@using System.Globalization
@inject IJSRuntime JSRuntime
@implements IDisposable
@using System.Text.Json
@rendermode InteractiveServer

<PageTitle>Sales Report</PageTitle>

<div class="sales-dashboard">
    <div class="dashboard-header">
        <h2>Sales Dashboard</h2>
        <div class="header-actions">
            <div class="time-filter">
                <span>Last Week</span>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <polyline points="6 9 12 15 18 9"></polyline>
                </svg>
            </div>
            <button class="export-btn">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                    <polyline points="7 10 12 15 17 10"></polyline>
                    <line x1="12" y1="15" x2="12" y2="3"></line>
                </svg>
                Export
            </button>
        </div>
    </div>

    <div class="summary-cards">
        <div class="summary-card">
            <div class="card-header">
                <span>Order</span>
                <span class="time-label">Last week</span>
            </div>
            <div class="card-value">$4,673</div>
            <div class="card-footer">
                <span class="growth positive">+18.2%</span>
                <span>vs last week</span>
            </div>
        </div>

        <div class="summary-card">
            <div class="card-header">
                <span>Sales</span>
                <span class="time-label">Last Year</span>
            </div>
            <div class="card-value">1.28k</div>
            <div class="card-footer">
                <span class="growth negative">-8.2%</span>
                <span>vs last year</span>
            </div>
        </div>

        <div class="summary-card">
            <div class="card-header">
                <span>Total Profit</span>
                <span class="time-label">Last week</span>
            </div>
            <div class="card-value">1.28k</div>
            <div class="card-footer">
                <span class="growth positive">+12.4%</span>
                <span>vs last week</span>
            </div>
        </div>

        <div class="summary-card">
            <div class="card-header">
                <span>Revenue Growth</span>
                <span class="time-label">Weekly Report</span>
            </div>
            <div class="card-value">$8,245</div>
            <div class="card-footer">
                <span class="growth positive">+21.7%</span>
                <span>vs last week</span>
            </div>
        </div>
    </div>

    <div class="charts-section">
        <div class="chart-container">
            <div class="chart-header">
                <h3>Earning Reports</h3>
                <span>Yearly Earnings Overview</span>
            </div>
            <div class="chart-wrapper">
                <canvas id="yearlyEarningsChart"></canvas>
            </div>
        </div>

        <div class="chart-container">
            <div class="chart-header">
                <h3>Sales</h3>
                <span>Last 6 Months</span>
            </div>
            <div class="chart-wrapper">
                <canvas id="monthlySalesChart"></canvas>
            </div>
        </div>
    </div>

    <div class="data-grid">
        <div class="grid-header">
            <h3>Orders</h3>
            <div class="grid-tabs">
                <button class="tab active">Orders</button>
                <button class="tab">Sales</button>
                <button class="tab">Profit</button>
                <button class="tab">Income</button>
            </div>
        </div>
        <div class="grid-content">
            <div class="grid-row header">
                <div class="grid-cell">Feb</div>
                <div class="grid-cell">Mar</div>
                <div class="grid-cell">Apr</div>
                <div class="grid-cell">May</div>
                <div class="grid-cell">Jun</div>
                <div class="grid-cell">Jul</div>
                <div class="grid-cell">Aug</div>
                <div class="grid-cell">Sep</div>
            </div>
            <div class="grid-row">
                <div class="grid-cell">$3,200</div>
                <div class="grid-cell">$4,800</div>
                <div class="grid-cell">$4,100</div>
                <div class="grid-cell">$5,700</div>
                <div class="grid-cell">$7,200</div>
                <div class="grid-cell">$6,900</div>
                <div class="grid-cell">$7,500</div>
                <div class="grid-cell">$8,200</div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isInitialized = false;
    private DotNetObjectReference<SalesReport>? objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            isInitialized = true;
            objRef = DotNetObjectReference.Create(this);
            await InitializeCharts();
        }
    }

    private async Task InitializeCharts()
    {
        try
        {
            // Yearly Earnings Chart (Line Chart)
            await JSRuntime.InvokeVoidAsync("initializeYearlyEarningsChart",
                JsonSerializer.Serialize(new[] { "Jun", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" }),
                JsonSerializer.Serialize(new[] { 3500, 4200, 3800, 5100, 6300, 7200, 6800, 7500, 8200 })
            );

            // Monthly Sales Chart (Bar Chart)
            await JSRuntime.InvokeVoidAsync("initializeMonthlySalesChart",
                JsonSerializer.Serialize(new[] { "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" }),
                JsonSerializer.Serialize(new[] { 3200, 4800, 4100, 5700, 7200, 6900, 7500, 8200 })
            );
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing charts: {ex.Message}");
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}

<script suppress-error="BL9992">
    let yearlyEarningsChart, monthlySalesChart;

    function initializeYearlyEarningsChart(labels, data) {
        const ctx = document.getElementById('yearlyEarningsChart').getContext('2d');
        if (yearlyEarningsChart) {
            yearlyEarningsChart.destroy();
        }

        yearlyEarningsChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: JSON.parse(labels),
                datasets: [{
                    label: 'Earnings',
                    data: JSON.parse(data),
                    borderColor: '#4a6fa5',
                    backgroundColor: 'rgba(74, 111, 165, 0.05)',
                    borderWidth: 3,
                    tension: 0.4,
                    fill: true,
                    pointBackgroundColor: '#4a6fa5',
                    pointBorderColor: '#fff',
                    pointRadius: 5,
                    pointHoverRadius: 7,
                    pointBorderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        backgroundColor: '#2c3e50',
                        titleColor: '#fff',
                        bodyColor: '#fff',
                        borderColor: 'rgba(255, 255, 255, 0.1)',
                        borderWidth: 1,
                        padding: 12,
                        callbacks: {
                            label: function(context) {
                                return '$' + context.raw.toLocaleString();
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: false,
                        ticks: {
                            color: '#999',
                            callback: function(value) {
                                return '$' + value.toLocaleString();
                            },
                            font: {
                                size: 11
                            }
                        },
                        grid: {
                            color: 'rgba(0, 0, 0, 0.03)',
                            drawBorder: false,
                            borderDash: [3, 3]
                        }
                    },
                    x: {
                        ticks: {
                            color: '#999',
                            font: {
                                size: 11
                            }
                        },
                        grid: {
                            display: false
                        }
                    }
                },
                elements: {
                    line: {
                        cubicInterpolationMode: 'monotone'
                    }
                }
            }
        });
    }

    function initializeMonthlySalesChart(labels, data) {
        const ctx = document.getElementById('monthlySalesChart').getContext('2d');
        if (monthlySalesChart) {
            monthlySalesChart.destroy();
        }

        monthlySalesChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: JSON.parse(labels),
                datasets: [{
                    label: 'Sales',
                    data: JSON.parse(data),
                    backgroundColor: [
                        'rgba(74, 111, 165, 0.7)',
                        'rgba(74, 111, 165, 0.7)',
                        'rgba(74, 111, 165, 0.7)',
                        'rgba(74, 111, 165, 0.7)',
                        'rgba(74, 111, 165, 0.7)',
                        'rgba(74, 111, 165, 0.7)',
                        'rgba(74, 111, 165, 0.7)',
                        'rgba(74, 111, 165, 0.7)'
                    ],
                    borderColor: '#4a6fa5',
                    borderWidth: 0,
                    borderRadius: 4,
                    borderSkipped: false
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        backgroundColor: '#2c3e50',
                        titleColor: '#fff',
                        bodyColor: '#fff',
                        borderColor: 'rgba(255, 255, 255, 0.1)',
                        borderWidth: 1,
                        padding: 12,
                        callbacks: {
                            label: function(context) {
                                return '$' + context.raw.toLocaleString();
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            color: '#999',
                            callback: function(value) {
                                return '$' + value.toLocaleString();
                            },
                            font: {
                                size: 11
                            }
                        },
                        grid: {
                            color: 'rgba(0, 0, 0, 0.03)',
                            drawBorder: false,
                            borderDash: [3, 3]
                        }
                    },
                    x: {
                        ticks: {
                            color: '#999',
                            font: {
                                size: 11
                            }
                        },
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });
    }

    // Ensure Chart.js is loaded
    function loadChartJS() {
        if (typeof Chart === 'undefined') {
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/chart.js';
            document.head.appendChild(script);
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        loadChartJS();
    });
</script>

<style>
    :root {
        --primary-color: #4a6fa5;
        --primary-light: rgba(74, 111, 165, 0.1);
        --text-color: #2c3e50;
        --text-light: #7f8c8d;
        --border-color: #ecf0f1;
        --bg-color: #f8fafc;
        --card-bg: #ffffff;
        --positive: #27ae60;
        --negative: #e74c3c;
        --shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    .sales-dashboard {
        font-family: 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;
        padding: 24px;
        color: var(--text-color);
        background-color: var(--bg-color);
        min-height: 100vh;
    }

    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 24px;
    }

        .dashboard-header h2 {
            margin: 0;
            font-size: 22px;
            font-weight: 600;
            color: var(--text-color);
        }

    .header-actions {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .time-filter {
        background-color: var(--primary-light);
        padding: 8px 12px;
        border-radius: 6px;
        font-size: 13px;
        display: flex;
        align-items: center;
        gap: 6px;
        color: var(--primary-color);
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
    }

        .time-filter:hover {
            background-color: rgba(74, 111, 165, 0.15);
        }

        .time-filter svg {
            width: 14px;
            height: 14px;
        }

    .export-btn {
        background-color: var(--primary-color);
        color: white;
        border: none;
        padding: 8px 14px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 13px;
        font-weight: 500;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        gap: 6px;
    }

        .export-btn:hover {
            background-color: #3a5a80;
            transform: translateY(-1px);
        }

        .export-btn svg {
            width: 14px;
            height: 14px;
        }

    .summary-cards {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 16px;
        margin-bottom: 24px;
    }

    .summary-card {
        background-color: var(--card-bg);
        border-radius: 8px;
        padding: 18px;
        box-shadow: var(--shadow);
        transition: all 0.2s;
    }

        .summary-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 14px;
    }

        .card-header span:first-child {
            font-size: 13px;
            color: var(--text-light);
            font-weight: 500;
        }

    .time-label {
        background-color: var(--primary-light);
        padding: 3px 6px;
        border-radius: 4px;
        font-size: 11px;
        color: var(--primary-color);
        font-weight: 500;
    }

    .card-value {
        font-size: 22px;
        font-weight: 600;
        margin-bottom: 12px;
        color: var(--text-color);
    }

    .card-footer {
        display: flex;
        align-items: center;
        gap: 6px;
        font-size: 12px;
        color: var(--text-light);
    }

    .growth {
        font-weight: 600;
    }

        .growth.positive {
            color: var(--positive);
        }

        .growth.negative {
            color: var(--negative);
        }

    .charts-section {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 16px;
        margin-bottom: 24px;
    }

    .chart-container {
        background-color: var(--card-bg);
        border-radius: 8px;
        padding: 18px;
        box-shadow: var(--shadow);
    }

    .chart-header {
        margin-bottom: 16px;
    }

        .chart-header h3 {
            margin: 0 0 4px 0;
            font-size: 15px;
            font-weight: 600;
        }

        .chart-header span {
            font-size: 12px;
            color: var(--text-light);
        }

    .chart-wrapper {
        height: 240px;
        position: relative;
    }

    .data-grid {
        background-color: var(--card-bg);
        border-radius: 8px;
        padding: 18px;
        box-shadow: var(--shadow);
    }

    .grid-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
    }

        .grid-header h3 {
            margin: 0;
            font-size: 15px;
            font-weight: 600;
        }

    .grid-tabs {
        display: flex;
        gap: 6px;
    }

        .grid-tabs .tab {
            background: none;
            border: none;
            padding: 5px 10px;
            font-size: 12px;
            color: var(--text-light);
            cursor: pointer;
            border-radius: 4px;
            transition: all 0.2s;
        }

            .grid-tabs .tab:hover {
                color: var(--primary-color);
                background-color: var(--primary-light);
            }

            .grid-tabs .tab.active {
                color: var(--primary-color);
                background-color: var(--primary-light);
                font-weight: 500;
            }

    .grid-content {
        overflow-x: auto;
    }

    .grid-row {
        display: grid;
        grid-template-columns: repeat(8, 1fr);
        min-width: 800px;
    }

        .grid-row.header {
            border-bottom: 1px solid var(--border-color);
            margin-bottom: 10px;
            padding-bottom: 8px;
        }

    .grid-cell {
        padding: 8px 10px;
        font-size: 12px;
        text-align: center;
    }

    .grid-row.header .grid-cell {
        color: var(--text-light);
        font-weight: 500;
    }

    /* Responsive styles */
    @@media (max-width: 1200px) {
        .summary-cards {
            grid-template-columns: repeat(2, 1fr);
        }
    }

    @@media (max-width: 768px) {
        .charts-section {
            grid-template-columns: 1fr;
        }

        .dashboard-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 12px;
        }

        .header-actions {
            width: 100%;
            justify-content: space-between;
        }
    }

    @@media (max-width: 576px) {
        .summary-cards {
            grid-template-columns: 1fr;
        }

        .sales-dashboard {
            padding: 16px;
        }
    }
</style>