@page "/salesreport"
@using System.Globalization
@inject ITransactionService TransactionService
@inject IJSRuntime JSRuntime
@implements IDisposable
@using System.Text.Json
@rendermode InteractiveServer

<PageTitle>Sales Report</PageTitle>

<div class="sales-dashboard">
    <div class="dashboard-header">
        <h2>Sales Dashboard</h2>
        <div class="header-actions">
            <div class="time-filter" @onclick="ToggleTimeRange">
                <span>@TimeRangeLabel</span>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <polyline points="6 9 12 15 18 9"></polyline>
                </svg>
            </div>
            <button class="export-btn" @onclick="ExportData">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                    <polyline points="7 10 12 15 17 10"></polyline>
                    <line x1="12" y1="15" x2="12" y2="3"></line>
                </svg>
                Export
            </button>
        </div>
    </div>

    <div class="summary-cards">
        <div class="summary-card">
            <div class="card-header">
                <span>Gross Sales</span>
                <span class="time-label">@TimeRangeLabel</span>
            </div>
            <div class="card-value">@GrossSales.ToString("C")</div>
            <div class="card-footer">
                <span class="growth @(GrossSalesGrowth >= 0 ? "positive" : "negative")">
                    @(GrossSalesGrowth >= 0 ? "+" : "")@GrossSalesGrowth.ToString("0.0")%
                </span>
                <span>vs previous period</span>
            </div>
        </div>

        <div class="summary-card">
            <div class="card-header">
                <span>Net Sales</span>
                <span class="time-label">@TimeRangeLabel</span>
            </div>
            <div class="card-value">@NetSales.ToString("C")</div>
            <div class="card-footer">
                <span class="growth @(NetSalesGrowth >= 0 ? "positive" : "negative")">
                    @(NetSalesGrowth >= 0 ? "+" : "")@NetSalesGrowth.ToString("0.0")%
                </span>
                <span>vs previous period</span>
            </div>
        </div>

        <div class="summary-card">
            <div class="card-header">
                <span>Discount</span>
                <span class="time-label">@TimeRangeLabel</span>
            </div>
            <div class="card-value">@Discount.ToString("C")</div>
            <div class="card-footer">
                <span class="growth @(DiscountGrowth >= 0 ? "positive" : "negative")">
                    @(DiscountGrowth >= 0 ? "+" : "")@DiscountGrowth.ToString("0.0")%
                </span>
                <span>vs previous period</span>
            </div>
        </div>

        <div class="summary-card">
            <div class="card-header">
                <span>Taxes</span>
                <span class="time-label">@TimeRangeLabel</span>
            </div>
            <div class="card-value">@Taxes.ToString("C")</div>
            <div class="card-footer">
                <span class="growth @(TaxesGrowth >= 0 ? "positive" : "negative")">
                    @(TaxesGrowth >= 0 ? "+" : "")@TaxesGrowth.ToString("0.0")%
                </span>
                <span>vs previous period</span>
            </div>
        </div>
    </div>

    <div class="charts-section">
        <div class="chart-container">
            <div class="chart-header">
                <h3>Earning Reports</h3>
                <span>Yearly Earnings Overview</span>
            </div>
            <div class="chart-wrapper">
                <canvas id="yearlyEarningsChart"></canvas>
            </div>
        </div>

        <div class="chart-container">
            <div class="chart-header">
                <h3>Sales</h3>
                <span>Last 6 Months</span>
            </div>
            <div class="chart-wrapper">
                <canvas id="monthlySalesChart"></canvas>
            </div>
        </div>
    </div>

    <div class="data-grid">
        <div class="grid-header">
            <h3>Monthly Sales</h3>
        </div>
        <div class="grid-content">
            <div class="grid-row header">
                @foreach (var month in monthlySales.Keys)
                {
                    <div class="grid-cell">@month</div>
                }
            </div>
            <div class="grid-row">
                @foreach (var sales in monthlySales.Values)
                {
                    <div class="grid-cell">@sales.ToString("C")</div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private bool isInitialized = false;
    private DotNetObjectReference<SalesReport>? objRef;
    private TimeRange currentTimeRange = TimeRange.Week;
    private string TimeRangeLabel => currentTimeRange.ToString();

    // Current period values
    private decimal GrossSales;
    private decimal NetSales;
    private decimal Discount;
    private decimal Taxes;

    // Previous period values for comparison
    private decimal GrossSalesPrev;
    private decimal NetSalesPrev;
    private decimal DiscountPrev;
    private decimal TaxesPrev;

    // Growth calculations
    private decimal GrossSalesGrowth => GrossSalesPrev == 0 ? 0 : ((GrossSales - GrossSalesPrev) / GrossSalesPrev) * 100;
    private decimal NetSalesGrowth => NetSalesPrev == 0 ? 0 : ((NetSales - NetSalesPrev) / NetSalesPrev) * 100;
    private decimal DiscountGrowth => DiscountPrev == 0 ? 0 : ((Discount - DiscountPrev) / DiscountPrev) * 100;
    private decimal TaxesGrowth => TaxesPrev == 0 ? 0 : ((Taxes - TaxesPrev) / TaxesPrev) * 100;

    // Chart data
    private decimal[] yearlyEarnings = new decimal[12];
    private string[] last6MonthsLabels = Array.Empty<string>();
    private decimal[] last6MonthsData = Array.Empty<decimal>();
    private Dictionary<string, decimal> monthlySales = new Dictionary<string, decimal>();

    protected override async Task OnInitializedAsync()
    {
        await LoadSalesData();
        await LoadChartData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeCharts();
            isInitialized = true;
        }
    }

    private async Task LoadChartData()
    {
        // Load yearly earnings data
        DateTime startOfYear = new DateTime(DateTime.Today.Year, 1, 1);
        DateTime endOfYear = new DateTime(DateTime.Today.Year, 12, 31);
        var yearlyTransactions = await TransactionService.GetTransactionsByDateAsync(startOfYear, endOfYear);

        yearlyEarnings = new decimal[12];
        if (yearlyTransactions != null)
        {
            var yearlyGroups = yearlyTransactions
                .GroupBy(t => t.TransactionDate.Month)
                .Select(g => new { Month = g.Key, Total = g.Sum(t => t.Total) });

            foreach (var group in yearlyGroups)
            {
                yearlyEarnings[group.Month - 1] = group.Total;
            }
        }

        // Load last 6 months data
        DateTime startDate6Months = DateTime.Today.AddMonths(-6);
        var last6MonthsTransactions = await TransactionService.GetTransactionsByDateAsync(startDate6Months, DateTime.Today);

        last6MonthsLabels = new string[6];
        last6MonthsData = new decimal[6];

        for (int i = 0; i < 6; i++)
        {
            DateTime monthStart = startDate6Months.AddMonths(i);
            last6MonthsLabels[i] = monthStart.ToString("MMM");

            last6MonthsData[i] = last6MonthsTransactions?
                .Where(t => t.TransactionDate.Month == monthStart.Month &&
                           t.TransactionDate.Year == monthStart.Year)
                .Sum(t => t.Total) ?? 0;
        }

        // Load monthly sales for grid (last 8 months)
        DateTime startDate8Months = DateTime.Today.AddMonths(-8);
        var gridTransactions = await TransactionService.GetTransactionsByDateAsync(startDate8Months, DateTime.Today);

        monthlySales.Clear();
        for (int i = 0; i < 8; i++)
        {
            DateTime month = DateTime.Today.AddMonths(-7 + i);
            string monthName = month.ToString("MMM");

            decimal monthTotal = gridTransactions?
                .Where(t => t.TransactionDate.Month == month.Month &&
                           t.TransactionDate.Year == month.Year)
                .Sum(t => t.Total) ?? 0;

            monthlySales[monthName] = monthTotal;
        }
    }

    private async Task InitializeCharts()
    {
        // Use real data
        var yearlyLabels = new[] { "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                                 "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };

        await JSRuntime.InvokeVoidAsync("initializeYearlyEarningsChart",
            JsonSerializer.Serialize(yearlyLabels),
            JsonSerializer.Serialize(yearlyEarnings));

        await JSRuntime.InvokeVoidAsync("initializeMonthlySalesChart",
            JsonSerializer.Serialize(last6MonthsLabels),
            JsonSerializer.Serialize(last6MonthsData));
    }

    private async Task LoadSalesData()
    {
        DateTime endDate = DateTime.Today;
        DateTime startDate;
        DateTime prevStartDate;
        DateTime prevEndDate;

        switch (currentTimeRange)
        {
            case TimeRange.Day:
                startDate = endDate;
                prevStartDate = startDate.AddDays(-1);
                prevEndDate = prevStartDate;
                break;
            case TimeRange.Week:
                startDate = endDate.AddDays(-(int)endDate.DayOfWeek);
                prevStartDate = startDate.AddDays(-7);
                prevEndDate = startDate.AddDays(-1);
                break;
            case TimeRange.Month:
                startDate = new DateTime(endDate.Year, endDate.Month, 1);
                prevStartDate = startDate.AddMonths(-1);
                prevEndDate = startDate.AddDays(-1);
                break;
            case TimeRange.Year:
                startDate = new DateTime(endDate.Year, 1, 1);
                prevStartDate = new DateTime(endDate.Year - 1, 1, 1);
                prevEndDate = new DateTime(endDate.Year - 1, 12, 31);
                break;
            default:
                startDate = endDate.AddDays(-(int)endDate.DayOfWeek);
                prevStartDate = startDate.AddDays(-7);
                prevEndDate = startDate.AddDays(-1);
                break;
        }

        var currentTransactions = await TransactionService.GetTransactionsByDateAsync(startDate, endDate);
        var previousTransactions = await TransactionService.GetTransactionsByDateAsync(prevStartDate, prevEndDate);

        // Calculate current period values
        GrossSales = currentTransactions?.Sum(t => t.SubTotal) ?? 0;
        NetSales = currentTransactions?.Sum(t => t.Total) ?? 0;
        Discount = currentTransactions?.Sum(t => t.Discount) ?? 0;
        Taxes = currentTransactions?.Sum(t => t.Tax) ?? 0;

        // Calculate previous period values for comparison
        GrossSalesPrev = previousTransactions?.Sum(t => t.SubTotal) ?? 0;
        NetSalesPrev = previousTransactions?.Sum(t => t.Total) ?? 0;
        DiscountPrev = previousTransactions?.Sum(t => t.Discount) ?? 0;
        TaxesPrev = previousTransactions?.Sum(t => t.Tax) ?? 0;

        StateHasChanged();
    }

    private async Task ToggleTimeRange()
    {
        currentTimeRange = currentTimeRange switch
        {
            TimeRange.Day => TimeRange.Week,
            TimeRange.Week => TimeRange.Month,
            TimeRange.Month => TimeRange.Year,
            TimeRange.Year => TimeRange.Day,
            _ => TimeRange.Week
        };

        await LoadSalesData();
    }

    private async Task ExportData()
    {
        try
        {
            var csvContent = $"Period,{TimeRangeLabel}\n";
            csvContent += $"Previous Period,{GetPreviousPeriodLabel()}\n\n";
            csvContent += "Metric,Current,Previous,Growth\n";
            csvContent += $"Gross Sales,{GrossSales:C},{GrossSalesPrev:C},{GrossSalesGrowth:0.0}%\n";
            csvContent += $"Net Sales,{NetSales:C},{NetSalesPrev:C},{NetSalesGrowth:0.0}%\n";
            csvContent += $"Discount,{Discount:C},{DiscountPrev:C},{DiscountGrowth:0.0}%\n";
            csvContent += $"Taxes,{Taxes:C},{TaxesPrev:C},{TaxesGrowth:0.0}%\n\n";

            // Add chart data
            csvContent += "Yearly Earnings\nMonth,Amount\n";
            var months = new[] { "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                               "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
            for (int i = 0; i < 12; i++)
            {
                csvContent += $"{months[i]},{yearlyEarnings[i]:C}\n";
            }

            csvContent += "\nMonthly Sales (Last 6 Months)\nMonth,Amount\n";
            for (int i = 0; i < last6MonthsLabels.Length; i++)
            {
                csvContent += $"{last6MonthsLabels[i]},{last6MonthsData[i]:C}\n";
            }

            var fileName = $"SalesReport_{DateTime.Now:yyyyMMddHHmmss}.csv";
            await JSRuntime.InvokeVoidAsync("downloadCSV", csvContent, fileName);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting data: {ex.Message}");
        }
    }

    private string GetPreviousPeriodLabel()
    {
        return currentTimeRange switch
        {
            TimeRange.Day => "Yesterday",
            TimeRange.Week => "Previous Week",
            TimeRange.Month => "Previous Month",
            TimeRange.Year => "Previous Year",
            _ => "Previous Period"
        };
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    private enum TimeRange
    {
        Day,
        Week,
        Month,
        Year
    }
}

<script suppress-error="BL9992">
    let yearlyEarningsChart, monthlySalesChart;

    function initializeYearlyEarningsChart(labels, data) {
        const ctx = document.getElementById('yearlyEarningsChart').getContext('2d');
        if (yearlyEarningsChart) {
            yearlyEarningsChart.destroy();
        }

        yearlyEarningsChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: JSON.parse(labels),
                datasets: [{
                    label: 'Earnings',
                    data: JSON.parse(data),
                    borderColor: '#4a6fa5',
                    backgroundColor: 'rgba(74, 111, 165, 0.05)',
                    borderWidth: 3,
                    tension: 0.4,
                    fill: true,
                    pointBackgroundColor: '#4a6fa5',
                    pointBorderColor: '#fff',
                    pointRadius: 5,
                    pointHoverRadius: 7,
                    pointBorderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        backgroundColor: '#2c3e50',
                        titleColor: '#fff',
                        bodyColor: '#fff',
                        borderColor: 'rgba(255, 255, 255, 0.1)',
                        borderWidth: 1,
                        padding: 12,
                        callbacks: {
                            label: function(context) {
                                return '$' + context.raw.toLocaleString();
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: false,
                        ticks: {
                            color: '#999',
                            callback: function(value) {
                                return '$' + value.toLocaleString();
                            },
                            font: {
                                size: 11
                            }
                        },
                        grid: {
                            color: 'rgba(0, 0, 0, 0.03)',
                            drawBorder: false,
                            borderDash: [3, 3]
                        }
                    },
                    x: {
                        ticks: {
                            color: '#999',
                            font: {
                                size: 11
                            }
                        },
                        grid: {
                            display: false
                        }
                    }
                },
                elements: {
                    line: {
                        cubicInterpolationMode: 'monotone'
                    }
                }
            }
        });
    }

    function initializeMonthlySalesChart(labels, data) {
        const ctx = document.getElementById('monthlySalesChart').getContext('2d');
        if (monthlySalesChart) {
            monthlySalesChart.destroy();
        }

        monthlySalesChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: JSON.parse(labels),
                datasets: [{
                    label: 'Sales',
                    data: JSON.parse(data),
                    backgroundColor: [
                        'rgba(74, 111, 165, 0.7)',
                        'rgba(74, 111, 165, 0.7)',
                        'rgba(74, 111, 165, 0.7)',
                        'rgba(74, 111, 165, 0.7)',
                        'rgba(74, 111, 165, 0.7)',
                        'rgba(74, 111, 165, 0.7)',
                        'rgba(74, 111, 165, 0.7)',
                        'rgba(74, 111, 165, 0.7)'
                    ],
                    borderColor: '#4a6fa5',
                    borderWidth: 0,
                    borderRadius: 4,
                    borderSkipped: false
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        backgroundColor: '#2c3e50',
                        titleColor: '#fff',
                        bodyColor: '#fff',
                        borderColor: 'rgba(255, 255, 255, 0.1)',
                        borderWidth: 1,
                        padding: 12,
                        callbacks: {
                            label: function(context) {
                                return '$' + context.raw.toLocaleString();
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            color: '#999',
                            callback: function(value) {
                                return '$' + value.toLocaleString();
                            },
                            font: {
                                size: 11
                            }
                        },
                        grid: {
                            color: 'rgba(0, 0, 0, 0.03)',
                            drawBorder: false,
                            borderDash: [3, 3]
                        }
                    },
                    x: {
                        ticks: {
                            color: '#999',
                            font: {
                                size: 11
                            }
                        },
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });
    }

    // Ensure Chart.js is loaded
    function loadChartJS() {
        if (typeof Chart === 'undefined') {
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/chart.js';
            document.head.appendChild(script);
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        loadChartJS();
    });
</script>

<style>
    :root {
        --primary-color: #4a6fa5;
        --primary-light: rgba(74, 111, 165, 0.1);
        --text-color: #2c3e50;
        --text-light: #7f8c8d;
        --border-color: #ecf0f1;
        --bg-color: #f8fafc;
        --card-bg: #ffffff;
        --positive: #27ae60;
        --negative: #e74c3c;
        --shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    /* Reset and base styles */
    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    body {
        font-family: 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;
        background-color: var(--bg-color);
        color: var(--text-color);
        min-height: 100vh;
    }

    /* Layout: Sidebar and Content */
    .layout {
        display: flex;
        min-height: 100vh;
        overflow: hidden;
    }

    .sidebar {
        width: 250px;
        background-color: var(--card-bg);
        border-right: 1px solid var(--border-color);
        box-shadow: var(--shadow);
        padding: 16px;
        transition: transform 0.3s ease;
    }

        .sidebar.collapsed {
            transform: translateX(-100%);
            position: absolute;
            z-index: 1000;
            top: 0;
            left: 0;
            height: 100%;
        }

    .content {
        flex: 1;
        padding: 24px;
        overflow-x: hidden;
    }

    /* Sales Dashboard */
    .sales-dashboard {
        width: 100%;
    }

    /* Header */
    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 24px;
        flex-wrap: wrap;
        gap: 12px;
    }

        .dashboard-header h2 {
            font-size: 22px;
            font-weight: 600;
            color: var(--text-color);
        }

    .header-actions {
        display: flex;
        align-items: center;
        gap: 12px;
        flex-wrap: wrap;
    }

    .time-filter {
        background-color: var(--primary-light);
        padding: 8px 12px;
        border-radius: 6px;
        font-size: 13px;
        color: var(--primary-color);
        font-weight: 500;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 6px;
        transition: background-color 0.2s;
    }

        .time-filter:hover {
            background-color: rgba(74, 111, 165, 0.15);
        }

    .export-btn {
        background-color: var(--primary-color);
        color: white;
        border: none;
        padding: 8px 14px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 13px;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 6px;
        transition: background-color 0.2s, transform 0.2s;
    }

        .export-btn:hover {
            background-color: #3a5a80;
            transform: translateY(-1px);
        }

    /* Summary Cards */
    .summary-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
        gap: 16px;
        margin-bottom: 24px;
    }

    .summary-card {
        background-color: var(--card-bg);
        border-radius: 8px;
        padding: 18px;
        box-shadow: var(--shadow);
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .summary-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 14px;
    }

        .card-header span:first-child {
            font-size: 13px;
            color: var(--text-light);
            font-weight: 500;
        }

    .time-label {
        background-color: var(--primary-light);
        padding: 3px 6px;
        border-radius: 4px;
        font-size: 11px;
        color: var(--primary-color);
        font-weight: 500;
    }

    .card-value {
        font-size: 22px;
        font-weight: 600;
        margin-bottom: 12px;
        color: var(--text-color);
    }

    .card-footer {
        display: flex;
        align-items: center;
        gap: 6px;
        font-size: 12px;
        color: var(--text-light);
    }

    .growth {
        font-weight: 600;
    }

        .growth.positive {
            color: var(--positive);
        }

        .growth.negative {
            color: var(--negative);
        }

    /* Charts Section */
    .charts-section {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 16px;
        margin-bottom: 24px;
    }

    .chart-container {
        background-color: var(--card-bg);
        border-radius: 8px;
        padding: 18px;
        box-shadow: var(--shadow);
    }

    .chart-header {
        margin-bottom: 16px;
    }

        .chart-header h3 {
            font-size: 15px;
            font-weight: 600;
        }

        .chart-header span {
            font-size: 12px;
            color: var(--text-light);
        }

    .chart-wrapper {
        height: 240px;
        position: relative;
    }

    /* Data Grid */
    .data-grid {
        background-color: var(--card-bg);
        border-radius: 8px;
        padding: 18px;
        box-shadow: var(--shadow);
        overflow-x: auto;
    }

    .grid-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
        flex-wrap: wrap;
        gap: 8px;
    }

        .grid-header h3 {
            font-size: 15px;
            font-weight: 600;
        }

    .grid-content {
        overflow-x: auto;
    }

    .grid-row {
        display: grid;
        grid-template-columns: repeat(8, 1fr);
        min-width: 800px;
    }

        .grid-row.header {
            border-bottom: 1px solid var(--border-color);
            margin-bottom: 10px;
            padding-bottom: 8px;
        }

    .grid-cell {
        padding: 8px 10px;
        font-size: 12px;
        text-align: center;
    }

    .grid-row.header .grid-cell {
        color: var(--text-light);
        font-weight: 500;
    }

    /* Media Queries */
    @@media (max-width: 768px) {
        .sidebar {
            position: absolute;
            z-index: 1000;
            transform: translateX(-100%);
        }

            .sidebar.open {
                transform: translateX(0);
            }

        .content {
            padding: 16px;
        }
    }

    @@media (max-width: 576px) {
        .dashboard-header {
            flex-direction: column;
            align-items: flex-start;
        }

        .header-actions {
            width: 100%;
            justify-content: space-between;
        }
    }
</style>