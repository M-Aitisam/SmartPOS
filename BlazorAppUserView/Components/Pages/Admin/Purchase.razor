@page "/purchase"
@using ClassLibraryEntities
@inject IProductService ProductService
@inject ICartService CartService
@inject ICategoryService CategoryService
@inject StateContainerService StateContainer
@implements IDisposable
@rendermode InteractiveServer

<h3>Purchase</h3>

@if (StateContainer.Categories == null || !StateContainer.Categories.Any())
{
    <p>Loading categories...</p>
}
else
{
    <label>Select Category:</label>
    <select @bind="selectedCategoryId" class="form-select">
        <option value="">-- Select Category --</option>
        @foreach (var category in StateContainer.Categories)
        {
            <option value="@category.CategoryID">@category.CategoryName</option>
        }
    </select>

    @if (selectedCategory != null)
    {
        <hr />
        <h4>Products</h4>
        @foreach (var product in selectedCategory.SubItems)
        {
            <div class="mb-3 border p-2">
                <p><strong>@product.SubItemName</strong> - ₹@product.Price</p>
                <button class="btn btn-primary btn-sm" @onclick="() => AddToCart(new Product { Id = product.SubItemID, Name = product.SubItemName, Price = product.Price })">Add to Cart</button>

                @if (product.NestedSubItems != null && product.NestedSubItems.Any())
                {
                    <label class="mt-2">Select Sub-Product:</label>
                    <select class="form-select" @onchange="e => AddNestedToCart(e, product)">
                        <option value="">-- Select --</option>
                        @foreach (var sub in product.NestedSubItems)
                        {
                            <option value="@sub.SubItemID">@sub.SubItemName - ₹@sub.Price</option>
                        }
                    </select>
                }
            </div>
        }
    }

    <hr />
    <h4>Cart</h4>
    @if (cartItems.Any())
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Unit Price</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in cartItems)
                {
                    <tr>
                        <td>@item.ProductName</td>
                        <td>₹@item.UnitPrice</td>
                        <td>
                            <input type="number" class="form-control" @bind="item.Quantity" @bind:event="oninput" min="1" @onchange="@(_ => UpdateCartItem(item))" />
                        </td>
                        <td>₹@item.TotalPrice</td>
                        <td><button class="btn btn-danger btn-sm" @onclick="() => RemoveFromCart(item)">Remove</button></td>
                    </tr>
                }
            </tbody>
        </table>
        <p><strong>Subtotal:</strong> ₹@subTotal</p>
        <p>
            <label>Discount:</label>
            <input type="text" class="form-control" @bind="discountInput" @bind:event="oninput" />
        </p>
        <p><strong>Total After Discount:</strong> ₹@grandTotal</p>
        <p>
            <label>Payment:</label>
            <input type="number" class="form-control" @bind="paymentAmount" @bind:event="oninput" />
        </p>
        <p><strong>Change/Due:</strong> ₹@dueAmount</p>
        <button class="btn btn-success" @onclick="CompletePurchase">Complete Purchase</button>
    }
    else
    {
        <p>No items in cart.</p>
    }
}

@code {
    private List<CartItem> cartItems = new();
    private int? selectedCategoryId;
    private BusinessCategory selectedCategory => StateContainer.Categories.FirstOrDefault(c => c.CategoryID == selectedCategoryId);
    private string discountInput = string.Empty;
    private decimal subTotal;
    private decimal appliedDiscount;
    private decimal grandTotal;
    private decimal paymentAmount;
    private decimal dueAmount;

    protected override async Task OnInitializedAsync()
    {
        StateContainer.OnChange += RefreshDataFromState;
        await LoadData();
    }

    public void Dispose()
    {
        StateContainer.OnChange -= RefreshDataFromState;
    }

    private async Task LoadData()
    {
        if (StateContainer.Categories == null || !StateContainer.Categories.Any())
        {
            var categories = await CategoryService.GetCategoriesAsync();
            StateContainer.Categories = categories;
        }

        RefreshDataFromState();
    }

    private void RefreshDataFromState()
    {
        CalculateTotals();
        StateHasChanged();
    }

    private void AddToCart(Product product)
    {
        var existingItem = cartItems.FirstOrDefault(i => i.ProductId == product.Id);
        if (existingItem != null)
        {
            existingItem.Quantity++;
        }
        else
        {
            cartItems.Add(new CartItem
                {
                    ProductId = product.Id,
                    ProductName = product.Name,
                    UnitPrice = product.Price,
                    Quantity = 1
                });
        }
        CalculateTotals();
    }

    private void AddNestedToCart(ChangeEventArgs e, BusinessSubItem parentItem)
    {
        if (int.TryParse(e.Value?.ToString(), out int subId))
        {
            var nested = parentItem.NestedSubItems?.FirstOrDefault(s => s.SubItemID == subId);
            if (nested != null)
            {
                AddToCart(new Product { Id = nested.SubItemID, Name = $"{parentItem.SubItemName} > {nested.SubItemName}", Price = nested.Price });
            }
        }
    }

    private void RemoveFromCart(CartItem item)
    {
        cartItems.Remove(item);
        CalculateTotals();
    }

    private void UpdateCartItem(CartItem item)
    {
        if (item.Quantity < 1) item.Quantity = 1;
        CalculateTotals();
    }

    private void CalculateTotals()
    {
        subTotal = cartItems.Sum(i => i.TotalPrice);
        ApplyDiscount();
        grandTotal = subTotal - appliedDiscount;
        dueAmount = paymentAmount - grandTotal;
    }

    private void ApplyDiscount()
    {
        appliedDiscount = 0;
        if (string.IsNullOrWhiteSpace(discountInput)) return;

        if (discountInput.EndsWith("%") && decimal.TryParse(discountInput.TrimEnd('%'), out var percent))
            appliedDiscount = subTotal * (percent / 100);
        else if (decimal.TryParse(discountInput, out var fixedDiscount))
            appliedDiscount = fixedDiscount;
    }

    private async Task CompletePurchase()
    {
        if (grandTotal <= 0 || paymentAmount < grandTotal) return;

        var transaction = new BusinessTransaction
            {
                Items = cartItems.Select(ci => new TransactionItem
                {
                    ProductID = ci.ProductId,
                    ProductName = ci.ProductName,
                    UnitPrice = ci.UnitPrice,
                    Quantity = ci.Quantity
                }).ToList(),
                SubTotal = subTotal,
                Discount = appliedDiscount,
                Total = grandTotal,
                PaymentAmount = paymentAmount,
                ChangeAmount = dueAmount,
                TransactionDate = DateTime.Now
            };

        await CartService.ProcessTransactionAsync(transaction);
        cartItems.Clear();
        paymentAmount = 0;
        CalculateTotals();
    }
}