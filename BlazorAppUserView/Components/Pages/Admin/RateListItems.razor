@page "/ratelist"
@using System.Collections.Generic
@inject BillService BillService
@rendermode InteractiveServer

<div class="container1">
    <input type="text" class="search-box" placeholder="Search product by name" @bind="SearchQuery" />

    <div class="category-buttons">
        @foreach (var category in Categories)
        {
            <button class="btn @(category == SelectedCategory ? "btn-primary" : "btn-outline-primary")"
                    @onclick="() => FilterByCategory(category)">
                @category
            </button>
        }
    </div>

    <div class="product-grid">
        @if (FilteredItems.Any())
        {
            @foreach (var item in FilteredItems)
            {
                <div class="product-item" @onclick="() => AddToBill(item)">
                    <img src="@item.ImageUrl" alt="@item.Name" class="product-image" />
                    <div class="product-info">
                        <div class="card-info">
                            <p class="text-title">@item.Name </p>
                            <p class="text-body">Product description and details</p>
                        </div>
                        <div class="card-footer">
                             <span class="price">$@item.BasePrice</span>
                            <div class="card-button">
                                <i class="bi bi-images text-primary mb-2" style="font-size: 1.2em;  width: 20px; height: 20px;"></i>
                            </div>
                       </div>
                      
                    </div>
                </div>
            }
        }
        else
        {
            <p class="no-items">No items found.</p>
        }
    </div>
</div>

<style>
    .container {
        padding: 20px;
    }


    .search-box {
        width: 100%;
        padding: 10px;
        margin-bottom: 15px;
        font-size: 16px;
    }

  
    .product-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 20px;
    }
    .container1{
        padding:10px;
    }
    .product-item {
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 10px;
        text-align: center;
        cursor: pointer;
        transition: background-color 0.2s ease;
        background-color: #fff;
    }

        .product-item:hover {
            background-color: #f9f9f9;
        }

    .product-image {
        width: 100%;
        height: 120px;
        object-fit: cover;
        border-radius: 6px;
        margin-bottom: 10px;
    }

    .product-info h5 {
        margin: 0;
        font-size: 1em;
        color: #333;
    }

    .price {
        font-weight: bold;
        color: #007bff;
    }

    .no-items {
        text-align: center;
        color: #888;
        padding: 20px;
    }

    .card-info {
        padding-top: 10%;
    }

    .card-footer {
        width: 100%;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding-top: 10px;
        border-top: 1px solid #ddd;
    }

    /*Text*/
    .text-title {
        font-weight: 900;
        font-size: 1.2em;
        line-height: 1.5;
    }

    .text-body {
        font-size: .9em;
        padding-bottom: 10px;
    }

    .card-button {
        border: 1px solid #252525;
        display: flex;
        padding: .3em;
        cursor: pointer;
        border-radius: 50px;
        transition: .3s ease-in-out;
    }

    /*Hover*/
    .card-img:hover {
        transform: translateY(-25%);
        box-shadow: rgba(226, 196, 63, 0.25) 0px 13px 47px -5px, rgba(180, 71, 71, 0.3) 0px 8px 16px -8px;
    }

    .card-button:hover {
        border: 1px solid #ffcaa6;
        background-color: #ffcaa6;
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .product-grid

    {
        grid-template-columns: repeat(2, 1fr);
    }

    }

    @@media (max-width: 480px) {
        .product-grid

    {
        grid-template-columns: 1fr;
    }

    }
</style>

@code {
    private string SearchQuery { get; set; } = "";
    private string SelectedCategory { get; set; } = "All";

    private List<string> Categories = new() { "All", "Drink", "Fast Food", "Indian", "Italian", "Chinese" };

    private IEnumerable<RateItem> FilteredItems =>
      (BillService.RateItems ?? new List<RateItem>())
      .Where(i => i.IsActive &&
                 (SelectedCategory == "All" || (i.Category ?? "") == SelectedCategory) &&
                 (string.IsNullOrEmpty(SearchQuery) || (i.Name ?? "").Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)))
      .ToList();

    protected override void OnInitialized()
    {
        BillService.OnChange += async () => await InvokeAsync(StateHasChanged);
    }

    private async Task AddToBill(RateItem item)
    {
        await BillService.AddItemAsync(item);
    }

    private void FilterByCategory(string category)
    {
        SelectedCategory = category;
    }
}
