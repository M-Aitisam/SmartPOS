@page "/ratelist"
@using System.Collections.Generic
@inject BillService BillService
@rendermode InteractiveServer
@using ClassLibraryServices
@inject ClassLibraryServices.StateContainerService StateContainer

<div class="main-container">
    <div class="search-container">
        <input type="text" class="search-box" placeholder="Search product by name " @bind="SearchQuery" />
        <i class="bi bi-search search-icon"></i>
    </div>

    <div class="category-buttons">
        @foreach (var category in Categories)
        {
            <button class="category-btn @(category == SelectedCategory ? "active" : "")"
                    @onclick="() => FilterByCategory(category)">
                @category
            </button>
        }
    </div>

    <div class="product-grid-container">
        <div class="product-grid">
            @if (FilteredItems.Any())
            {
                @foreach (var item in FilteredItems)
                {
                    <div class="product-card" @onclick="() => AddToBill(item)">
                        <div class="card-image">
                            @if (!string.IsNullOrEmpty(item.ImageUrl))
                            {
                                <img src="@item.ImageUrl" alt="@item.Name" />
                            }
                            else
                            {
                                <i class="bi bi-box-seam default-icon"></i>
                            }
                        </div>
                        <div class="card-body">
                            <h5>@item.Name</h5>
                            
                            <div class="card-footer">
                                <span class="price">$@item.BasePrice.ToString("0.00")</span>
                                <div class="add-icon">
                                    <i class="bi bi-plus-circle"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="no-items">
                    <i class="bi bi-exclamation-circle"></i>
                    <p>No products found</p>
                </div>
            }
        </div>
    </div>
</div>

<style>
    /* Base Styles */
    .main-container {
        padding: 1rem;
        max-width: 1200px;
        margin: 0 auto;
        height: 95vh;
        display: flex;
        flex-direction: column;
        font-family: 'Courier New', monospace;
    }

    /* Search */
    .search-container {
        position: relative;
        margin-bottom: 1rem;
    }

    .search-box {
        width: 100%;
        padding: 0.75rem 1rem 0.75rem 2.5rem;
        border: 1px solid #e0e0e0;
        border-radius: 4px;
        font-size: 0.9rem;
        transition: all 0.3s ease;
    }

        .search-box:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 2px rgba(0,123,255,0.1);
        }

    .search-icon {
        position: absolute;
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
    }

    /* Categories */
    .category-buttons {
        display: flex;
        gap: 0.5rem;
        overflow-x: auto;
        padding-bottom: 0.5rem;
        margin-bottom: 1rem;
        scrollbar-width: none; /* For Firefox */
    }

        .category-buttons::-webkit-scrollbar {
            display: none; /* For Chrome/Safari */
        }

    .category-btn {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 4px;
        background: #f1f1f1;
        color: #495057;
        font-size: 0.8rem;
        white-space: nowrap;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .category-btn.active,
        .category-btn:hover {
            background: #007bff;
            color: white;
        }

    /* Product Grid Container */
    .product-grid-container {
        flex: 1;
        overflow-y: auto;
        height: 0; /* Allows flex to control height */
    }

    /* Product Grid */
    .product-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
        gap: 1rem;
        padding-bottom: 1rem;
    }

    /* Product Card */
    .product-card {
        background: white;
        border-radius: 4px;
        overflow: hidden;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        cursor: pointer;
        border: 1px solid #e0e0e0;
    }

        .product-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

    .card-image {
        height: 100px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f8f9fa;
        padding: 0.5rem;
    }

        .card-image img {
            max-height: 100%;
            max-width: 100%;
            object-fit: contain;
        }

    .default-icon {
        font-size: 2rem;
        color: #adb5bd;
    }

    .card-body {
        padding: 0.75rem;
    }

        .card-body h5 {
            margin: 0 0 0.5rem 0;
            font-size: 0.9rem;
            font-weight: 600;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            text-align:center;
            font-family: 'Courier New', monospace;
        }

    .card-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .price {
        font-weight: 700;
        color: #28a745;
        font-size: 0.9rem;
    }

    .add-icon {
        color: #007bff;
        font-size: 1.2rem;
    }

    /* No Items */
    .no-items {
        grid-column: 1 / -1;
        text-align: center;
        padding: 2rem;
        color: #6c757d;
    }

        .no-items i {
            font-size: 2rem;
            margin-bottom: 0.5rem;
            color: #adb5bd;
        }

        .no-items p {
            margin: 0;
            font-size: 0.9rem;
        }

    /* Responsive */
    @@media (max-width: 768px) {
        .product-grid {
            grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
        }
    }

    @@media (max-width: 480px) {
        .product-grid {
            grid-template-columns: repeat(2, 1fr);
        }

        .category-buttons {
            gap: 0.25rem;
        }

        .category-btn {
            padding: 0.4rem 0.8rem;
            font-size: 0.7rem;
        }
    }
</style>

@code {
    private string SearchQuery { get; set; } = "";
    private string SelectedCategory { get; set; } = "All";

    private List<string> Categories =>
         new List<string> { "All" }.Concat(
             StateContainer.Categories?.Select(c => c.CategoryName) ?? Enumerable.Empty<string>()
         ).ToList();

    private IEnumerable<RateItem> FilteredItems =>
         (BillService.RateItems ?? new List<RateItem>())
         .Where(i => i.IsActive &&
                    (SelectedCategory == "All" || (i.Category ?? "") == SelectedCategory) &&
                    (string.IsNullOrEmpty(SearchQuery) ||
                     (i.Name ?? "").Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)))
         .OrderBy(i => i.Name)
         .ToList();


    protected override void OnInitialized()
    {
        BillService.OnChange += async () => await InvokeAsync(StateHasChanged);
    }

    private async Task AddToBill(RateItem item)
    {
        await BillService.AddItemAsync(item);
    }

    private void FilterByCategory(string category)
    {
        SelectedCategory = category;
    }
}