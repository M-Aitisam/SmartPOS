@page "/product"
@using ClassLibraryEntities
@using System.Text.Json
@using System.IO
@inject BillService BillService
@inject NavigationManager Navigation
@inject StateContainerService StateContainer
@inject ICategoryService CategoryService
@inject IWebHostEnvironment WebHostEnvironment
@inject IProductService ProductService
@rendermode InteractiveServer

<div class="container mt-4">
    <div class="card shadow-sm">
        @* <Sidebar /> *@
        <div class="card-body">
            <h3 class="card-title text-primary mb-4">Product Management</h3>

            <div class="row g-3 mb-4">
                <div>
                    <label class="form-label">Select Category:</label>
                    <select class="form-select" @bind="selectedCategoryId">
                        <option value="0">-- Select Category --</option>
                        @foreach (var category in StateContainer.Categories)
                        {
                            <option value="@category.CategoryID">@category.CategoryName</option>
                        }
                    </select>

                    @if (selectedCategoryId > 0)
                    {
                        <div class="border p-3 rounded-3 bg-light">
                            <h5 class="text-primary mb-3">Manage Products</h5>
                            <EditForm Model="@newProduct" OnValidSubmit="AddProduct">
                                <DataAnnotationsValidator />
                                <div class="row g-3 align-items-center">
                                    <div class="col-md-4">
                                        <label class="form-label">Product Name:</label>
                                        <InputText @bind-Value="newProduct.ProductTitle" class="form-control" />
                                    </div>
                                    <div class="col-md-3">
                                        <label class="form-label">Price:</label>
                                        <InputNumber @bind-Value="newProduct.ProductPrice" class="form-control" />
                                    </div>
                                    <div class="col-md-3">
                                        <label class="form-label">Image:</label>
                                        <div class="dropdown">
                                            <button class="btn btn-outline-secondary w-100 text-start" type="button" @onclick="ToggleDropdown">
                                                @if (!string.IsNullOrEmpty(newProduct.ImageUrl))
                                                {
                                                    <img src="@newProduct.ImageUrl" class="me-2" style="width: 20px; height: 20px;" />
                                                    @Path.GetFileName(newProduct.ImageUrl)
                                                }
                                                else
                                                {
                                                    <span>Select Image</span>
                                                }
                                            </button>
                                            <ul class="dropdown-menu" style="display: @(isDropdownOpen ? "block" : "none");">
                                                @foreach (var imgUrl in ImageUrls)
                                                {
                                                    <li>
                                                        <a class="dropdown-item" @onclick="() => SelectImage(imgUrl)">
                                                            <img src="@imgUrl" class="me-2" style="width: 20px; height: 20px;" />
                                                            @Path.GetFileName(imgUrl)
                                                        </a>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <button type="submit" class="btn btn-primary mt-4">
                                            @(editingProduct == null ? "Add Product" : "Update Product")
                                        </button>
                                    </div>
                                </div>
                                <ValidationSummary class="text-danger mt-2" />
                            </EditForm>
                        </div>

                        <div class="mt-4">
                            <h5 class="text-primary mb-3">Products in Category</h5>
                            @if (FilteredProducts.Any())
                            {
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead class="table-light">
                                            <tr>
                                                <th>Product Name</th>
                                                <th>Price</th>
                                                <th>Image</th>
                                                <th>Status</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var product in FilteredProducts)
                                            {
                                                <tr>
                                                    <td>@product.ProductTitle</td>
                                                    <td>@product.ProductPrice.ToString("C")</td>
                                                    <td>
                                                        <img src="@product.ImageUrl" style="width: 50px; height: 50px;" alt="@product.ProductTitle" />
                                                    </td>
                                                    <td>
                                                        <div class="form-check form-switch">
                                                            <InputCheckbox @bind-Value="product.IsActive" class="form-check-input"
                                                                           @onchange="async e => await ToggleProductStatus(product)" />
                                                            <label class="form-check-label">
                                                                @(product.IsActive ? "Active" : "Inactive")
                                                            </label>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <button class="btn btn-sm btn-warning me-2" @onclick="() => EditProduct(product)">
                                                            <i class="bi bi-pencil"></i>
                                                        </button>
                                                        <button class="btn btn-sm btn-danger" @onclick="async () => await DeleteProduct(product)">
                                                            <i class="bi bi-trash"></i>
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info">No products found in this category.</div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private int selectedCategoryId = 0;
    private List<Product> ProductList { get; set; } = new();
    private Product newProduct { get; set; } = new();
    private Product? editingProduct { get; set; }
    private List<string> ImageUrls { get; set; } = new();
    private bool isDropdownOpen = false;

    private List<Product> FilteredProducts => ProductList.Where(p => p.CategoryID == selectedCategoryId).ToList();

    protected override async Task OnInitializedAsync()
    {
        await LoadImages();
        await LoadProductsFromDatabase();

        if (StateContainer.Categories == null || !StateContainer.Categories.Any())
        {
            StateContainer.Categories = await CategoryService.GetCategoriesAsync();
        }
    }

    private async Task LoadImages()
    {
        try
        {
            var imagesPath = Path.Combine(WebHostEnvironment.WebRootPath, "Images");
            if (Directory.Exists(imagesPath))
            {
                ImageUrls = Directory.GetFiles(imagesPath, "*.*", SearchOption.AllDirectories)
                    .Where(file => file.ToLower().EndsWith(".png") ||
                                 file.ToLower().EndsWith(".jpg") ||
                                 file.ToLower().EndsWith(".jpeg") ||
                                 file.ToLower().EndsWith(".gif"))
                    .Select(file => file.Replace(WebHostEnvironment.WebRootPath, "").Replace("\\", "/"))
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading images: {ex.Message}");
        }
    }

    private async Task LoadProductsFromDatabase()
    {
        try
        {
            ProductList = await ProductService.GetAllProductsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products from database: {ex.Message}");
        }
    }

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }

    private void SelectImage(string imageUrl)
    {
        newProduct.ImageUrl = imageUrl;
        isDropdownOpen = false;
    }

    private async Task AddProduct()
    {
        if (selectedCategoryId <= 0) return;

        newProduct.CategoryID = selectedCategoryId;
        newProduct.IsActive = false; // Default to inactive
        newProduct.ActiveDays = ""; // Start with no days selected

        try
        {
            if (editingProduct == null)
            {
                var addedProduct = await ProductService.AddProductAsync(newProduct);
                ProductList.Add(addedProduct);
            }
            else
            {
                var updatedProduct = await ProductService.UpdateProductAsync(newProduct);
                var index = ProductList.FindIndex(p => p.ProductID == updatedProduct.ProductID);
                if (index != -1)
                {
                    ProductList[index] = updatedProduct;
                }
            }

            ResetForm();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving product: {ex.Message}");
        }
    }

    private async Task DeleteProduct(Product product)
    {
        try
        {
            bool success = await ProductService.DeleteProductAsync(product.ProductID);
            if (success)
            {
                ProductList.Remove(product);
                await BillService.RemoveRateItemAsync(product.ProductTitle);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting product: {ex.Message}");
        }
    }

    private async Task ToggleProductStatus(Product product)
    {
        try
        {
            product.IsActive = !product.IsActive;
            await ProductService.UpdateProductAsync(product);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling product status: {ex.Message}");
        }
    }

    private void EditProduct(Product product)
    {
        editingProduct = product;
        newProduct = new Product
            {
                ProductID = product.ProductID,
                ProductTitle = product.ProductTitle,
                ProductPrice = product.ProductPrice,
                ImageUrl = product.ImageUrl,
                IsActive = product.IsActive,
                CategoryID = product.CategoryID,
                ActiveDays = product.ActiveDays
            };
    }

    private void ResetForm()
    {
        newProduct = new Product();
        editingProduct = null;
    }
}