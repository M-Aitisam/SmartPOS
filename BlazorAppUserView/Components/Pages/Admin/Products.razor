@page "/product"
@using ClassLibraryEntities
@using System.Text.Json
@using System.IO
@inject BillService BillService
@inject NavigationManager Navigation
@inject StateContainerService StateContainer
@inject ICategoryService CategoryService
@inject IWebHostEnvironment WebHostEnvironment
@rendermode InteractiveServer

<div class="container mt-4">
    <div class="card shadow-sm">
        <Sidebar/>
        <div class="card-body">
            <h3 class="card-title text-primary mb-4">Product Management</h3>

            <div class="row g-3 mb-4">
                <div>
                    <label class="form-label">Select Category:</label>
                    <select class="form-select" @bind="selectedCategoryId">
                        <option value="0">-- Select Category --</option>
                        @foreach (var category in StateContainer.Categories)
                        {
                            <!-- Use category.CategoryID (database-generated ID) -->
                            <option value="@category.CategoryID">@category.CategoryName</option>
                        }
                    </select>

                    @*    <div class="row"> *@
                    @*     <div class="col-md-2"> *@
                    @*         <InputText id="productTitle" class="form-control" placeholder="Enter Product Title" @bind-Value="newProduct.ProductTitle" /> *@
                    @*     </div> *@
                    @*     <div class="col-md-2"> *@
                    @*         <InputText id="productCode" class="form-control" placeholder="Enter Product Code" @bind-Value="newProduct.ProductCode" /> *@
                    @*     </div> *@
                    @*     <div class="col-md-2"> *@
                    @*         <InputNumber id="productPrice" class="form-control" placeholder="Enter Price" @bind-Value="newProduct.ProductPrice" /> *@
                    @*     </div> *@
                    @*     <div class="col-md-2"> *@
                    @*         <div class="dropdown"> *@
                    @*             <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" @onclick="ToggleDropdown"> *@
                    @*                 @if (string.IsNullOrEmpty(newProduct.ImageUrl)) *@
                    @*                 { *@
                    @*                     <span>Select Image</span> *@
                    @*                 } *@
                    @*                 else *@
                    @*                 { *@
                    @*                     <img src="@newProduct.ImageUrl" alt="Selected Image" style="width: 20px; height: 20px; margin-right: 10px;" /> *@
                    @*                     <span>@Path.GetFileName(newProduct.ImageUrl)</span> *@
                    @*                 } *@
                    @*             </button> *@
                    @*             <ul class="dropdown-menu" style="display: @(isDropdownOpen ? "block" : "none"); max-height: 300px; overflow-y: auto;" aria-labelledby="dropdownMenuButton"> *@
                    @*                 @foreach (var imgUrl in ImageUrls) *@
                    @*                 { *@
                    @*                     <li> *@
                    @*                         <a class="dropdown-item" @onclick="() => SelectImage(imgUrl)"> *@
                    @*                             <img src="@imgUrl" alt="@Path.GetFileName(imgUrl)" style="width: 25px; height: 25px; margin-right: 10px;" /> *@
                    @*                             @Path.GetFileName(imgUrl) *@
                    @*                         </a> *@
                    @*                     </li> *@
                    @*                 } *@
                    @*             </ul> *@
                    @*         </div> *@
                    @*     </div> *@
                    @*     <div class="col-md-2"> *@
                    @*         <div class="form-check form-switch"> *@
                    @*             <InputCheckbox @bind-Value="newProduct.IsActive" class="form-check-input" id="flexSwitchCheckChecked" /> *@
                    @*             <label class="form-check-label" for="flexSwitchCheckChecked">Is Active</label> *@
                    @*         </div> *@
                    @*     </div> *@
                    @*     <div class="col-md-2"> *@
                    @*         <button type="submit" class="btn btn-success">Add Product</button> *@

                    @*     </div> *@
                    @* </div> *@

                    @if (selectedCategoryId > 0)
                    {
                        <div class="border p-3 rounded-3 bg-light">
                            <h5 class="text-primary mb-3">Manage Products</h5>
                            <EditForm Model="@newProduct" OnValidSubmit="AddProduct">
                                <DataAnnotationsValidator />
                                <div class="row g-3 align-items-center">
                                    <div class="col-md-4">
                                        <label class="form-label">Product Name:</label>
                                        <InputText @bind-Value="newProduct.ProductTitle" class="form-control" />
                                    </div>
                                    <div class="col-md-3">
                                        <label class="form-label">Price:</label>
                                        <InputNumber @bind-Value="newProduct.ProductPrice" class="form-control" />
                                    </div>
                                    <div class="col-md-3">
                                        <label class="form-label">Image:</label>
                                        <div class="dropdown">
                                            <button class="btn btn-outline-secondary w-100 text-start" type="button" @onclick="ToggleDropdown">
                                                @if (!string.IsNullOrEmpty(newProduct.ImageUrl))
                                                {
                                                    <img src="@newProduct.ImageUrl" class="me-2" style="width: 20px; height: 20px;" />
                                                    @Path.GetFileName(newProduct.ImageUrl)
                                                }
                                                else
                                                {
                                                    <span>Select Image</span>
                                                }
                                            </button>
                                            <ul class="dropdown-menu" style="display: @(isDropdownOpen ? "block" : "none");">
                                                @foreach (var imgUrl in ImageUrls)
                                                {
                                                    <li>
                                                        <a class="dropdown-item" @onclick="() => SelectImage(imgUrl)">
                                                            <img src="@imgUrl" class="me-2" style="width: 20px; height: 20px;" />
                                                            @Path.GetFileName(imgUrl)
                                                        </a>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <button type="submit" class="btn btn-primary mt-4">
                                            @(editingProduct == null ? "Add Product" : "Update Product")
                                        </button>
                                    </div>
                                </div>
                                <ValidationSummary class="text-danger mt-2" />
                            </EditForm>
                        </div>

                        <div class="mt-4">
                            <h5 class="text-primary mb-3">Products in Category</h5>
                            @if (FilteredProducts.Any())
                            {
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead class="table-light">
                                            <tr>
                                                <th>Product Name</th>
                                                <th>Price</th>
                                                <th>Image</th>
                                                <th>Status</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var product in FilteredProducts)
                                            {
                                                <tr>
                                                    <td>@product.ProductTitle</td>
                                                    <td>@product.ProductPrice.ToString("C")</td>
                                                    <td>
                                                        <img src="@product.ImageUrl" style="width: 50px; height: 50px;" alt="@product.ProductTitle" />
                                                    </td>
                                                    <td>
                                                        <div class="form-check form-switch">
                                                            <InputCheckbox @bind-Value="product.IsActive" class="form-check-input" @onchange="async e => await ToggleActiveStatus(product)" />
                                                            <label class="form-check-label">
                                                                @(product.IsActive ? "Active" : "Inactive")
                                                            </label>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <button class="btn btn-sm btn-warning me-2" @onclick="() => EditProduct(product)">
                                                            <i class="bi bi-pencil"></i>
                                                        </button>
                                                        <button class="btn btn-sm btn-danger" @onclick="async () => await DeleteProduct(product)" disabled="@product.IsActive">
                                                            <i class="bi bi-trash"></i>
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info">No products found in this category.</div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
@code {

    private int selectedCategoryId = 0;
    private List<Product> ProductList { get; set; } = new();
    private Product newProduct { get; set; } = new();
    private Product? editingProduct { get; set; }
    private List<string> ImageUrls { get; set; } = new();
    private bool isDropdownOpen = false;

    private List<Product> FilteredProducts => ProductList.Where(p => p.CategoryID == selectedCategoryId).ToList();
    protected override async Task OnInitializedAsync()
    {
        await LoadImages();
        await LoadProducts();


        if (StateContainer.Categories == null || !StateContainer.Categories.Any())
        {
            // Fetch categories from the database
            StateContainer.Categories = await CategoryService.GetCategoriesAsync();
        }


        UpdateRateItems();
    }

    private async Task LoadImages()
    {
        try
        {
            var imagesPath = Path.Combine(WebHostEnvironment.WebRootPath, "Images");
            if (Directory.Exists(imagesPath))
            {
                var imageFiles = Directory.GetFiles(imagesPath, "*.*", SearchOption.AllDirectories)
                    .Where(file => file.ToLower().EndsWith(".png") ||
                                   file.ToLower().EndsWith(".jpg") ||
                                   file.ToLower().EndsWith(".jpeg") ||
                                   file.ToLower().EndsWith(".gif"))
                    .ToList();

                ImageUrls = imageFiles
                    .Select(file => file.Replace(WebHostEnvironment.WebRootPath, "").Replace("\\", "/"))
                    .ToList();
            }
            else
            {
                Console.WriteLine("Images directory not found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading images: {ex.Message}");
        }
    }


    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }

    private void SelectImage(string imageUrl)
    {
        newProduct.ImageUrl = imageUrl;
        isDropdownOpen = false;
    }

    private async Task AddProduct()
    {
        if (selectedCategoryId == 0) return;

        newProduct.CategoryID = selectedCategoryId;

        if (editingProduct == null)
        {
            ProductList.Add(newProduct);
            await BillService.AddRateItemAsync(new RateItem
                {
                    Name = newProduct.ProductTitle,
                    BasePrice = newProduct.ProductPrice,
                    ImageUrl = newProduct.ImageUrl,
                    IsActive = newProduct.IsActive
                });
        }
        else
        {
            var index = ProductList.IndexOf(editingProduct);
            if (index != -1)
            {
                ProductList[index] = newProduct;
                var existingItem = BillService.RateItems.FirstOrDefault(x => x.Name == editingProduct.ProductTitle);
                if (existingItem != null)
                {
                    existingItem.Name = newProduct.ProductTitle;
                    existingItem.BasePrice = newProduct.ProductPrice;
                    existingItem.ImageUrl = newProduct.ImageUrl;
                    existingItem.IsActive = newProduct.IsActive;
                }
            }
        }

        await SaveProductsToFile();
        newProduct = new Product();
        editingProduct = null;
        UpdateRateItems();
    }

    private async Task DeleteProduct(Product product)
    {
        ProductList.Remove(product);
        await BillService.RemoveRateItemAsync(product.ProductTitle);
        await SaveProductsToFile();
        UpdateRateItems();
    }

    private async Task ToggleActiveStatus(Product product)
    {
        await SaveProductsToFile();
        UpdateRateItems();
    }

    private void EditProduct(Product product)
    {
        editingProduct = product;
        newProduct = new Product
            {
                ProductTitle = product.ProductTitle,
                ProductPrice = product.ProductPrice,
                ImageUrl = product.ImageUrl,
                IsActive = product.IsActive,
                CategoryID = product.CategoryID
            };
    }

    private void UpdateRateItems()
    {
        var activeItems = ProductList
            .Where(p => p.IsActive)
            .Select(p => new RateItem
                {
                    Name = p.ProductTitle,
                    BasePrice = p.ProductPrice,
                    ImageUrl = p.ImageUrl,
                    IsActive = p.IsActive
                })
            .ToList();

        BillService.UpdateRateItems(activeItems);
    }

    private async Task LoadProducts()
    {
        var filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Dal", "Product.json");
        if (File.Exists(filePath))
        {
            var json = await File.ReadAllTextAsync(filePath);
            ProductList = JsonSerializer.Deserialize<List<Product>>(json) ?? new List<Product>();
        }
    }


    private async Task SaveProductsToFile()
    {
        var filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Dal", "Product.json");
        var json = JsonSerializer.Serialize(ProductList);
        await File.WriteAllTextAsync(filePath, json);
    }
}